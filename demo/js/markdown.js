if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}


var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.define("goog.DEBUG", true);
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.define("goog.DISALLOW_TEST_ONLY_CODE", COMPILED && !goog.DEBUG);
goog.define("goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
  }
  goog.constructNamespace_(name);
};
goog.constructNamespace_ = function(name, opt_obj) {
  if (!COMPILED) {
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name, opt_obj);
};
goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;
goog.module = function(name) {
  if (!goog.isString(name) || !name || name.search(goog.VALID_MODULE_RE_) == -1) {
    throw Error("Invalid module identifier");
  }
  if (!goog.isInModuleLoader_()) {
    throw Error("Module " + name + " has been loaded incorrectly.");
  }
  if (goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module may only be called once per module.");
  }
  goog.moduleLoaderState_.moduleName = name;
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
  }
};
goog.module.get = function(name) {
  return goog.module.getInternal_(name);
};
goog.module.getInternal_ = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return name in goog.loadedModules_ ? goog.loadedModules_[name] : goog.getObjectByName(name);
    } else {
      return null;
    }
  }
};
goog.moduleLoaderState_ = null;
goog.isInModuleLoader_ = function() {
  return goog.moduleLoaderState_ != null;
};
goog.module.declareLegacyNamespace = function() {
  if (!COMPILED && !goog.isInModuleLoader_()) {
    throw new Error("goog.module.declareLegacyNamespace must be called from " + "within a goog.module");
  }
  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
    throw Error("goog.module must be called prior to " + "goog.module.declareLegacyNamespace.");
  }
  goog.moduleLoaderState_.declareLegacyNamespace = true;
};
goog.setTestOnly = function(opt_message) {
  if (goog.DISALLOW_TEST_ONLY_CODE) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return name in goog.loadedModules_ || !goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {"goog.module":true};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires, opt_isModule) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      deps.pathIsModule[path] = !!opt_isModule;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.logToConsole_ = function(msg) {
  if (goog.global.console) {
    goog.global.console["error"](msg);
  }
};
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
      goog.maybeProcessDeferredDep_(name);
    }
    if (goog.isProvided_(name)) {
      if (goog.isInModuleLoader_()) {
        return goog.module.getInternal_(name);
      } else {
        return null;
      }
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return null;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    goog.logToConsole_(errorMessage);
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.define("goog.LOAD_MODULE_USING_EVAL", true);
goog.define("goog.SEAL_MODULE_EXPORTS", goog.DEBUG);
goog.loadedModules_ = {};
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathIsModule:{}, nameToPath:{}, requires:{}, visited:{}, written:{}, deferred:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("SCRIPT");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var script = (scripts[i]);
      var src = script.src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src, opt_sourceText) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (importScript(src, opt_sourceText)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.IS_OLD_IE_ = !!(!goog.global.atob && goog.global.document && goog.global.document.all);
  goog.importModule_ = function(src) {
    var bootstrap = 'goog.retrieveAndExecModule_("' + src + '");';
    if (goog.importScript_("", bootstrap)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.queuedModules_ = [];
  goog.wrapModule_ = function(srcUrl, scriptText) {
    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
      return "" + "goog.loadModule(function(exports) {" + '"use strict";' + scriptText + "\n" + ";return exports" + "});" + "\n//# sourceURL\x3d" + srcUrl + "\n";
    } else {
      return "" + "goog.loadModule(" + goog.global.JSON.stringify(scriptText + "\n//# sourceURL\x3d" + srcUrl + "\n") + ");";
    }
  };
  goog.loadQueuedModules_ = function() {
    var count = goog.queuedModules_.length;
    if (count > 0) {
      var queue = goog.queuedModules_;
      goog.queuedModules_ = [];
      for (var i = 0;i < count;i++) {
        var path = queue[i];
        goog.maybeProcessDeferredPath_(path);
      }
    }
  };
  goog.maybeProcessDeferredDep_ = function(name) {
    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
      var path = goog.getPathFromDeps_(name);
      goog.maybeProcessDeferredPath_(goog.basePath + path);
    }
  };
  goog.isDeferredModule_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && goog.dependencies_.pathIsModule[path]) {
      var abspath = goog.basePath + path;
      return abspath in goog.dependencies_.deferred;
    }
    return false;
  };
  goog.allDepsAreAvailable_ = function(name) {
    var path = goog.getPathFromDeps_(name);
    if (path && path in goog.dependencies_.requires) {
      for (var requireName in goog.dependencies_.requires[path]) {
        if (!goog.isProvided_(requireName) && !goog.isDeferredModule_(requireName)) {
          return false;
        }
      }
    }
    return true;
  };
  goog.maybeProcessDeferredPath_ = function(abspath) {
    if (abspath in goog.dependencies_.deferred) {
      var src = goog.dependencies_.deferred[abspath];
      delete goog.dependencies_.deferred[abspath];
      goog.globalEval(src);
    }
  };
  goog.loadModule = function(moduleDef) {
    var previousState = goog.moduleLoaderState_;
    try {
      goog.moduleLoaderState_ = {moduleName:undefined};
      var exports;
      if (goog.isFunction(moduleDef)) {
        exports = moduleDef.call(goog.global, {});
      } else {
        if (goog.isString(moduleDef)) {
          exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
        } else {
          throw Error("Invalid module definition");
        }
      }
      var moduleName = goog.moduleLoaderState_.moduleName;
      if (!goog.isString(moduleName) || !moduleName) {
        throw Error('Invalid module name "' + moduleName + '"');
      }
      if (goog.moduleLoaderState_.declareLegacyNamespace) {
        goog.constructNamespace_(moduleName, exports);
      } else {
        if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
          Object.seal(exports);
        }
      }
      goog.loadedModules_[moduleName] = exports;
    } finally {
      goog.moduleLoaderState_ = previousState;
    }
  };
  goog.loadModuleFromSource_ = function(source) {
    var exports = {};
    eval(arguments[0]);
    return exports;
  };
  goog.writeScriptSrcNode_ = function(src) {
    goog.global.document.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
  };
  goog.appendScriptSrcNode_ = function(src) {
    var doc = goog.global.document;
    var scriptEl = doc.createElement("script");
    scriptEl.type = "text/javascript";
    scriptEl.src = src;
    scriptEl.defer = false;
    scriptEl.async = false;
    doc.head.appendChild(scriptEl);
  };
  goog.writeScriptTag_ = function(src, opt_sourceText) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING && doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      var isOldIE = goog.IS_OLD_IE_;
      if (opt_sourceText === undefined) {
        if (!isOldIE) {
          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
            goog.appendScriptSrcNode_(src);
          } else {
            goog.writeScriptSrcNode_(src);
          }
        } else {
          var state = " onreadystatechange\x3d'goog.onScriptLoad_(this, " + ++goog.lastNonModuleScriptIndex_ + ")' ";
          doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"' + state + "\x3e\x3c/" + "script\x3e");
        }
      } else {
        doc.write('\x3cscript type\x3d"text/javascript"\x3e' + opt_sourceText + "\x3c/" + "script\x3e");
      }
      return true;
    } else {
      return false;
    }
  };
  goog.lastNonModuleScriptIndex_ = 0;
  goog.onScriptLoad_ = function(script, scriptIndex) {
    if (script.readyState == "complete" && goog.lastNonModuleScriptIndex_ == scriptIndex) {
      goog.loadQueuedModules_();
    }
    return true;
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      goog.dependencies_.written[path] = true;
    }
    var moduleState = goog.moduleLoaderState_;
    goog.moduleLoaderState_ = null;
    var loadingModule = false;
    for (var i = 0;i < scripts.length;i++) {
      var path = scripts[i];
      if (path) {
        if (!deps.pathIsModule[path]) {
          goog.importScript_(goog.basePath + path);
        } else {
          loadingModule = true;
          goog.importModule_(goog.basePath + path);
        }
      } else {
        goog.moduleLoaderState_ = moduleState;
        throw Error("Undefined script input");
      }
    }
    goog.moduleLoaderState_ = moduleState;
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.normalizePath_ = function(path) {
  var components = path.split("/");
  var i = 0;
  while (i < components.length) {
    if (components[i] == ".") {
      components.splice(i, 1);
    } else {
      if (i && components[i] == ".." && components[i - 1] && components[i - 1] != "..") {
        components.splice(--i, 2);
      } else {
        i++;
      }
    }
  }
  return components.join("/");
};
goog.loadFileSync_ = function(src) {
  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
  } else {
    var xhr = new goog.global["XMLHttpRequest"];
    xhr.open("get", src, false);
    xhr.send();
    return xhr.responseText;
  }
};
goog.retrieveAndExecModule_ = function(src) {
  if (!COMPILED) {
    var originalPath = src;
    src = goog.normalizePath_(src);
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    var scriptText = goog.loadFileSync_(src);
    if (scriptText != null) {
      var execModuleScript = goog.wrapModule_(src, scriptText);
      var isOldIE = goog.IS_OLD_IE_;
      if (isOldIE) {
        goog.dependencies_.deferred[originalPath] = execModuleScript;
        goog.queuedModules_.push(originalPath);
      } else {
        importScript(src, execModuleScript);
      }
    } else {
      throw new Error("load of " + src + "failed");
    }
  }
};
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return !!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return (fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return +new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _evalTest_ \x3d 1;");
        if (typeof goog.global["_evalTest_"] != "undefined") {
          try {
            delete goog.global["_evalTest_"];
          } catch (ignore) {
          }
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("SCRIPT");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = new Array(arguments.length - 2);
    for (var i = 2;i < arguments.length;i++) {
      args[i - 2] = arguments[i];
    }
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    var ctorArgs = new Array(arguments.length - 1);
    for (var i = 1;i < arguments.length;i++) {
      ctorArgs[i - 1] = arguments[i];
    }
    return caller.superClass_.constructor.apply(me, ctorArgs);
  }
  var args = new Array(arguments.length - 2);
  for (var i = 2;i < arguments.length;i++) {
    args[i - 2] = arguments[i];
  }
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.define("goog.string.FORCE_NON_DOM_HTML_UNESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmptyOrWhitespace = function(str) {
  return /^[\s\xa0]*$/.test(str);
};
goog.string.isEmptyString = function(str) {
  return str.length == 0;
};
goog.string.isEmpty = goog.string.isEmptyOrWhitespace;
goog.string.isEmptyOrWhitespaceSafe = function(str) {
  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
};
goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;
goog.string.isBreakingWhitespace = function(str) {
  return !/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return !/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return !/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return !/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = goog.TRUSTED_SITE && String.prototype.trim ? function(str) {
  return str.trim();
} : function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return -1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return -1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING && "document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return '"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return (new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return -1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return /^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.capitalize = function(str) {
  return String(str.charAt(0)).toUpperCase() + String(str.substr(1)).toLowerCase();
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.string.editDistance = function(a, b) {
  var v0 = [];
  var v1 = [];
  if (a == b) {
    return 0;
  }
  if (!a.length || !b.length) {
    return Math.max(a.length, b.length);
  }
  for (var i = 0;i < b.length + 1;i++) {
    v0[i] = i;
  }
  for (var i = 0;i < a.length;i++) {
    v1[0] = i + 1;
    for (var j = 0;j < b.length;j++) {
      var cost = a[i] != b[j];
      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
    }
    for (var j = 0;j < v0.length;j++) {
      v0[j] = v1[j];
    }
  }
  return v1[b.length];
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
  if (key in obj) {
    return obj[key];
  }
  var val = f();
  obj[key] = val;
  return val;
};
goog.object.equals = function(a, b) {
  for (var k in a) {
    if (!(k in b) || a[k] !== b[k]) {
      return false;
    }
  }
  for (var k in b) {
    if (!(k in a)) {
      return false;
    }
  }
  return true;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return !!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
  this.reportErrorToServer = true;
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return (value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("Expected instanceof %s but got %s.", [goog.asserts.getType_(type), goog.asserts.getType_(value)], opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.asserts.getType_ = function(value) {
  if (value instanceof Function) {
    return value.displayName || value.name || "unknown type name";
  } else {
    if (value instanceof Object) {
      return value.constructor.displayName || value.constructor.name || Object.prototype.toString.call(value);
    } else {
      return value === null ? "null" : typeof value;
    }
  }
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return -1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return -1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return -1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.removeAllIf = function(arr, f, opt_obj) {
  var removedCount = 0;
  goog.array.forEachRight(arr, function(val, index) {
    if (f.call(opt_obj, val, index, arr)) {
      if (goog.array.removeAt(arr, index)) {
        removedCount++;
      }
    }
  });
  return removedCount;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return [];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    if (goog.isArrayLike(arr2)) {
      var len1 = arr1.length || 0;
      var len2 = arr2.length || 0;
      arr1.length = len1 + len2;
      for (var j = 0;j < len2;j++) {
        arr1[len1 + j] = arr2[j];
      }
    } else {
      arr1.push(arr2);
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(item) ? "o" + goog.getUid(item) : (typeof item).charAt(0) + item;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return keyCompareFn(keyFn(a), keyFn(b));
  });
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  goog.array.sortByKey(arr, function(obj) {
    return obj[key];
  }, opt_compareFn);
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.inverseDefaultCompare = function(a, b) {
  return -goog.array.defaultCompare(a, b);
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return [];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var CHUNK_SIZE = 8192;
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      for (var c = 0;c < element.length;c += CHUNK_SIZE) {
        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
        var recurseResult = goog.array.flatten.apply(null, chunk);
        for (var r = 0;r < recurseResult.length;r++) {
          result.push(recurseResult[r]);
        }
      }
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return [];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.array.copyByIndex = function(arr, index_arr) {
  var result = [];
  goog.array.forEach(index_arr, function(index) {
    result.push(arr[index]);
  });
  return result;
};
goog.provide("cljs.core");
goog.require("goog.string");
goog.require("goog.object");
goog.require("goog.array");
goog.require("goog.string.StringBuffer");
cljs.core._STAR_clojurescript_version_STAR_ = "1.7.145";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_target_STAR_;
goog.define("cljs.core._STAR_target_STAR_", "default");
cljs.core._STAR_ns_STAR_ = null;
cljs.core._STAR_out_STAR_ = null;
cljs.core._STAR_assert_STAR_ = true;
if (typeof cljs.core._STAR_print_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_fn_STAR_ = function cljs$core$_STAR_print_fn_STAR_(_) {
    throw new Error("No *print-fn* fn set for evaluation environment");
  };
}
if (typeof cljs.core._STAR_print_err_fn_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_print_err_fn_STAR_ = function cljs$core$_STAR_print_err_fn_STAR_(_) {
    throw new Error("No *print-err-fn* fn set for evaluation environment");
  };
}
cljs.core.set_print_fn_BANG_ = function cljs$core$set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core.set_print_err_fn_BANG_ = function cljs$core$set_print_err_fn_BANG_(f) {
  return cljs.core._STAR_print_err_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
if (typeof cljs.core._STAR_loaded_libs_STAR_ !== "undefined") {
} else {
  cljs.core._STAR_loaded_libs_STAR_ = null;
}
cljs.core.pr_opts = function cljs$core$pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$flush_DASH_on_DASH_newline, cljs.core._STAR_flush_on_newline_STAR_, cljs.core.cst$kw$readably, cljs.core._STAR_print_readably_STAR_, cljs.core.cst$kw$meta, cljs.core._STAR_print_meta_STAR_, cljs.core.cst$kw$dup, cljs.core._STAR_print_dup_STAR_, cljs.core.cst$kw$print_DASH_length, cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.into_array;
cljs.core.enable_console_print_BANG_ = function cljs$core$enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  cljs.core._STAR_print_fn_STAR_ = function() {
    var G__7867__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__7867 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__7868__i = 0, G__7868__a = new Array(arguments.length - 0);
        while (G__7868__i < G__7868__a.length) {
          G__7868__a[G__7868__i] = arguments[G__7868__i + 0];
          ++G__7868__i;
        }
        args = new cljs.core.IndexedSeq(G__7868__a, 0);
      }
      return G__7867__delegate.call(this, args);
    };
    G__7867.cljs$lang$maxFixedArity = 0;
    G__7867.cljs$lang$applyTo = function(arglist__7869) {
      var args = cljs.core.seq(arglist__7869);
      return G__7867__delegate(args);
    };
    G__7867.cljs$core$IFn$_invoke$arity$variadic = G__7867__delegate;
    return G__7867;
  }();
  cljs.core._STAR_print_err_fn_STAR_ = function() {
    var G__7870__delegate = function(args) {
      return console.error.apply(console, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null, args));
    };
    var G__7870 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__7871__i = 0, G__7871__a = new Array(arguments.length - 0);
        while (G__7871__i < G__7871__a.length) {
          G__7871__a[G__7871__i] = arguments[G__7871__i + 0];
          ++G__7871__i;
        }
        args = new cljs.core.IndexedSeq(G__7871__a, 0);
      }
      return G__7870__delegate.call(this, args);
    };
    G__7870.cljs$lang$maxFixedArity = 0;
    G__7870.cljs$lang$applyTo = function(arglist__7872) {
      var args = cljs.core.seq(arglist__7872);
      return G__7870__delegate(args);
    };
    G__7870.cljs$core$IFn$_invoke$arity$variadic = G__7870__delegate;
    return G__7870;
  }();
  return null;
};
cljs.core._STAR_1;
cljs.core._STAR_2;
cljs.core._STAR_3;
cljs.core._STAR_e;
cljs.core.truth_ = function cljs$core$truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.instance_QMARK_;
cljs.core.Keyword;
cljs.core.identical_QMARK_ = function cljs$core$identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function cljs$core$nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function cljs$core$array_QMARK_(x) {
  if (cljs.core._STAR_target_STAR_ === "nodejs") {
    return Array.isArray(x);
  } else {
    return x instanceof Array;
  }
};
cljs.core.number_QMARK_ = function cljs$core$number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function cljs$core$not(x) {
  if (x == null) {
    return true;
  } else {
    if (x === false) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.some_QMARK_ = function cljs$core$some_QMARK_(x) {
  return !(x == null);
};
cljs.core.object_QMARK_ = function cljs$core$object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function cljs$core$string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.char_QMARK_ = function cljs$core$char_QMARK_(x) {
  return goog.string.isUnicodeChar(x);
};
cljs.core.native_satisfies_QMARK_ = function cljs$core$native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function cljs$core$is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function cljs$core$type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function cljs$core$missing_protocol(proto, obj) {
  var ty = cljs.core.type(obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__4765__auto__ = ty;
    if (cljs.core.truth_(and__4765__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__4765__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function cljs$core$type__GT_str(ty) {
  var temp__4423__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4423__auto__)) {
    var s = temp__4423__auto__;
    return s;
  } else {
    return [cljs.core.str(ty)].join("");
  }
};
cljs.core.load_file = function cljs$core$load_file(file) {
  if (cljs.core.truth_(COMPILED)) {
    return null;
  } else {
    return goog.nodeGlobalRequire(file);
  }
};
if (typeof Symbol !== "undefined" && goog.typeOf(Symbol) === "function") {
  cljs.core.ITER_SYMBOL = Symbol.iterator;
} else {
  cljs.core.ITER_SYMBOL = "@@iterator";
}
cljs.core.CHAR_MAP = {"]":"_RBRACK_", "'":"_SINGLEQUOTE_", "\x3d":"_EQ_", '"':"_DOUBLEQUOTE_", "!":"_BANG_", "*":"_STAR_", "%":"_PERCENT_", "|":"_BAR_", "~":"_TILDE_", "/":"_SLASH_", "\\":"_BSLASH_", "-":"_", "?":"_QMARK_", "\x26":"_AMPERSAND_", ":":"_COLON_", "\x3c":"_LT_", "{":"_LBRACE_", "}":"_RBRACE_", "[":"_LBRACK_", "#":"_SHARP_", "^":"_CARET_", "+":"_PLUS_", "@":"_CIRCA_", "\x3e":"_GT_"};
cljs.core.DEMUNGE_MAP = {"_RBRACE_":"}", "_COLON_":":", "_BANG_":"!", "_QMARK_":"?", "_BSLASH_":"\\\\", "_SLASH_":"/", "_PERCENT_":"%", "_PLUS_":"+", "_SHARP_":"#", "_LBRACE_":"{", "_BAR_":"|", "_LBRACK_":"[", "_EQ_":"\x3d", "_":"-", "_TILDE_":"~", "_RBRACK_":"]", "_GT_":"\x3e", "_SINGLEQUOTE_":"'", "_CIRCA_":"@", "_AMPERSAND_":"\x26", "_DOUBLEQUOTE_":'\\"', "_CARET_":"^", "_LT_":"\x3c", "_STAR_":"*"};
cljs.core.DEMUNGE_PATTERN = null;
cljs.core.system_time = function cljs$core$system_time() {
  if (typeof performance !== "undefined") {
    return performance.now();
  } else {
    if (typeof process !== "undefined") {
      var t = process.hrtime();
      return (t[0] * 1E9 + t[1]) / 1E6;
    } else {
      return (new Date).getTime();
    }
  }
};
cljs.core.make_array = function cljs$core$make_array(var_args) {
  var args7873 = [];
  var len__5835__auto___7876 = arguments.length;
  var i__5836__auto___7877 = 0;
  while (true) {
    if (i__5836__auto___7877 < len__5835__auto___7876) {
      args7873.push(arguments[i__5836__auto___7877]);
      var G__7878 = i__5836__auto___7877 + 1;
      i__5836__auto___7877 = G__7878;
      continue;
    } else {
    }
    break;
  }
  var G__7875 = args7873.length;
  switch(G__7875) {
    case 1:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7873.length)].join(""));;
  }
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = function(size) {
  return new Array(size);
};
cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = function(type, size) {
  return new Array(size);
};
cljs.core.make_array.cljs$lang$maxFixedArity = 2;
cljs.core.aclone = function cljs$core$aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__5680__auto___7880 = len;
  var i_7881 = 0;
  while (true) {
    if (i_7881 < n__5680__auto___7880) {
      new_arr[i_7881] = arr[i_7881];
      var G__7882 = i_7881 + 1;
      i_7881 = G__7882;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function cljs$core$array(var_args) {
  var a = new Array(arguments.length);
  var i = 0;
  while (true) {
    if (i < a.length) {
      a[i] = arguments[i];
      var G__7883 = i + 1;
      i = G__7883;
      continue;
    } else {
      return a;
    }
    break;
  }
};
cljs.core.apply;
cljs.core.aget = function cljs$core$aget(var_args) {
  var args7884 = [];
  var len__5835__auto___7893 = arguments.length;
  var i__5836__auto___7894 = 0;
  while (true) {
    if (i__5836__auto___7894 < len__5835__auto___7893) {
      args7884.push(arguments[i__5836__auto___7894]);
      var G__7895 = i__5836__auto___7894 + 1;
      i__5836__auto___7894 = G__7895;
      continue;
    } else {
    }
    break;
  }
  var G__7889 = args7884.length;
  switch(G__7889) {
    case 2:
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args7884.slice(2), 0);
      return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return array[i];
};
cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = function(array, i, idxs) {
  var G__7890 = cljs.core.aget;
  var G__7891 = array[i];
  var G__7892 = idxs;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__7890, G__7891, G__7892) : cljs.core.apply.call(null, G__7890, G__7891, G__7892);
};
cljs.core.aget.cljs$lang$applyTo = function(seq7885) {
  var G__7886 = cljs.core.first(seq7885);
  var seq7885__$1 = cljs.core.next(seq7885);
  var G__7887 = cljs.core.first(seq7885__$1);
  var seq7885__$2 = cljs.core.next(seq7885__$1);
  return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__7886, G__7887, seq7885__$2);
};
cljs.core.aget.cljs$lang$maxFixedArity = 2;
cljs.core.aset = function cljs$core$aset(var_args) {
  var args7897 = [];
  var len__5835__auto___7908 = arguments.length;
  var i__5836__auto___7909 = 0;
  while (true) {
    if (i__5836__auto___7909 < len__5835__auto___7908) {
      args7897.push(arguments[i__5836__auto___7909]);
      var G__7910 = i__5836__auto___7909 + 1;
      i__5836__auto___7909 = G__7910;
      continue;
    } else {
    }
    break;
  }
  var G__7903 = args7897.length;
  switch(G__7903) {
    case 3:
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args7897.slice(3), 0);
      return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5854__auto__);
  }
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = function(array, i, val) {
  return array[i] = val;
};
cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = function(array, idx, idx2, idxv) {
  var G__7904 = cljs.core.aset;
  var G__7905 = array[idx];
  var G__7906 = idx2;
  var G__7907 = idxv;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__7904, G__7905, G__7906, G__7907) : cljs.core.apply.call(null, G__7904, G__7905, G__7906, G__7907);
};
cljs.core.aset.cljs$lang$applyTo = function(seq7898) {
  var G__7899 = cljs.core.first(seq7898);
  var seq7898__$1 = cljs.core.next(seq7898);
  var G__7900 = cljs.core.first(seq7898__$1);
  var seq7898__$2 = cljs.core.next(seq7898__$1);
  var G__7901 = cljs.core.first(seq7898__$2);
  var seq7898__$3 = cljs.core.next(seq7898__$2);
  return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__7899, G__7900, G__7901, seq7898__$3);
};
cljs.core.aset.cljs$lang$maxFixedArity = 3;
cljs.core.alength = function cljs$core$alength(array) {
  return array.length;
};
cljs.core.reduce;
cljs.core.into_array = function cljs$core$into_array(var_args) {
  var args7912 = [];
  var len__5835__auto___7918 = arguments.length;
  var i__5836__auto___7919 = 0;
  while (true) {
    if (i__5836__auto___7919 < len__5835__auto___7918) {
      args7912.push(arguments[i__5836__auto___7919]);
      var G__7920 = i__5836__auto___7919 + 1;
      i__5836__auto___7919 = G__7920;
      continue;
    } else {
    }
    break;
  }
  var G__7914 = args7912.length;
  switch(G__7914) {
    case 1:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7912.length)].join(""));;
  }
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = function(aseq) {
  return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null, aseq);
};
cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = function(type, aseq) {
  var G__7915 = function(a, x) {
    a.push(x);
    return a;
  };
  var G__7916 = [];
  var G__7917 = aseq;
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__7915, G__7916, G__7917) : cljs.core.reduce.call(null, G__7915, G__7916, G__7917);
};
cljs.core.into_array.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke = function cljs$core$js_invoke(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___7925 = arguments.length;
  var i__5836__auto___7926 = 0;
  while (true) {
    if (i__5836__auto___7926 < len__5835__auto___7925) {
      args__5842__auto__.push(arguments[i__5836__auto___7926]);
      var G__7927 = i__5836__auto___7926 + 1;
      i__5836__auto___7926 = G__7927;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 2 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(2), 0) : null;
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5843__auto__);
};
cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = function(obj, s, args) {
  return obj[s].apply(obj, cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
};
cljs.core.js_invoke.cljs$lang$maxFixedArity = 2;
cljs.core.js_invoke.cljs$lang$applyTo = function(seq7922) {
  var G__7923 = cljs.core.first(seq7922);
  var seq7922__$1 = cljs.core.next(seq7922);
  var G__7924 = cljs.core.first(seq7922__$1);
  var seq7922__$2 = cljs.core.next(seq7922__$1);
  return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__7923, G__7924, seq7922__$2);
};
cljs.core.Fn = function() {
};
cljs.core.IFn = function() {
};
cljs.core._invoke = function cljs$core$_invoke(var_args) {
  var args7928 = [];
  var len__5835__auto___7931 = arguments.length;
  var i__5836__auto___7932 = 0;
  while (true) {
    if (i__5836__auto___7932 < len__5835__auto___7931) {
      args7928.push(arguments[i__5836__auto___7932]);
      var G__7933 = i__5836__auto___7932 + 1;
      i__5836__auto___7932 = G__7933;
      continue;
    } else {
    }
    break;
  }
  var G__7930 = args7928.length;
  switch(G__7930) {
    case 1:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    case 8:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7]);
      break;
    case 9:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8]);
      break;
    case 10:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9]);
      break;
    case 11:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10]);
      break;
    case 12:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11]);
      break;
    case 13:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12]);
      break;
    case 14:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13]);
      break;
    case 15:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14]);
      break;
    case 16:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15]);
      break;
    case 17:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16]);
      break;
    case 18:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17]);
      break;
    case 19:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18]);
      break;
    case 20:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19]);
      break;
    case 21:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20]);
      break;
    case 22:
      return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9], arguments[10], arguments[11], arguments[12], arguments[13], arguments[14], arguments[15], arguments[16], arguments[17], arguments[18], arguments[19], arguments[20], arguments[21]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7928.length)].join(""));;
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = function(this$) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$1 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$1(this$);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__5433__auto__.call(null, this$);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__5433__auto____$1.call(null, this$);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = function(this$, a) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$2 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(this$, a) : m__5433__auto__.call(null, this$, a);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, a) : m__5433__auto____$1.call(null, this$, a);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = function(this$, a, b) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$3 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__5433__auto__.call(null, this$, a, b);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, a, b) : m__5433__auto____$1.call(null, this$, a, b);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = function(this$, a, b, c) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$4 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$4 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__5433__auto__.call(null, this$, a, b, c);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$4(this$, a, b, c) : m__5433__auto____$1.call(null, this$, a, b, c);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = function(this$, a, b, c, d) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$5 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$5 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__5433__auto__.call(null, this$, a, b, c, d);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d) : m__5433__auto____$1.call(null, this$, a, b, c, d);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = function(this$, a, b, c, d, e) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$6 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$6 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__5433__auto__.call(null, this$, a, b, c, d, e);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e) : m__5433__auto____$1.call(null, this$, a, b, c, d, e);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = function(this$, a, b, c, d, e, f) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$7 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$7 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__5433__auto__.call(null, this$, a, b, c, d, e, f);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = function(this$, a, b, c, d, e, f, g) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$8 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$8 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = function(this$, a, b, c, d, e, f, g, h) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$9 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$9 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = function(this$, a, b, c, d, e, f, g, h, i) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$10 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$10 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$11 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$11 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$12 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$12 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$13 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$13 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$14 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$14 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$15 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$15 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$16 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$16 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$17 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$17 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$18 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$18 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$19 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$19 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$20 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$20 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$21 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$21 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  if (!(this$ == null) && !(this$.cljs$core$IFn$_invoke$arity$22 == null)) {
    return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._invoke[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$22 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__5433__auto__.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var m__5433__auto____$1 = cljs.core._invoke["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : m__5433__auto____$1.call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
      } else {
        throw cljs.core.missing_protocol("IFn.-invoke", this$);
      }
    }
  }
};
cljs.core._invoke.cljs$lang$maxFixedArity = 22;
cljs.core.ICloneable = function() {
};
cljs.core._clone = function cljs$core$_clone(value) {
  if (!(value == null) && !(value.cljs$core$ICloneable$_clone$arity$1 == null)) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__5432__auto__ = value == null ? null : value;
    var m__5433__auto__ = cljs.core._clone[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__5433__auto__.call(null, value);
    } else {
      var m__5433__auto____$1 = cljs.core._clone["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__5433__auto____$1.call(null, value);
      } else {
        throw cljs.core.missing_protocol("ICloneable.-clone", value);
      }
    }
  }
};
cljs.core.ICounted = function() {
};
cljs.core._count = function cljs$core$_count(coll) {
  if (!(coll == null) && !(coll.cljs$core$ICounted$_count$arity$1 == null)) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._count[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._count["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ICounted.-count", coll);
      }
    }
  }
};
cljs.core.IEmptyableCollection = function() {
};
cljs.core._empty = function cljs$core$_empty(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._empty[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._empty["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEmptyableCollection.-empty", coll);
      }
    }
  }
};
cljs.core.ICollection = function() {
};
cljs.core._conj = function cljs$core$_conj(coll, o) {
  if (!(coll == null) && !(coll.cljs$core$ICollection$_conj$arity$2 == null)) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._conj[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(coll, o) : m__5433__auto__.call(null, coll, o);
    } else {
      var m__5433__auto____$1 = cljs.core._conj["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, o) : m__5433__auto____$1.call(null, coll, o);
      } else {
        throw cljs.core.missing_protocol("ICollection.-conj", coll);
      }
    }
  }
};
cljs.core.IIndexed = function() {
};
cljs.core._nth = function cljs$core$_nth(var_args) {
  var args7935 = [];
  var len__5835__auto___7938 = arguments.length;
  var i__5836__auto___7939 = 0;
  while (true) {
    if (i__5836__auto___7939 < len__5835__auto___7938) {
      args7935.push(arguments[i__5836__auto___7939]);
      var G__7940 = i__5836__auto___7939 + 1;
      i__5836__auto___7939 = G__7940;
      continue;
    } else {
    }
    break;
  }
  var G__7937 = args7935.length;
  switch(G__7937) {
    case 2:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7935.length)].join(""));;
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$2 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._nth[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(coll, n) : m__5433__auto__.call(null, coll, n);
    } else {
      var m__5433__auto____$1 = cljs.core._nth["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, n) : m__5433__auto____$1.call(null, coll, n);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(coll == null) && !(coll.cljs$core$IIndexed$_nth$arity$3 == null)) {
    return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._nth[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__5433__auto__.call(null, coll, n, not_found);
    } else {
      var m__5433__auto____$1 = cljs.core._nth["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, not_found) : m__5433__auto____$1.call(null, coll, n, not_found);
      } else {
        throw cljs.core.missing_protocol("IIndexed.-nth", coll);
      }
    }
  }
};
cljs.core._nth.cljs$lang$maxFixedArity = 3;
cljs.core.ASeq = function() {
};
cljs.core.ISeq = function() {
};
cljs.core._first = function cljs$core$_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_first$arity$1 == null)) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._first[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._first["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-first", coll);
      }
    }
  }
};
cljs.core._rest = function cljs$core$_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISeq$_rest$arity$1 == null)) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._rest[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._rest["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISeq.-rest", coll);
      }
    }
  }
};
cljs.core.INext = function() {
};
cljs.core._next = function cljs$core$_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$INext$_next$arity$1 == null)) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._next[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._next["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("INext.-next", coll);
      }
    }
  }
};
cljs.core.ILookup = function() {
};
cljs.core._lookup = function cljs$core$_lookup(var_args) {
  var args7942 = [];
  var len__5835__auto___7945 = arguments.length;
  var i__5836__auto___7946 = 0;
  while (true) {
    if (i__5836__auto___7946 < len__5835__auto___7945) {
      args7942.push(arguments[i__5836__auto___7946]);
      var G__7947 = i__5836__auto___7946 + 1;
      i__5836__auto___7946 = G__7947;
      continue;
    } else {
    }
    break;
  }
  var G__7944 = args7942.length;
  switch(G__7944) {
    case 2:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7942.length)].join(""));;
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$2 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$2(o, k);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._lookup[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(o, k) : m__5433__auto__.call(null, o, k);
    } else {
      var m__5433__auto____$1 = cljs.core._lookup["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(o, k) : m__5433__auto____$1.call(null, o, k);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null) && !(o.cljs$core$ILookup$_lookup$arity$3 == null)) {
    return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._lookup[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__5433__auto__.call(null, o, k, not_found);
    } else {
      var m__5433__auto____$1 = cljs.core._lookup["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(o, k, not_found) : m__5433__auto____$1.call(null, o, k, not_found);
      } else {
        throw cljs.core.missing_protocol("ILookup.-lookup", o);
      }
    }
  }
};
cljs.core._lookup.cljs$lang$maxFixedArity = 3;
cljs.core.IAssociative = function() {
};
cljs.core._contains_key_QMARK_ = function cljs$core$_contains_key_QMARK_(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__5433__auto__.call(null, coll, k);
    } else {
      var m__5433__auto____$1 = cljs.core._contains_key_QMARK_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__5433__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-contains-key?", coll);
      }
    }
  }
};
cljs.core._assoc = function cljs$core$_assoc(coll, k, v) {
  if (!(coll == null) && !(coll.cljs$core$IAssociative$_assoc$arity$3 == null)) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._assoc[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__5433__auto__.call(null, coll, k, v);
    } else {
      var m__5433__auto____$1 = cljs.core._assoc["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, v) : m__5433__auto____$1.call(null, coll, k, v);
      } else {
        throw cljs.core.missing_protocol("IAssociative.-assoc", coll);
      }
    }
  }
};
cljs.core.IMap = function() {
};
cljs.core._dissoc = function cljs$core$_dissoc(coll, k) {
  if (!(coll == null) && !(coll.cljs$core$IMap$_dissoc$arity$2 == null)) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._dissoc[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(coll, k) : m__5433__auto__.call(null, coll, k);
    } else {
      var m__5433__auto____$1 = cljs.core._dissoc["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, k) : m__5433__auto____$1.call(null, coll, k);
      } else {
        throw cljs.core.missing_protocol("IMap.-dissoc", coll);
      }
    }
  }
};
cljs.core.IMapEntry = function() {
};
cljs.core._key = function cljs$core$_key(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_key$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._key[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._key["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-key", coll);
      }
    }
  }
};
cljs.core._val = function cljs$core$_val(coll) {
  if (!(coll == null) && !(coll.cljs$core$IMapEntry$_val$arity$1 == null)) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._val[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._val["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IMapEntry.-val", coll);
      }
    }
  }
};
cljs.core.ISet = function() {
};
cljs.core._disjoin = function cljs$core$_disjoin(coll, v) {
  if (!(coll == null) && !(coll.cljs$core$ISet$_disjoin$arity$2 == null)) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._disjoin[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(coll, v) : m__5433__auto__.call(null, coll, v);
    } else {
      var m__5433__auto____$1 = cljs.core._disjoin["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, v) : m__5433__auto____$1.call(null, coll, v);
      } else {
        throw cljs.core.missing_protocol("ISet.-disjoin", coll);
      }
    }
  }
};
cljs.core.IStack = function() {
};
cljs.core._peek = function cljs$core$_peek(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_peek$arity$1 == null)) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._peek[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._peek["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-peek", coll);
      }
    }
  }
};
cljs.core._pop = function cljs$core$_pop(coll) {
  if (!(coll == null) && !(coll.cljs$core$IStack$_pop$arity$1 == null)) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._pop[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._pop["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IStack.-pop", coll);
      }
    }
  }
};
cljs.core.IVector = function() {
};
cljs.core._assoc_n = function cljs$core$_assoc_n(coll, n, val) {
  if (!(coll == null) && !(coll.cljs$core$IVector$_assoc_n$arity$3 == null)) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._assoc_n[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__5433__auto__.call(null, coll, n, val);
    } else {
      var m__5433__auto____$1 = cljs.core._assoc_n["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, n, val) : m__5433__auto____$1.call(null, coll, n, val);
      } else {
        throw cljs.core.missing_protocol("IVector.-assoc-n", coll);
      }
    }
  }
};
cljs.core.IDeref = function() {
};
cljs.core._deref = function cljs$core$_deref(o) {
  if (!(o == null) && !(o.cljs$core$IDeref$_deref$arity$1 == null)) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._deref[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5433__auto__.call(null, o);
    } else {
      var m__5433__auto____$1 = cljs.core._deref["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5433__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IDeref.-deref", o);
      }
    }
  }
};
cljs.core.IDerefWithTimeout = function() {
};
cljs.core._deref_with_timeout = function cljs$core$_deref_with_timeout(o, msec, timeout_val) {
  if (!(o == null) && !(o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__5433__auto__.call(null, o, msec, timeout_val);
    } else {
      var m__5433__auto____$1 = cljs.core._deref_with_timeout["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(o, msec, timeout_val) : m__5433__auto____$1.call(null, o, msec, timeout_val);
      } else {
        throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout", o);
      }
    }
  }
};
cljs.core.IMeta = function() {
};
cljs.core._meta = function cljs$core$_meta(o) {
  if (!(o == null) && !(o.cljs$core$IMeta$_meta$arity$1 == null)) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._meta[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5433__auto__.call(null, o);
    } else {
      var m__5433__auto____$1 = cljs.core._meta["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5433__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IMeta.-meta", o);
      }
    }
  }
};
cljs.core.IWithMeta = function() {
};
cljs.core._with_meta = function cljs$core$_with_meta(o, meta) {
  if (!(o == null) && !(o.cljs$core$IWithMeta$_with_meta$arity$2 == null)) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._with_meta[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(o, meta) : m__5433__auto__.call(null, o, meta);
    } else {
      var m__5433__auto____$1 = cljs.core._with_meta["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(o, meta) : m__5433__auto____$1.call(null, o, meta);
      } else {
        throw cljs.core.missing_protocol("IWithMeta.-with-meta", o);
      }
    }
  }
};
cljs.core.IReduce = function() {
};
cljs.core._reduce = function cljs$core$_reduce(var_args) {
  var args7949 = [];
  var len__5835__auto___7952 = arguments.length;
  var i__5836__auto___7953 = 0;
  while (true) {
    if (i__5836__auto___7953 < len__5835__auto___7952) {
      args7949.push(arguments[i__5836__auto___7953]);
      var G__7954 = i__5836__auto___7953 + 1;
      i__5836__auto___7953 = G__7954;
      continue;
    } else {
    }
    break;
  }
  var G__7951 = args7949.length;
  switch(G__7951) {
    case 2:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7949.length)].join(""));;
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = function(coll, f) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$2 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._reduce[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(coll, f) : m__5433__auto__.call(null, coll, f);
    } else {
      var m__5433__auto____$1 = cljs.core._reduce["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, f) : m__5433__auto____$1.call(null, coll, f);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = function(coll, f, start) {
  if (!(coll == null) && !(coll.cljs$core$IReduce$_reduce$arity$3 == null)) {
    return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._reduce[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__5433__auto__.call(null, coll, f, start);
    } else {
      var m__5433__auto____$1 = cljs.core._reduce["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, start) : m__5433__auto____$1.call(null, coll, f, start);
      } else {
        throw cljs.core.missing_protocol("IReduce.-reduce", coll);
      }
    }
  }
};
cljs.core._reduce.cljs$lang$maxFixedArity = 3;
cljs.core.IKVReduce = function() {
};
cljs.core._kv_reduce = function cljs$core$_kv_reduce(coll, f, init) {
  if (!(coll == null) && !(coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._kv_reduce[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__5433__auto__.call(null, coll, f, init);
    } else {
      var m__5433__auto____$1 = cljs.core._kv_reduce["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, f, init) : m__5433__auto____$1.call(null, coll, f, init);
      } else {
        throw cljs.core.missing_protocol("IKVReduce.-kv-reduce", coll);
      }
    }
  }
};
cljs.core.IEquiv = function() {
};
cljs.core._equiv = function cljs$core$_equiv(o, other) {
  if (!(o == null) && !(o.cljs$core$IEquiv$_equiv$arity$2 == null)) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._equiv[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(o, other) : m__5433__auto__.call(null, o, other);
    } else {
      var m__5433__auto____$1 = cljs.core._equiv["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(o, other) : m__5433__auto____$1.call(null, o, other);
      } else {
        throw cljs.core.missing_protocol("IEquiv.-equiv", o);
      }
    }
  }
};
cljs.core.IHash = function() {
};
cljs.core._hash = function cljs$core$_hash(o) {
  if (!(o == null) && !(o.cljs$core$IHash$_hash$arity$1 == null)) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._hash[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5433__auto__.call(null, o);
    } else {
      var m__5433__auto____$1 = cljs.core._hash["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5433__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("IHash.-hash", o);
      }
    }
  }
};
cljs.core.ISeqable = function() {
};
cljs.core._seq = function cljs$core$_seq(o) {
  if (!(o == null) && !(o.cljs$core$ISeqable$_seq$arity$1 == null)) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._seq[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5433__auto__.call(null, o);
    } else {
      var m__5433__auto____$1 = cljs.core._seq["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5433__auto____$1.call(null, o);
      } else {
        throw cljs.core.missing_protocol("ISeqable.-seq", o);
      }
    }
  }
};
cljs.core.ISequential = function() {
};
cljs.core.IList = function() {
};
cljs.core.IRecord = function() {
};
cljs.core.IReversible = function() {
};
cljs.core._rseq = function cljs$core$_rseq(coll) {
  if (!(coll == null) && !(coll.cljs$core$IReversible$_rseq$arity$1 == null)) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._rseq[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._rseq["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IReversible.-rseq", coll);
      }
    }
  }
};
cljs.core.ISorted = function() {
};
cljs.core._sorted_seq = function cljs$core$_sorted_seq(coll, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._sorted_seq[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__5433__auto__.call(null, coll, ascending_QMARK_);
    } else {
      var m__5433__auto____$1 = cljs.core._sorted_seq["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, ascending_QMARK_) : m__5433__auto____$1.call(null, coll, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq", coll);
      }
    }
  }
};
cljs.core._sorted_seq_from = function cljs$core$_sorted_seq_from(coll, k, ascending_QMARK_) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__5433__auto__.call(null, coll, k, ascending_QMARK_);
    } else {
      var m__5433__auto____$1 = cljs.core._sorted_seq_from["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(coll, k, ascending_QMARK_) : m__5433__auto____$1.call(null, coll, k, ascending_QMARK_);
      } else {
        throw cljs.core.missing_protocol("ISorted.-sorted-seq-from", coll);
      }
    }
  }
};
cljs.core._entry_key = function cljs$core$_entry_key(coll, entry) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_entry_key$arity$2 == null)) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._entry_key[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__5433__auto__.call(null, coll, entry);
    } else {
      var m__5433__auto____$1 = cljs.core._entry_key["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(coll, entry) : m__5433__auto____$1.call(null, coll, entry);
      } else {
        throw cljs.core.missing_protocol("ISorted.-entry-key", coll);
      }
    }
  }
};
cljs.core._comparator = function cljs$core$_comparator(coll) {
  if (!(coll == null) && !(coll.cljs$core$ISorted$_comparator$arity$1 == null)) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._comparator[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._comparator["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("ISorted.-comparator", coll);
      }
    }
  }
};
cljs.core.IWriter = function() {
};
cljs.core._write = function cljs$core$_write(writer, s) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_write$arity$2 == null)) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__5432__auto__ = writer == null ? null : writer;
    var m__5433__auto__ = cljs.core._write[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(writer, s) : m__5433__auto__.call(null, writer, s);
    } else {
      var m__5433__auto____$1 = cljs.core._write["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(writer, s) : m__5433__auto____$1.call(null, writer, s);
      } else {
        throw cljs.core.missing_protocol("IWriter.-write", writer);
      }
    }
  }
};
cljs.core._flush = function cljs$core$_flush(writer) {
  if (!(writer == null) && !(writer.cljs$core$IWriter$_flush$arity$1 == null)) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__5432__auto__ = writer == null ? null : writer;
    var m__5433__auto__ = cljs.core._flush[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__5433__auto__.call(null, writer);
    } else {
      var m__5433__auto____$1 = cljs.core._flush["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__5433__auto____$1.call(null, writer);
      } else {
        throw cljs.core.missing_protocol("IWriter.-flush", writer);
      }
    }
  }
};
cljs.core.IPrintWithWriter = function() {
};
cljs.core._pr_writer = function cljs$core$_pr_writer(o, writer, opts) {
  if (!(o == null) && !(o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._pr_writer[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__5433__auto__.call(null, o, writer, opts);
    } else {
      var m__5433__auto____$1 = cljs.core._pr_writer["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(o, writer, opts) : m__5433__auto____$1.call(null, o, writer, opts);
      } else {
        throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer", o);
      }
    }
  }
};
cljs.core.IPending = function() {
};
cljs.core._realized_QMARK_ = function cljs$core$_realized_QMARK_(d) {
  if (!(d == null) && !(d.cljs$core$IPending$_realized_QMARK_$arity$1 == null)) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__5432__auto__ = d == null ? null : d;
    var m__5433__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(d) : m__5433__auto__.call(null, d);
    } else {
      var m__5433__auto____$1 = cljs.core._realized_QMARK_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(d) : m__5433__auto____$1.call(null, d);
      } else {
        throw cljs.core.missing_protocol("IPending.-realized?", d);
      }
    }
  }
};
cljs.core.IWatchable = function() {
};
cljs.core._notify_watches = function cljs$core$_notify_watches(this$, oldval, newval) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._notify_watches[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__5433__auto__.call(null, this$, oldval, newval);
    } else {
      var m__5433__auto____$1 = cljs.core._notify_watches["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, oldval, newval) : m__5433__auto____$1.call(null, this$, oldval, newval);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-notify-watches", this$);
      }
    }
  }
};
cljs.core._add_watch = function cljs$core$_add_watch(this$, key, f) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_add_watch$arity$3 == null)) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._add_watch[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__5433__auto__.call(null, this$, key, f);
    } else {
      var m__5433__auto____$1 = cljs.core._add_watch["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(this$, key, f) : m__5433__auto____$1.call(null, this$, key, f);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-add-watch", this$);
      }
    }
  }
};
cljs.core._remove_watch = function cljs$core$_remove_watch(this$, key) {
  if (!(this$ == null) && !(this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__5432__auto__ = this$ == null ? null : this$;
    var m__5433__auto__ = cljs.core._remove_watch[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(this$, key) : m__5433__auto__.call(null, this$, key);
    } else {
      var m__5433__auto____$1 = cljs.core._remove_watch["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(this$, key) : m__5433__auto____$1.call(null, this$, key);
      } else {
        throw cljs.core.missing_protocol("IWatchable.-remove-watch", this$);
      }
    }
  }
};
cljs.core.IEditableCollection = function() {
};
cljs.core._as_transient = function cljs$core$_as_transient(coll) {
  if (!(coll == null) && !(coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._as_transient[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._as_transient["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IEditableCollection.-as-transient", coll);
      }
    }
  }
};
cljs.core.ITransientCollection = function() {
};
cljs.core._conj_BANG_ = function cljs$core$_conj_BANG_(tcoll, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__5432__auto__ = tcoll == null ? null : tcoll;
    var m__5433__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__5433__auto__.call(null, tcoll, val);
    } else {
      var m__5433__auto____$1 = cljs.core._conj_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, val) : m__5433__auto____$1.call(null, tcoll, val);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-conj!", tcoll);
      }
    }
  }
};
cljs.core._persistent_BANG_ = function cljs$core$_persistent_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__5432__auto__ = tcoll == null ? null : tcoll;
    var m__5433__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5433__auto__.call(null, tcoll);
    } else {
      var m__5433__auto____$1 = cljs.core._persistent_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5433__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientCollection.-persistent!", tcoll);
      }
    }
  }
};
cljs.core.ITransientAssociative = function() {
};
cljs.core._assoc_BANG_ = function cljs$core$_assoc_BANG_(tcoll, key, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__5432__auto__ = tcoll == null ? null : tcoll;
    var m__5433__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__5433__auto__.call(null, tcoll, key, val);
    } else {
      var m__5433__auto____$1 = cljs.core._assoc_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, key, val) : m__5433__auto____$1.call(null, tcoll, key, val);
      } else {
        throw cljs.core.missing_protocol("ITransientAssociative.-assoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientMap = function() {
};
cljs.core._dissoc_BANG_ = function cljs$core$_dissoc_BANG_(tcoll, key) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__5432__auto__ = tcoll == null ? null : tcoll;
    var m__5433__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__5433__auto__.call(null, tcoll, key);
    } else {
      var m__5433__auto____$1 = cljs.core._dissoc_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, key) : m__5433__auto____$1.call(null, tcoll, key);
      } else {
        throw cljs.core.missing_protocol("ITransientMap.-dissoc!", tcoll);
      }
    }
  }
};
cljs.core.ITransientVector = function() {
};
cljs.core._assoc_n_BANG_ = function cljs$core$_assoc_n_BANG_(tcoll, n, val) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__5432__auto__ = tcoll == null ? null : tcoll;
    var m__5433__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__5433__auto__.call(null, tcoll, n, val);
    } else {
      var m__5433__auto____$1 = cljs.core._assoc_n_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll, n, val) : m__5433__auto____$1.call(null, tcoll, n, val);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-assoc-n!", tcoll);
      }
    }
  }
};
cljs.core._pop_BANG_ = function cljs$core$_pop_BANG_(tcoll) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__5432__auto__ = tcoll == null ? null : tcoll;
    var m__5433__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5433__auto__.call(null, tcoll);
    } else {
      var m__5433__auto____$1 = cljs.core._pop_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5433__auto____$1.call(null, tcoll);
      } else {
        throw cljs.core.missing_protocol("ITransientVector.-pop!", tcoll);
      }
    }
  }
};
cljs.core.ITransientSet = function() {
};
cljs.core._disjoin_BANG_ = function cljs$core$_disjoin_BANG_(tcoll, v) {
  if (!(tcoll == null) && !(tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__5432__auto__ = tcoll == null ? null : tcoll;
    var m__5433__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__5433__auto__.call(null, tcoll, v);
    } else {
      var m__5433__auto____$1 = cljs.core._disjoin_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll, v) : m__5433__auto____$1.call(null, tcoll, v);
      } else {
        throw cljs.core.missing_protocol("ITransientSet.-disjoin!", tcoll);
      }
    }
  }
};
cljs.core.IComparable = function() {
};
cljs.core._compare = function cljs$core$_compare(x, y) {
  if (!(x == null) && !(x.cljs$core$IComparable$_compare$arity$2 == null)) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__5432__auto__ = x == null ? null : x;
    var m__5433__auto__ = cljs.core._compare[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(x, y) : m__5433__auto__.call(null, x, y);
    } else {
      var m__5433__auto____$1 = cljs.core._compare["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(x, y) : m__5433__auto____$1.call(null, x, y);
      } else {
        throw cljs.core.missing_protocol("IComparable.-compare", x);
      }
    }
  }
};
cljs.core.IChunk = function() {
};
cljs.core._drop_first = function cljs$core$_drop_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunk$_drop_first$arity$1 == null)) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._drop_first[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._drop_first["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunk.-drop-first", coll);
      }
    }
  }
};
cljs.core.IChunkedSeq = function() {
};
cljs.core._chunked_first = function cljs$core$_chunked_first(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._chunked_first[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._chunked_first["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first", coll);
      }
    }
  }
};
cljs.core._chunked_rest = function cljs$core$_chunked_rest(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._chunked_rest[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._chunked_rest["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest", coll);
      }
    }
  }
};
cljs.core.IChunkedNext = function() {
};
cljs.core._chunked_next = function cljs$core$_chunked_next(coll) {
  if (!(coll == null) && !(coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._chunked_next[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._chunked_next["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IChunkedNext.-chunked-next", coll);
      }
    }
  }
};
cljs.core.INamed = function() {
};
cljs.core._name = function cljs$core$_name(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_name$arity$1 == null)) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__5432__auto__ = x == null ? null : x;
    var m__5433__auto__ = cljs.core._name[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5433__auto__.call(null, x);
    } else {
      var m__5433__auto____$1 = cljs.core._name["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5433__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-name", x);
      }
    }
  }
};
cljs.core._namespace = function cljs$core$_namespace(x) {
  if (!(x == null) && !(x.cljs$core$INamed$_namespace$arity$1 == null)) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__5432__auto__ = x == null ? null : x;
    var m__5433__auto__ = cljs.core._namespace[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5433__auto__.call(null, x);
    } else {
      var m__5433__auto____$1 = cljs.core._namespace["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5433__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("INamed.-namespace", x);
      }
    }
  }
};
cljs.core.IAtom = function() {
};
cljs.core.IReset = function() {
};
cljs.core._reset_BANG_ = function cljs$core$_reset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IReset$_reset_BANG_$arity$2 == null)) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__5433__auto__.call(null, o, new_value);
    } else {
      var m__5433__auto____$1 = cljs.core._reset_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__5433__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IReset.-reset!", o);
      }
    }
  }
};
cljs.core.ISwap = function() {
};
cljs.core._swap_BANG_ = function cljs$core$_swap_BANG_(var_args) {
  var args7956 = [];
  var len__5835__auto___7959 = arguments.length;
  var i__5836__auto___7960 = 0;
  while (true) {
    if (i__5836__auto___7960 < len__5835__auto___7959) {
      args7956.push(arguments[i__5836__auto___7960]);
      var G__7961 = i__5836__auto___7960 + 1;
      i__5836__auto___7960 = G__7961;
      continue;
    } else {
    }
    break;
  }
  var G__7958 = args7956.length;
  switch(G__7958) {
    case 2:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7956.length)].join(""));;
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(o, f) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(o, f) : m__5433__auto__.call(null, o, f);
    } else {
      var m__5433__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(o, f) : m__5433__auto____$1.call(null, o, f);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(o, f, a) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__5433__auto__.call(null, o, f, a);
    } else {
      var m__5433__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(o, f, a) : m__5433__auto____$1.call(null, o, f, a);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(o, f, a, b) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$4 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__5433__auto__.call(null, o, f, a, b);
    } else {
      var m__5433__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$4(o, f, a, b) : m__5433__auto____$1.call(null, o, f, a, b);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = function(o, f, a, b, xs) {
  if (!(o == null) && !(o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)) {
    return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$5 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__5433__auto__.call(null, o, f, a, b, xs);
    } else {
      var m__5433__auto____$1 = cljs.core._swap_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$5(o, f, a, b, xs) : m__5433__auto____$1.call(null, o, f, a, b, xs);
      } else {
        throw cljs.core.missing_protocol("ISwap.-swap!", o);
      }
    }
  }
};
cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;
cljs.core.IVolatile = function() {
};
cljs.core._vreset_BANG_ = function cljs$core$_vreset_BANG_(o, new_value) {
  if (!(o == null) && !(o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)) {
    return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o, new_value);
  } else {
    var x__5432__auto__ = o == null ? null : o;
    var m__5433__auto__ = cljs.core._vreset_BANG_[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__5433__auto__.call(null, o, new_value);
    } else {
      var m__5433__auto____$1 = cljs.core._vreset_BANG_["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(o, new_value) : m__5433__auto____$1.call(null, o, new_value);
      } else {
        throw cljs.core.missing_protocol("IVolatile.-vreset!", o);
      }
    }
  }
};
cljs.core.IIterable = function() {
};
cljs.core._iterator = function cljs$core$_iterator(coll) {
  if (!(coll == null) && !(coll.cljs$core$IIterable$_iterator$arity$1 == null)) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__5432__auto__ = coll == null ? null : coll;
    var m__5433__auto__ = cljs.core._iterator[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto__.call(null, coll);
    } else {
      var m__5433__auto____$1 = cljs.core._iterator["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5433__auto____$1.call(null, coll);
      } else {
        throw cljs.core.missing_protocol("IIterable.-iterator", coll);
      }
    }
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.StringBufferWriter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null);
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.__GT_StringBufferWriter = function cljs$core$__GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function cljs$core$pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, cljs.core.pr_opts());
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return [cljs.core.str(sb)].join("");
};
cljs.core.int_rotate_left = function cljs$core$int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul(4294967295, 5) === 0)) {
  cljs.core.imul = function cljs$core$imul(a, b) {
    return Math.imul(a, b);
  };
} else {
  cljs.core.imul = function cljs$core$imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353 | 0;
cljs.core.m3_C2 = 461845907 | 0;
cljs.core.m3_mix_K1 = function cljs$core$m3_mix_K1(k1) {
  return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul(k1 | 0, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function cljs$core$m3_mix_H1(h1, k1) {
  return cljs.core.imul(cljs.core.int_rotate_left((h1 | 0) ^ (k1 | 0), 13), 5) + (3864292196 | 0) | 0;
};
cljs.core.m3_fmix = function cljs$core$m3_fmix(h1, len) {
  var h1__$1 = h1 | 0;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul(h1__$3, 2246822507 | 0);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul(h1__$5, 3266489909 | 0);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function cljs$core$m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1(in$);
    var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix(h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function cljs$core$m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__7963 = i + 2;
        var G__7964 = cljs.core.m3_mix_H1(h1, cljs.core.m3_mix_K1(in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__7963;
        h1 = G__7964;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix(h1__$1, cljs.core.imul(2, in$.length));
};
cljs.core.list;
cljs.core.Symbol;
cljs.core._EQ_;
cljs.core.compare;
cljs.core.string_hash_cache = {};
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function cljs$core$hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__7967 = i + 1;
          var G__7968 = cljs.core.imul(31, hash) + s.charCodeAt(i);
          i = G__7967;
          hash = G__7968;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function cljs$core$add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_(k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function cljs$core$hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = {};
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache(k);
  }
};
cljs.core.hash = function cljs$core$hash(o) {
  if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 4194304 || o.cljs$core$IHash$ ? true : false : false) {
    return o.cljs$core$IHash$_hash$arity$1(null);
  } else {
    if (typeof o === "number") {
      return Math.floor(o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int(cljs.core.hash_string(o));
          } else {
            if (o instanceof Date) {
              return o.valueOf();
            } else {
              if (o == null) {
                return 0;
              } else {
                return cljs.core._hash(o);
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function cljs$core$hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function cljs$core$instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function cljs$core$symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function cljs$core$hash_symbol(sym) {
  return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name), cljs.core.hash_string(sym.ns));
};
cljs.core.compare_symbols = function cljs$core$compare_symbols(a, b) {
  if (a.str === b.str) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4765__auto__ = cljs.core.not(a.ns);
      if (and__4765__auto__) {
        return b.ns;
      } else {
        return and__4765__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__7981 = a.ns;
            var G__7982 = b.ns;
            return goog.array.defaultCompare(G__7981, G__7982);
          }();
          if (0 === nsc) {
            var G__7983 = a.name;
            var G__7984 = b.name;
            return goog.array.defaultCompare(G__7983, G__7984);
          } else {
            return nsc;
          }
        }
      } else {
        var G__7985 = a.name;
        var G__7986 = b.name;
        return goog.array.defaultCompare(G__7985, G__7986);
      }
    }
  }
};
cljs.core.get;
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.call = function() {
  var G__7988 = null;
  var G__7988__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
  };
  var G__7988__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
  };
  G__7988 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7988__2.call(this, self__, coll);
      case 3:
        return G__7988__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7988.cljs$core$IFn$_invoke$arity$2 = G__7988__2;
  G__7988.cljs$core$IFn$_invoke$arity$3 = G__7988__3;
  return G__7988;
}();
cljs.core.Symbol.prototype.apply = function(self__, args7987) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7987)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, sym) : cljs.core.get.call(null, coll, sym);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, sym, not_found) : cljs.core.get.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__5212__auto__ = self__._hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_symbol(sym__$1);
    self__._hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, self__.str);
};
cljs.core.Symbol.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns, cljs.core.cst$sym$name, cljs.core.cst$sym$str, cljs.core.with_meta(cljs.core.cst$sym$_hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.cst$sym$_meta], null);
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Symbol");
};
cljs.core.__GT_Symbol = function cljs$core$__GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function cljs$core$symbol(var_args) {
  var args7989 = [];
  var len__5835__auto___7992 = arguments.length;
  var i__5836__auto___7993 = 0;
  while (true) {
    if (i__5836__auto___7993 < len__5835__auto___7992) {
      args7989.push(arguments[i__5836__auto___7993]);
      var G__7994 = i__5836__auto___7993 + 1;
      i__5836__auto___7993 = G__7994;
      continue;
    } else {
    }
    break;
  }
  var G__7991 = args7989.length;
  switch(G__7991) {
    case 1:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7989.length)].join(""));;
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Symbol) {
    return name;
  } else {
    var idx = name.indexOf("/");
    if (idx === -1) {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null, name);
    } else {
      return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring(0, idx), name.substring(idx + 1, name.length));
    }
  }
};
cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  var sym_str = !(ns == null) ? [cljs.core.str(ns), cljs.core.str("/"), cljs.core.str(name)].join("") : name;
  return new cljs.core.Symbol(ns, name, sym_str, null, null);
};
cljs.core.symbol.cljs$lang$maxFixedArity = 2;
cljs.core.Var = function(val, sym, _meta) {
  this.val = val;
  this.sym = sym;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2523137;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Var.prototype.isMacro = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
};
cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
};
cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Var(self__.val, self__.sym, new_meta);
};
cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  if (other instanceof cljs.core.Var) {
    var G__7997 = this$__$1.sym;
    var G__7998 = other.sym;
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__7997, G__7998) : cljs.core._EQ_.call(null, G__7997, G__7998);
  } else {
    return false;
  }
};
cljs.core.Var.prototype.cljs$core$Fn$ = true;
cljs.core.Var.prototype.call = function() {
  var G__8043 = null;
  var G__8043__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
  };
  var G__8043__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
  };
  var G__8043__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
  };
  var G__8043__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
  };
  var G__8043__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
  };
  var G__8043__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
  };
  var G__8043__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
  };
  var G__8043__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
  };
  var G__8043__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
  };
  var G__8043__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__8043__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__8043__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__8043__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__8043__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__8043__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__8043__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__8043__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__8043__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__8043__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__8043__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__8043__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__8043__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    var G__7999 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
    var G__8000 = a;
    var G__8001 = b;
    var G__8002 = c;
    var G__8003 = d;
    var G__8004 = e;
    var G__8005 = f;
    var G__8006 = g;
    var G__8007 = h;
    var G__8008 = i;
    var G__8009 = j;
    var G__8010 = k;
    var G__8011 = l;
    var G__8012 = m;
    var G__8013 = n;
    var G__8014 = o;
    var G__8015 = p;
    var G__8016 = q;
    var G__8017 = r;
    var G__8018 = s;
    var G__8019 = t;
    var G__8020 = rest;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__7999, G__8000, G__8001, G__8002, G__8003, G__8004, G__8005, G__8006, G__8007, G__8008, G__8009, G__8010, G__8011, G__8012, G__8013, G__8014, G__8015, G__8016, G__8017, G__8018, G__8019, G__8020) : cljs.core.apply.call(null, G__7999, G__8000, G__8001, G__8002, G__8003, G__8004, G__8005, G__8006, G__8007, G__8008, G__8009, G__8010, G__8011, G__8012, G__8013, G__8014, G__8015, G__8016, G__8017, 
    G__8018, G__8019, G__8020);
  };
  G__8043 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__8043__1.call(this, self__);
      case 2:
        return G__8043__2.call(this, self__, a);
      case 3:
        return G__8043__3.call(this, self__, a, b);
      case 4:
        return G__8043__4.call(this, self__, a, b, c);
      case 5:
        return G__8043__5.call(this, self__, a, b, c, d);
      case 6:
        return G__8043__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__8043__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__8043__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__8043__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__8043__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__8043__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__8043__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__8043__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__8043__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__8043__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__8043__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__8043__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__8043__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__8043__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__8043__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__8043__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__8043__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8043.cljs$core$IFn$_invoke$arity$1 = G__8043__1;
  G__8043.cljs$core$IFn$_invoke$arity$2 = G__8043__2;
  G__8043.cljs$core$IFn$_invoke$arity$3 = G__8043__3;
  G__8043.cljs$core$IFn$_invoke$arity$4 = G__8043__4;
  G__8043.cljs$core$IFn$_invoke$arity$5 = G__8043__5;
  G__8043.cljs$core$IFn$_invoke$arity$6 = G__8043__6;
  G__8043.cljs$core$IFn$_invoke$arity$7 = G__8043__7;
  G__8043.cljs$core$IFn$_invoke$arity$8 = G__8043__8;
  G__8043.cljs$core$IFn$_invoke$arity$9 = G__8043__9;
  G__8043.cljs$core$IFn$_invoke$arity$10 = G__8043__10;
  G__8043.cljs$core$IFn$_invoke$arity$11 = G__8043__11;
  G__8043.cljs$core$IFn$_invoke$arity$12 = G__8043__12;
  G__8043.cljs$core$IFn$_invoke$arity$13 = G__8043__13;
  G__8043.cljs$core$IFn$_invoke$arity$14 = G__8043__14;
  G__8043.cljs$core$IFn$_invoke$arity$15 = G__8043__15;
  G__8043.cljs$core$IFn$_invoke$arity$16 = G__8043__16;
  G__8043.cljs$core$IFn$_invoke$arity$17 = G__8043__17;
  G__8043.cljs$core$IFn$_invoke$arity$18 = G__8043__18;
  G__8043.cljs$core$IFn$_invoke$arity$19 = G__8043__19;
  G__8043.cljs$core$IFn$_invoke$arity$20 = G__8043__20;
  G__8043.cljs$core$IFn$_invoke$arity$21 = G__8043__21;
  G__8043.cljs$core$IFn$_invoke$arity$22 = G__8043__22;
  return G__8043;
}();
cljs.core.Var.prototype.apply = function(self__, args7996) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args7996)));
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  var G__8021 = self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null);
  var G__8022 = a;
  var G__8023 = b;
  var G__8024 = c;
  var G__8025 = d;
  var G__8026 = e;
  var G__8027 = f;
  var G__8028 = g;
  var G__8029 = h;
  var G__8030 = i;
  var G__8031 = j;
  var G__8032 = k;
  var G__8033 = l;
  var G__8034 = m;
  var G__8035 = n;
  var G__8036 = o;
  var G__8037 = p;
  var G__8038 = q;
  var G__8039 = r;
  var G__8040 = s;
  var G__8041 = t;
  var G__8042 = rest;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__8021, G__8022, G__8023, G__8024, G__8025, G__8026, G__8027, G__8028, G__8029, G__8030, G__8031, G__8032, G__8033, G__8034, G__8035, G__8036, G__8037, G__8038, G__8039, G__8040, G__8041, G__8042) : cljs.core.apply.call(null, G__8021, G__8022, G__8023, G__8024, G__8025, G__8026, G__8027, G__8028, G__8029, G__8030, G__8031, G__8032, G__8033, G__8034, G__8035, G__8036, G__8037, G__8038, G__8039, 
  G__8040, G__8041, G__8042);
};
cljs.core.Var.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val, cljs.core.cst$sym$sym, cljs.core.cst$sym$_meta], null);
};
cljs.core.Var.cljs$lang$type = true;
cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";
cljs.core.Var.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Var");
};
cljs.core.__GT_Var = function cljs$core$__GT_Var(val, sym, _meta) {
  return new cljs.core.Var(val, sym, _meta);
};
cljs.core.var_QMARK_ = function cljs$core$var_QMARK_(v) {
  return v instanceof cljs.core.Var;
};
cljs.core.array_seq;
cljs.core.prim_seq;
cljs.core.IndexedSeq;
cljs.core.iterable_QMARK_ = function cljs$core$iterable_QMARK_(x) {
  if (!(x == null)) {
    if (false || x.cljs$core$IIterable$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable, x);
  }
};
cljs.core.clone = function cljs$core$clone(value) {
  return cljs.core._clone(value);
};
cljs.core.cloneable_QMARK_ = function cljs$core$cloneable_QMARK_(value) {
  if (!(value == null)) {
    if (value.cljs$lang$protocol_mask$partition1$ & 8192 || value.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!value.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable, value);
  }
};
cljs.core.seq = function cljs$core$seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
      return coll.cljs$core$ISeqable$_seq$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, coll)) {
            return cljs.core._seq(coll);
          } else {
            throw new Error([cljs.core.str(coll), cljs.core.str(" is not ISeqable")].join(""));
          }
        }
      }
    }
  }
};
cljs.core.first = function cljs$core$first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_first$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first(s);
      }
    }
  }
};
cljs.core.rest = function cljs$core$rest(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
      return coll.cljs$core$ISeq$_rest$arity$1(null);
    } else {
      var s = cljs.core.seq(coll);
      if (s) {
        return cljs.core._rest(s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function cljs$core$next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 128 || coll.cljs$core$INext$ ? true : false : false) {
      return coll.cljs$core$INext$_next$arity$1(null);
    } else {
      return cljs.core.seq(cljs.core.rest(coll));
    }
  }
};
cljs.core._EQ_ = function cljs$core$_EQ_(var_args) {
  var args8056 = [];
  var len__5835__auto___8062 = arguments.length;
  var i__5836__auto___8063 = 0;
  while (true) {
    if (i__5836__auto___8063 < len__5835__auto___8062) {
      args8056.push(arguments[i__5836__auto___8063]);
      var G__8064 = i__5836__auto___8063 + 1;
      i__5836__auto___8063 = G__8064;
      continue;
    } else {
    }
    break;
  }
  var G__8061 = args8056.length;
  switch(G__8061) {
    case 1:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8056.slice(2), 0);
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  if (x == null) {
    return y == null;
  } else {
    return x === y || cljs.core._equiv(x, y);
  }
};
cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
      if (cljs.core.next(more)) {
        var G__8066 = y;
        var G__8067 = cljs.core.first(more);
        var G__8068 = cljs.core.next(more);
        x = G__8066;
        y = G__8067;
        more = G__8068;
        continue;
      } else {
        return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y, cljs.core.first(more));
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ_.cljs$lang$applyTo = function(seq8057) {
  var G__8058 = cljs.core.first(seq8057);
  var seq8057__$1 = cljs.core.next(seq8057);
  var G__8059 = cljs.core.first(seq8057__$1);
  var seq8057__$2 = cljs.core.next(seq8057__$1);
  return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8058, G__8059, seq8057__$2);
};
cljs.core._EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.ES6Iterator = function(s) {
  this.s = s;
};
cljs.core.ES6Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":x, "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6Iterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ES6Iterator.cljs$lang$type = true;
cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";
cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ES6Iterator");
};
cljs.core.__GT_ES6Iterator = function cljs$core$__GT_ES6Iterator(s) {
  return new cljs.core.ES6Iterator(s);
};
cljs.core.es6_iterator = function cljs$core$es6_iterator(coll) {
  return new cljs.core.ES6Iterator(cljs.core.seq(coll));
};
cljs.core.es6_iterator_seq;
cljs.core.ES6IteratorSeq = function(value, iter, _rest) {
  this.value = value;
  this.iter = iter;
  this._rest = _rest;
  this.cljs$lang$protocol_mask$partition0$ = 8388672;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.value;
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__._rest == null) {
    self__._rest = cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null, self__.iter);
  } else {
  }
  return self__._rest;
};
cljs.core.ES6IteratorSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value, cljs.core.cst$sym$iter, cljs.core.with_meta(cljs.core.cst$sym$_rest, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ES6IteratorSeq.cljs$lang$type = true;
cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";
cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ES6IteratorSeq");
};
cljs.core.__GT_ES6IteratorSeq = function cljs$core$__GT_ES6IteratorSeq(value, iter, _rest) {
  return new cljs.core.ES6IteratorSeq(value, iter, _rest);
};
cljs.core.es6_iterator_seq = function cljs$core$es6_iterator_seq(iter) {
  var v = iter.next();
  if (cljs.core.truth_(v.done)) {
    return cljs.core.List.EMPTY;
  } else {
    return new cljs.core.ES6IteratorSeq(v.value, iter, null);
  }
};
cljs.core.mix_collection_hash = function cljs$core$mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1(hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1(h1, k1);
  return cljs.core.m3_fmix(h1__$1, count);
};
cljs.core.hash_ordered_coll = function cljs$core$hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__8069 = n + 1;
      var G__8070 = cljs.core.imul(31, hash_code) + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__8071 = cljs.core.next(coll__$1);
      n = G__8069;
      hash_code = G__8070;
      coll__$1 = G__8071;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash(1, 0);
cljs.core.hash_unordered_coll = function cljs$core$hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__8072 = n + 1;
      var G__8073 = hash_code + cljs.core.hash(cljs.core.first(coll__$1)) | 0;
      var G__8074 = cljs.core.next(coll__$1);
      n = G__8072;
      hash_code = G__8073;
      coll__$1 = G__8074;
      continue;
    } else {
      return cljs.core.mix_collection_hash(hash_code, n);
    }
    break;
  }
};
cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash(0, 0);
cljs.core.hash_map;
cljs.core.list;
cljs.core.equiv_sequential;
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.valueOf() === other.valueOf();
};
Date.prototype.cljs$core$IComparable$ = true;
Date.prototype.cljs$core$IComparable$_compare$arity$2 = function(this$, other) {
  var this$__$1 = this;
  if (other instanceof Date) {
    var G__8075 = this$__$1.valueOf();
    var G__8076 = other.valueOf();
    return goog.array.defaultCompare(G__8075, G__8076);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(this$__$1), cljs.core.str(" to "), cljs.core.str(other)].join(""));
  }
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.with_meta;
cljs.core.Fn["function"] = true;
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function cljs$core$inc(x) {
  return x + 1;
};
cljs.core.deref;
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.Reduced.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null);
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Reduced");
};
cljs.core.__GT_Reduced = function cljs$core$__GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function cljs$core$reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function cljs$core$reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.ensure_reduced = function cljs$core$ensure_reduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return x;
  } else {
    return cljs.core.reduced(x);
  }
};
cljs.core.unreduced = function cljs$core$unreduced(x) {
  if (cljs.core.reduced_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.deref = function cljs$core$deref(o) {
  return cljs.core._deref(o);
};
cljs.core.ci_reduce = function cljs$core$ci_reduce(var_args) {
  var args8077 = [];
  var len__5835__auto___8086 = arguments.length;
  var i__5836__auto___8087 = 0;
  while (true) {
    if (i__5836__auto___8087 < len__5835__auto___8086) {
      args8077.push(arguments[i__5836__auto___8087]);
      var G__8088 = i__5836__auto___8087 + 1;
      i__5836__auto___8087 = G__8088;
      continue;
    } else {
    }
    break;
  }
  var G__8079 = args8077.length;
  switch(G__8079) {
    case 2:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8077.length)].join(""));;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = function(cicoll, f) {
  var cnt = cljs.core._count(cicoll);
  if (cnt === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, 0);
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__8080 = val;
          var G__8081 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8080, G__8081) : f.call(null, G__8080, G__8081);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__8090 = nval;
          var G__8091 = n + 1;
          val = G__8090;
          n = G__8091;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = function(cicoll, f, val) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8082 = val__$1;
        var G__8083 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8082, G__8083) : f.call(null, G__8082, G__8083);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8092 = nval;
        var G__8093 = n + 1;
        val__$1 = G__8092;
        n = G__8093;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = function(cicoll, f, val, idx) {
  var cnt = cljs.core._count(cicoll);
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8084 = val__$1;
        var G__8085 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll, n);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8084, G__8085) : f.call(null, G__8084, G__8085);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8094 = nval;
        var G__8095 = n + 1;
        val__$1 = G__8094;
        n = G__8095;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.array_reduce = function cljs$core$array_reduce(var_args) {
  var args8096 = [];
  var len__5835__auto___8105 = arguments.length;
  var i__5836__auto___8106 = 0;
  while (true) {
    if (i__5836__auto___8106 < len__5835__auto___8105) {
      args8096.push(arguments[i__5836__auto___8106]);
      var G__8107 = i__5836__auto___8106 + 1;
      i__5836__auto___8106 = G__8107;
      continue;
    } else {
    }
    break;
  }
  var G__8098 = args8096.length;
  switch(G__8098) {
    case 2:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8096.length)].join(""));;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = function(arr, f) {
  var cnt = arr.length;
  if (arr.length === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var val = arr[0];
    var n = 1;
    while (true) {
      if (n < cnt) {
        var nval = function() {
          var G__8099 = val;
          var G__8100 = arr[n];
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8099, G__8100) : f.call(null, G__8099, G__8100);
        }();
        if (cljs.core.reduced_QMARK_(nval)) {
          return cljs.core.deref(nval);
        } else {
          var G__8109 = nval;
          var G__8110 = n + 1;
          val = G__8109;
          n = G__8110;
          continue;
        }
      } else {
        return val;
      }
      break;
    }
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = function(arr, f, val) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = 0;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8101 = val__$1;
        var G__8102 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8101, G__8102) : f.call(null, G__8101, G__8102);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8111 = nval;
        var G__8112 = n + 1;
        val__$1 = G__8111;
        n = G__8112;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = function(arr, f, val, idx) {
  var cnt = arr.length;
  var val__$1 = val;
  var n = idx;
  while (true) {
    if (n < cnt) {
      var nval = function() {
        var G__8103 = val__$1;
        var G__8104 = arr[n];
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8103, G__8104) : f.call(null, G__8103, G__8104);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8113 = nval;
        var G__8114 = n + 1;
        val__$1 = G__8113;
        n = G__8114;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;
cljs.core.hash_coll;
cljs.core.cons;
cljs.core.RSeq;
cljs.core.List;
cljs.core.counted_QMARK_ = function cljs$core$counted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 2 || x.cljs$core$ICounted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted, x);
  }
};
cljs.core.indexed_QMARK_ = function cljs$core$indexed_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16 || x.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, x);
  }
};
cljs.core.IndexedSeqIterator = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.IndexedSeqIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.IndexedSeqIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.IndexedSeqIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr, cljs.core.with_meta(cljs.core.cst$sym$i, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.IndexedSeqIterator.cljs$lang$type = true;
cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";
cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/IndexedSeqIterator");
};
cljs.core.__GT_IndexedSeqIterator = function cljs$core$__GT_IndexedSeqIterator(arr, i) {
  return new cljs.core.IndexedSeqIterator(arr, i);
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.IndexedSeqIterator(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  var x__5108__auto__ = 0;
  var y__5109__auto__ = self__.arr.length - self__.i;
  return x__5108__auto__ > y__5109__auto__ ? x__5108__auto__ : y__5109__auto__;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count(coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.i < self__.arr.length) {
    return this$__$1;
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.IndexedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr, cljs.core.cst$sym$i], null);
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/IndexedSeq");
};
cljs.core.__GT_IndexedSeq = function cljs$core$__GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.prim_seq = function cljs$core$prim_seq(var_args) {
  var args8119 = [];
  var len__5835__auto___8122 = arguments.length;
  var i__5836__auto___8123 = 0;
  while (true) {
    if (i__5836__auto___8123 < len__5835__auto___8122) {
      args8119.push(arguments[i__5836__auto___8123]);
      var G__8124 = i__5836__auto___8123 + 1;
      i__5836__auto___8123 = G__8124;
      continue;
    } else {
    }
    break;
  }
  var G__8121 = args8119.length;
  switch(G__8121) {
    case 1:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8119.length)].join(""));;
  }
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = function(prim) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim, 0);
};
cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = function(prim, i) {
  if (i < prim.length) {
    return new cljs.core.IndexedSeq(prim, i);
  } else {
    return null;
  }
};
cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;
cljs.core.array_seq = function cljs$core$array_seq(var_args) {
  var args8126 = [];
  var len__5835__auto___8129 = arguments.length;
  var i__5836__auto___8130 = 0;
  while (true) {
    if (i__5836__auto___8130 < len__5835__auto___8129) {
      args8126.push(arguments[i__5836__auto___8130]);
      var G__8131 = i__5836__auto___8130 + 1;
      i__5836__auto___8130 = G__8131;
      continue;
    } else {
    }
    break;
  }
  var G__8128 = args8126.length;
  switch(G__8128) {
    case 1:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8126.length)].join(""));;
  }
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = function(array) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, 0);
};
cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = function(array, i) {
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array, i);
};
cljs.core.array_seq.cljs$lang$maxFixedArity = 2;
cljs.core.with_meta;
cljs.core.seq_reduce;
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1, other) : cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__8133 = cljs.core.List.EMPTY;
  var G__8134 = self__.meta;
  return cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__8133, G__8134) : cljs.core.with_meta.call(null, G__8133, G__8134);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, col__$1) : cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, col__$1) : cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o, coll__$1) : cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.RSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci, cljs.core.cst$sym$i, cljs.core.cst$sym$meta], null);
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/RSeq");
};
cljs.core.__GT_RSeq = function cljs$core$__GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.second = function cljs$core$second(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.ffirst = function cljs$core$ffirst(coll) {
  return cljs.core.first(cljs.core.first(coll));
};
cljs.core.nfirst = function cljs$core$nfirst(coll) {
  return cljs.core.next(cljs.core.first(coll));
};
cljs.core.fnext = function cljs$core$fnext(coll) {
  return cljs.core.first(cljs.core.next(coll));
};
cljs.core.nnext = function cljs$core$nnext(coll) {
  return cljs.core.next(cljs.core.next(coll));
};
cljs.core.last = function cljs$core$last(s) {
  while (true) {
    var sn = cljs.core.next(s);
    if (!(sn == null)) {
      var G__8135 = sn;
      s = G__8135;
      continue;
    } else {
      return cljs.core.first(s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function cljs$core$conj(var_args) {
  var args8136 = [];
  var len__5835__auto___8142 = arguments.length;
  var i__5836__auto___8143 = 0;
  while (true) {
    if (i__5836__auto___8143 < len__5835__auto___8142) {
      args8136.push(arguments[i__5836__auto___8143]);
      var G__8144 = i__5836__auto___8143 + 1;
      i__5836__auto___8143 = G__8144;
      continue;
    } else {
    }
    break;
  }
  var G__8141 = args8136.length;
  switch(G__8141) {
    case 0:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8136.slice(2), 0);
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = function(coll, x) {
  if (!(coll == null)) {
    return cljs.core._conj(coll, x);
  } else {
    return cljs.core._conj(cljs.core.List.EMPTY, x);
  }
};
cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = function(coll, x, xs) {
  while (true) {
    if (cljs.core.truth_(xs)) {
      var G__8146 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
      var G__8147 = cljs.core.first(xs);
      var G__8148 = cljs.core.next(xs);
      coll = G__8146;
      x = G__8147;
      xs = G__8148;
      continue;
    } else {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll, x);
    }
    break;
  }
};
cljs.core.conj.cljs$lang$applyTo = function(seq8137) {
  var G__8138 = cljs.core.first(seq8137);
  var seq8137__$1 = cljs.core.next(seq8137);
  var G__8139 = cljs.core.first(seq8137__$1);
  var seq8137__$2 = cljs.core.next(seq8137__$1);
  return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__8138, G__8139, seq8137__$2);
};
cljs.core.conj.cljs$lang$maxFixedArity = 2;
cljs.core.empty = function cljs$core$empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty(coll);
  }
};
cljs.core.accumulating_seq_count = function cljs$core$accumulating_seq_count(coll) {
  var s = cljs.core.seq(coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_(s)) {
      return acc + cljs.core._count(s);
    } else {
      var G__8149 = cljs.core.next(s);
      var G__8150 = acc + 1;
      s = G__8149;
      acc = G__8150;
      continue;
    }
    break;
  }
};
cljs.core.count = function cljs$core$count(coll) {
  if (!(coll == null)) {
    if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 2 || coll.cljs$core$ICounted$ ? true : false : false) {
      return coll.cljs$core$ICounted$_count$arity$1(null);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 8388608 || coll.cljs$core$ISeqable$ ? true : false : false) {
            return cljs.core.accumulating_seq_count(coll);
          } else {
            return cljs.core._count(coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function cljs$core$linear_traversal_nth(var_args) {
  var args8155 = [];
  var len__5835__auto___8158 = arguments.length;
  var i__5836__auto___8159 = 0;
  while (true) {
    if (i__5836__auto___8159 < len__5835__auto___8158) {
      args8155.push(arguments[i__5836__auto___8159]);
      var G__8160 = i__5836__auto___8159 + 1;
      i__5836__auto___8159 = G__8160;
      continue;
    } else {
    }
    break;
  }
  var G__8157 = args8155.length;
  switch(G__8157) {
    case 2:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8155.length)].join(""));;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  while (true) {
    if (coll == null) {
      throw new Error("Index out of bounds");
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          throw new Error("Index out of bounds");
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
        } else {
          if (cljs.core.seq(coll)) {
            var G__8162 = cljs.core.next(coll);
            var G__8163 = n - 1;
            coll = G__8162;
            n = G__8163;
            continue;
          } else {
            throw new Error("Index out of bounds");
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  while (true) {
    if (coll == null) {
      return not_found;
    } else {
      if (n === 0) {
        if (cljs.core.seq(coll)) {
          return cljs.core.first(coll);
        } else {
          return not_found;
        }
      } else {
        if (cljs.core.indexed_QMARK_(coll)) {
          return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
        } else {
          if (cljs.core.seq(coll)) {
            var G__8164 = cljs.core.next(coll);
            var G__8165 = n - 1;
            var G__8166 = not_found;
            coll = G__8164;
            n = G__8165;
            not_found = G__8166;
            continue;
          } else {
            return not_found;
          }
        }
      }
    }
    break;
  }
};
cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;
cljs.core.nth = function cljs$core$nth(var_args) {
  var args8167 = [];
  var len__5835__auto___8174 = arguments.length;
  var i__5836__auto___8175 = 0;
  while (true) {
    if (i__5836__auto___8175 < len__5835__auto___8174) {
      args8167.push(arguments[i__5836__auto___8175]);
      var G__8176 = i__5836__auto___8175 + 1;
      i__5836__auto___8175 = G__8176;
      continue;
    } else {
    }
    break;
  }
  var G__8169 = args8167.length;
  switch(G__8169) {
    case 2:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.nth.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8167.length)].join(""));;
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = function(coll, n) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number");
  } else {
    if (coll == null) {
      return coll;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$2(null, n);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return null;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return null;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll, n);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = function(coll, n, not_found) {
  if (!(typeof n === "number")) {
    throw new Error("index argument to nth must be a number.");
  } else {
    if (coll == null) {
      return not_found;
    } else {
      if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 16 || coll.cljs$core$IIndexed$ ? true : false : false) {
        return coll.cljs$core$IIndexed$_nth$arity$3(null, n, not_found);
      } else {
        if (cljs.core.array_QMARK_(coll)) {
          if (n < coll.length) {
            return coll[n];
          } else {
            return not_found;
          }
        } else {
          if (typeof coll === "string") {
            if (n < coll.length) {
              return coll.charAt(n);
            } else {
              return not_found;
            }
          } else {
            if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$ ? true : false : false) {
              return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll, n, not_found);
            } else {
              if (cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed, coll)) {
                return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll, n);
              } else {
                throw new Error([cljs.core.str("nth not supported on this type "), cljs.core.str(cljs.core.type__GT_str(cljs.core.type(coll)))].join(""));
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.nth.cljs$lang$maxFixedArity = 3;
cljs.core.nthrest = function cljs$core$nthrest(coll, n) {
  var n__$1 = n;
  var xs = coll;
  while (true) {
    if (n__$1 > 0 && cljs.core.seq(xs)) {
      var G__8178 = n__$1 - 1;
      var G__8179 = cljs.core.rest(xs);
      n__$1 = G__8178;
      xs = G__8179;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.get = function cljs$core$get(var_args) {
  var args8180 = [];
  var len__5835__auto___8185 = arguments.length;
  var i__5836__auto___8186 = 0;
  while (true) {
    if (i__5836__auto___8186 < len__5835__auto___8185) {
      args8180.push(arguments[i__5836__auto___8186]);
      var G__8187 = i__5836__auto___8186 + 1;
      i__5836__auto___8186 = G__8187;
      continue;
    } else {
    }
    break;
  }
  var G__8182 = args8180.length;
  switch(G__8182) {
    case 2:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8180.length)].join(""));;
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$2 = function(o, k) {
  if (o == null) {
    return null;
  } else {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$2(null, k);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k | 0];
        } else {
          return null;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k | 0];
          } else {
            return null;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o, k);
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.core.get.cljs$core$IFn$_invoke$arity$3 = function(o, k, not_found) {
  if (!(o == null)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 256 || o.cljs$core$ILookup$ ? true : false : false) {
      return o.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
    } else {
      if (cljs.core.array_QMARK_(o)) {
        if (k < o.length) {
          return o[k];
        } else {
          return not_found;
        }
      } else {
        if (typeof o === "string") {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, o)) {
            return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o, k, not_found);
          } else {
            return not_found;
          }
        }
      }
    }
  } else {
    return not_found;
  }
};
cljs.core.get.cljs$lang$maxFixedArity = 3;
cljs.core.PersistentHashMap;
cljs.core.assoc = function cljs$core$assoc(var_args) {
  var args8189 = [];
  var len__5835__auto___8196 = arguments.length;
  var i__5836__auto___8197 = 0;
  while (true) {
    if (i__5836__auto___8197 < len__5835__auto___8196) {
      args8189.push(arguments[i__5836__auto___8197]);
      var G__8198 = i__5836__auto___8197 + 1;
      i__5836__auto___8197 = G__8198;
      continue;
    } else {
    }
    break;
  }
  var G__8195 = args8189.length;
  switch(G__8195) {
    case 3:
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8189.slice(3), 0);
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5854__auto__);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = function(coll, k, v) {
  if (!(coll == null)) {
    return cljs.core._assoc(coll, k, v);
  } else {
    return cljs.core.PersistentHashMap.fromArrays([k], [v]);
  }
};
cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, v, kvs) {
  while (true) {
    var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll, k, v);
    if (cljs.core.truth_(kvs)) {
      var G__8200 = ret;
      var G__8201 = cljs.core.first(kvs);
      var G__8202 = cljs.core.second(kvs);
      var G__8203 = cljs.core.nnext(kvs);
      coll = G__8200;
      k = G__8201;
      v = G__8202;
      kvs = G__8203;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.assoc.cljs$lang$applyTo = function(seq8190) {
  var G__8191 = cljs.core.first(seq8190);
  var seq8190__$1 = cljs.core.next(seq8190);
  var G__8192 = cljs.core.first(seq8190__$1);
  var seq8190__$2 = cljs.core.next(seq8190__$1);
  var G__8193 = cljs.core.first(seq8190__$2);
  var seq8190__$3 = cljs.core.next(seq8190__$2);
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__8191, G__8192, G__8193, seq8190__$3);
};
cljs.core.assoc.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc = function cljs$core$dissoc(var_args) {
  var args8204 = [];
  var len__5835__auto___8210 = arguments.length;
  var i__5836__auto___8211 = 0;
  while (true) {
    if (i__5836__auto___8211 < len__5835__auto___8210) {
      args8204.push(arguments[i__5836__auto___8211]);
      var G__8212 = i__5836__auto___8211 + 1;
      i__5836__auto___8211 = G__8212;
      continue;
    } else {
    }
    break;
  }
  var G__8209 = args8204.length;
  switch(G__8209) {
    case 1:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8204.slice(2), 0);
      return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._dissoc(coll, k);
  }
};
cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__8214 = ret;
        var G__8215 = cljs.core.first(ks);
        var G__8216 = cljs.core.next(ks);
        coll = G__8214;
        k = G__8215;
        ks = G__8216;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.dissoc.cljs$lang$applyTo = function(seq8205) {
  var G__8206 = cljs.core.first(seq8205);
  var seq8205__$1 = cljs.core.next(seq8205);
  var G__8207 = cljs.core.first(seq8205__$1);
  var seq8205__$2 = cljs.core.next(seq8205__$1);
  return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__8206, G__8207, seq8205__$2);
};
cljs.core.dissoc.cljs$lang$maxFixedArity = 2;
cljs.core.fn_QMARK_ = function cljs$core$fn_QMARK_(f) {
  var or__4777__auto__ = goog.isFunction(f);
  if (or__4777__auto__) {
    return or__4777__auto__;
  } else {
    if (!(f == null)) {
      if (false || f.cljs$core$Fn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.Fn, f);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.call = function() {
  var G__8222 = null;
  var G__8222__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
  };
  var G__8222__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
  };
  var G__8222__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
  };
  var G__8222__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
  };
  var G__8222__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
  };
  var G__8222__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
  };
  var G__8222__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__8222__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__8222__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__8222__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__8222__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__8222__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__8222__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__8222__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__8222__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__8222__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__8222__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__8222__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__8222__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__8222__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__8222__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__8222__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__8222 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__8222__1.call(this, self__);
      case 2:
        return G__8222__2.call(this, self__, a);
      case 3:
        return G__8222__3.call(this, self__, a, b);
      case 4:
        return G__8222__4.call(this, self__, a, b, c);
      case 5:
        return G__8222__5.call(this, self__, a, b, c, d);
      case 6:
        return G__8222__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__8222__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__8222__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__8222__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__8222__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__8222__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__8222__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__8222__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__8222__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__8222__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__8222__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__8222__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__8222__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__8222__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__8222__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__8222__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__8222__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8222.cljs$core$IFn$_invoke$arity$1 = G__8222__1;
  G__8222.cljs$core$IFn$_invoke$arity$2 = G__8222__2;
  G__8222.cljs$core$IFn$_invoke$arity$3 = G__8222__3;
  G__8222.cljs$core$IFn$_invoke$arity$4 = G__8222__4;
  G__8222.cljs$core$IFn$_invoke$arity$5 = G__8222__5;
  G__8222.cljs$core$IFn$_invoke$arity$6 = G__8222__6;
  G__8222.cljs$core$IFn$_invoke$arity$7 = G__8222__7;
  G__8222.cljs$core$IFn$_invoke$arity$8 = G__8222__8;
  G__8222.cljs$core$IFn$_invoke$arity$9 = G__8222__9;
  G__8222.cljs$core$IFn$_invoke$arity$10 = G__8222__10;
  G__8222.cljs$core$IFn$_invoke$arity$11 = G__8222__11;
  G__8222.cljs$core$IFn$_invoke$arity$12 = G__8222__12;
  G__8222.cljs$core$IFn$_invoke$arity$13 = G__8222__13;
  G__8222.cljs$core$IFn$_invoke$arity$14 = G__8222__14;
  G__8222.cljs$core$IFn$_invoke$arity$15 = G__8222__15;
  G__8222.cljs$core$IFn$_invoke$arity$16 = G__8222__16;
  G__8222.cljs$core$IFn$_invoke$arity$17 = G__8222__17;
  G__8222.cljs$core$IFn$_invoke$arity$18 = G__8222__18;
  G__8222.cljs$core$IFn$_invoke$arity$19 = G__8222__19;
  G__8222.cljs$core$IFn$_invoke$arity$20 = G__8222__20;
  G__8222.cljs$core$IFn$_invoke$arity$21 = G__8222__21;
  G__8222.cljs$core$IFn$_invoke$arity$22 = G__8222__22;
  return G__8222;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args8221) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8221)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) : cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn, cljs.core.cst$sym$meta], null);
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/MetaFn");
};
cljs.core.__GT_MetaFn = function cljs$core$__GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function cljs$core$with_meta(o, meta) {
  if (goog.isFunction(o)) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta(o, meta);
    }
  }
};
cljs.core.meta = function cljs$core$meta(o) {
  if (function() {
    var and__4765__auto__ = !(o == null);
    if (and__4765__auto__) {
      if (!(o == null)) {
        if (o.cljs$lang$protocol_mask$partition0$ & 131072 || o.cljs$core$IMeta$) {
          return true;
        } else {
          if (!o.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta, o);
      }
    } else {
      return and__4765__auto__;
    }
  }()) {
    return cljs.core._meta(o);
  } else {
    return null;
  }
};
cljs.core.peek = function cljs$core$peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek(coll);
  }
};
cljs.core.pop = function cljs$core$pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop(coll);
  }
};
cljs.core.disj = function cljs$core$disj(var_args) {
  var args8227 = [];
  var len__5835__auto___8233 = arguments.length;
  var i__5836__auto___8234 = 0;
  while (true) {
    if (i__5836__auto___8234 < len__5835__auto___8233) {
      args8227.push(arguments[i__5836__auto___8234]);
      var G__8235 = i__5836__auto___8234 + 1;
      i__5836__auto___8234 = G__8235;
      continue;
    } else {
    }
    break;
  }
  var G__8232 = args8227.length;
  switch(G__8232) {
    case 1:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8227.slice(2), 0);
      return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = function(coll, k) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._disjoin(coll, k);
  }
};
cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = function(coll, k, ks) {
  while (true) {
    if (coll == null) {
      return null;
    } else {
      var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll, k);
      if (cljs.core.truth_(ks)) {
        var G__8237 = ret;
        var G__8238 = cljs.core.first(ks);
        var G__8239 = cljs.core.next(ks);
        coll = G__8237;
        k = G__8238;
        ks = G__8239;
        continue;
      } else {
        return ret;
      }
    }
    break;
  }
};
cljs.core.disj.cljs$lang$applyTo = function(seq8228) {
  var G__8229 = cljs.core.first(seq8228);
  var seq8228__$1 = cljs.core.next(seq8228);
  var G__8230 = cljs.core.first(seq8228__$1);
  var seq8228__$2 = cljs.core.next(seq8228__$1);
  return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__8229, G__8230, seq8228__$2);
};
cljs.core.disj.cljs$lang$maxFixedArity = 2;
cljs.core.empty_QMARK_ = function cljs$core$empty_QMARK_(coll) {
  return coll == null || cljs.core.not(cljs.core.seq(coll));
};
cljs.core.coll_QMARK_ = function cljs$core$coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 8 || x.cljs$core$ICollection$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection, x);
    }
  }
};
cljs.core.set_QMARK_ = function cljs$core$set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 4096 || x.cljs$core$ISet$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISet, x);
    }
  }
};
cljs.core.associative_QMARK_ = function cljs$core$associative_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 512 || x.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative, x);
  }
};
cljs.core.sequential_QMARK_ = function cljs$core$sequential_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16777216 || x.cljs$core$ISequential$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential, x);
  }
};
cljs.core.sorted_QMARK_ = function cljs$core$sorted_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 268435456 || x.cljs$core$ISorted$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted, x);
  }
};
cljs.core.reduceable_QMARK_ = function cljs$core$reduceable_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 524288 || x.cljs$core$IReduce$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, x);
  }
};
cljs.core.map_QMARK_ = function cljs$core$map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    if (!(x == null)) {
      if (x.cljs$lang$protocol_mask$partition0$ & 1024 || x.cljs$core$IMap$) {
        return true;
      } else {
        if (!x.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IMap, x);
    }
  }
};
cljs.core.record_QMARK_ = function cljs$core$record_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 67108864 || x.cljs$core$IRecord$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord, x);
  }
};
cljs.core.vector_QMARK_ = function cljs$core$vector_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 16384 || x.cljs$core$IVector$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IVector, x);
  }
};
cljs.core.ChunkedCons;
cljs.core.ChunkedSeq;
cljs.core.chunked_seq_QMARK_ = function cljs$core$chunked_seq_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition1$ & 512 || x.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function cljs$core$js_obj(var_args) {
  var args8260 = [];
  var len__5835__auto___8266 = arguments.length;
  var i__5836__auto___8267 = 0;
  while (true) {
    if (i__5836__auto___8267 < len__5835__auto___8266) {
      args8260.push(arguments[i__5836__auto___8267]);
      var G__8268 = i__5836__auto___8267 + 1;
      i__5836__auto___8267 = G__8268;
      continue;
    } else {
    }
    break;
  }
  var G__8263 = args8260.length;
  switch(G__8263) {
    case 0:
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8260.slice(0), 0);
      return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__5854__auto__);
  }
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = function() {
  return {};
};
cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create, keyvals) : cljs.core.apply.call(null, goog.object.create, keyvals);
};
cljs.core.js_obj.cljs$lang$applyTo = function(seq8261) {
  return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8261));
};
cljs.core.js_obj.cljs$lang$maxFixedArity = 0;
cljs.core.js_keys = function cljs$core$js_keys(obj) {
  var keys = [];
  var G__8272_8274 = obj;
  var G__8273_8275 = function(G__8272_8274, keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(G__8272_8274, keys);
  goog.object.forEach(G__8272_8274, G__8273_8275);
  return keys;
};
cljs.core.js_delete = function cljs$core$js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function cljs$core$array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__8276 = i__$1 + 1;
      var G__8277 = j__$1 + 1;
      var G__8278 = len__$1 - 1;
      i__$1 = G__8276;
      j__$1 = G__8277;
      len__$1 = G__8278;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function cljs$core$array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__8279 = i__$1 - 1;
      var G__8280 = j__$1 - 1;
      var G__8281 = len__$1 - 1;
      i__$1 = G__8279;
      j__$1 = G__8280;
      len__$1 = G__8281;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = {};
cljs.core.false_QMARK_ = function cljs$core$false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function cljs$core$true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function cljs$core$undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function cljs$core$seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    if (!(s == null)) {
      if (s.cljs$lang$protocol_mask$partition0$ & 64 || s.cljs$core$ISeq$) {
        return true;
      } else {
        if (!s.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq, s);
    }
  }
};
cljs.core.seqable_QMARK_ = function cljs$core$seqable_QMARK_(s) {
  if (!(s == null)) {
    if (s.cljs$lang$protocol_mask$partition0$ & 8388608 || s.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!s.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable, s);
  }
};
cljs.core.boolean$ = function cljs$core$boolean(x) {
  if (x == null) {
    return false;
  } else {
    if (x === false) {
      return false;
    } else {
      return true;
    }
  }
};
cljs.core.ifn_QMARK_ = function cljs$core$ifn_QMARK_(f) {
  var or__4777__auto__ = cljs.core.fn_QMARK_(f);
  if (or__4777__auto__) {
    return or__4777__auto__;
  } else {
    if (!(f == null)) {
      if (f.cljs$lang$protocol_mask$partition0$ & 1 || f.cljs$core$IFn$) {
        return true;
      } else {
        if (!f.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_(cljs.core.IFn, f);
    }
  }
};
cljs.core.integer_QMARK_ = function cljs$core$integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function cljs$core$contains_QMARK_(coll, v) {
  if (cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function cljs$core$find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_(coll) && cljs.core.contains_QMARK_(coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function cljs$core$distinct_QMARK_(var_args) {
  var args8292 = [];
  var len__5835__auto___8298 = arguments.length;
  var i__5836__auto___8299 = 0;
  while (true) {
    if (i__5836__auto___8299 < len__5835__auto___8298) {
      args8292.push(arguments[i__5836__auto___8299]);
      var G__8300 = i__5836__auto___8299 + 1;
      i__5836__auto___8299 = G__8300;
      continue;
    } else {
    }
    break;
  }
  var G__8297 = args8292.length;
  switch(G__8297) {
    case 1:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8292.slice(2), 0);
      return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  if (!cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
    var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
    var xs = more;
    while (true) {
      var x__$1 = cljs.core.first(xs);
      var etc = cljs.core.next(xs);
      if (cljs.core.truth_(xs)) {
        if (cljs.core.contains_QMARK_(s, x__$1)) {
          return false;
        } else {
          var G__8302 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s, x__$1);
          var G__8303 = etc;
          s = G__8302;
          xs = G__8303;
          continue;
        }
      } else {
        return true;
      }
      break;
    }
  } else {
    return false;
  }
};
cljs.core.distinct_QMARK_.cljs$lang$applyTo = function(seq8293) {
  var G__8294 = cljs.core.first(seq8293);
  var seq8293__$1 = cljs.core.next(seq8293);
  var G__8295 = cljs.core.first(seq8293__$1);
  var seq8293__$2 = cljs.core.next(seq8293__$1);
  return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__8294, G__8295, seq8293__$2);
};
cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = 2;
cljs.core.compare = function cljs$core$compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return -1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (typeof x === "number") {
          if (typeof y === "number") {
            return goog.array.defaultCompare(x, y);
          } else {
            throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
          }
        } else {
          if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 2048 || x.cljs$core$IComparable$ ? true : !x.cljs$lang$protocol_mask$partition1$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IComparable, x)) {
            return cljs.core._compare(x, y);
          } else {
            if ((typeof x === "string" || cljs.core.array_QMARK_(x) || x === true || x === false) && cljs.core.type(x) === cljs.core.type(y)) {
              return goog.array.defaultCompare(x, y);
            } else {
              throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x), cljs.core.str(" to "), cljs.core.str(y)].join(""));
            }
          }
        }
      }
    }
  }
};
cljs.core.compare_indexed = function cljs$core$compare_indexed(var_args) {
  var args8306 = [];
  var len__5835__auto___8309 = arguments.length;
  var i__5836__auto___8310 = 0;
  while (true) {
    if (i__5836__auto___8310 < len__5835__auto___8309) {
      args8306.push(arguments[i__5836__auto___8310]);
      var G__8311 = i__5836__auto___8310 + 1;
      i__5836__auto___8310 = G__8311;
      continue;
    } else {
    }
    break;
  }
  var G__8308 = args8306.length;
  switch(G__8308) {
    case 2:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 4:
      return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8306.length)].join(""));;
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = function(xs, ys) {
  var xl = cljs.core.count(xs);
  var yl = cljs.core.count(ys);
  if (xl < yl) {
    return -1;
  } else {
    if (xl > yl) {
      return 1;
    } else {
      if (xl === 0) {
        return 0;
      } else {
        return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs, ys, xl, 0);
      }
    }
  }
};
cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = function(xs, ys, len, n) {
  while (true) {
    var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs, n), cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys, n));
    if (d === 0 && n + 1 < len) {
      var G__8313 = xs;
      var G__8314 = ys;
      var G__8315 = len;
      var G__8316 = n + 1;
      xs = G__8313;
      ys = G__8314;
      len = G__8315;
      n = G__8316;
      continue;
    } else {
      return d;
    }
    break;
  }
};
cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;
cljs.core.fn__GT_comparator = function cljs$core$fn__GT_comparator(f) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return -1;
        } else {
          if (cljs.core.truth_(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y, x) : f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.to_array;
cljs.core.sort = function cljs$core$sort(var_args) {
  var args8317 = [];
  var len__5835__auto___8322 = arguments.length;
  var i__5836__auto___8323 = 0;
  while (true) {
    if (i__5836__auto___8323 < len__5835__auto___8322) {
      args8317.push(arguments[i__5836__auto___8323]);
      var G__8324 = i__5836__auto___8323 + 1;
      i__5836__auto___8323 = G__8324;
      continue;
    } else {
    }
    break;
  }
  var G__8319 = args8317.length;
  switch(G__8319) {
    case 1:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8317.length)].join(""));;
  }
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare, coll);
};
cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = function(comp, coll) {
  if (cljs.core.seq(coll)) {
    var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
    var G__8320_8326 = a;
    var G__8321_8327 = cljs.core.fn__GT_comparator(comp);
    goog.array.stableSort(G__8320_8326, G__8321_8327);
    return cljs.core.seq(a);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.sort.cljs$lang$maxFixedArity = 2;
cljs.core.sort_by = function cljs$core$sort_by(var_args) {
  var args8328 = [];
  var len__5835__auto___8331 = arguments.length;
  var i__5836__auto___8332 = 0;
  while (true) {
    if (i__5836__auto___8332 < len__5835__auto___8331) {
      args8328.push(arguments[i__5836__auto___8332]);
      var G__8333 = i__5836__auto___8332 + 1;
      i__5836__auto___8332 = G__8333;
      continue;
    } else {
    }
    break;
  }
  var G__8330 = args8328.length;
  switch(G__8330) {
    case 2:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8328.length)].join(""));;
  }
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = function(keyfn, coll) {
  return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn, cljs.core.compare, coll);
};
cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = function(keyfn, comp, coll) {
  return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(x, y) {
    return cljs.core.fn__GT_comparator(comp).call(null, keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null, x), keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null, y));
  }, coll);
};
cljs.core.sort_by.cljs$lang$maxFixedArity = 3;
cljs.core.seq_reduce = function cljs$core$seq_reduce(var_args) {
  var args8335 = [];
  var len__5835__auto___8343 = arguments.length;
  var i__5836__auto___8344 = 0;
  while (true) {
    if (i__5836__auto___8344 < len__5835__auto___8343) {
      args8335.push(arguments[i__5836__auto___8344]);
      var G__8345 = i__5836__auto___8344 + 1;
      i__5836__auto___8344 = G__8345;
      continue;
    } else {
    }
    break;
  }
  var G__8337 = args8335.length;
  switch(G__8337) {
    case 2:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8335.length)].join(""));;
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var temp__4423__auto__ = cljs.core.seq(coll);
  if (temp__4423__auto__) {
    var s = temp__4423__auto__;
    var G__8338 = f;
    var G__8339 = cljs.core.first(s);
    var G__8340 = cljs.core.next(s);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__8338, G__8339, G__8340) : cljs.core.reduce.call(null, G__8338, G__8339, G__8340);
  } else {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  }
};
cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  var val__$1 = val;
  var coll__$1 = cljs.core.seq(coll);
  while (true) {
    if (coll__$1) {
      var nval = function() {
        var G__8341 = val__$1;
        var G__8342 = cljs.core.first(coll__$1);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8341, G__8342) : f.call(null, G__8341, G__8342);
      }();
      if (cljs.core.reduced_QMARK_(nval)) {
        return cljs.core.deref(nval);
      } else {
        var G__8347 = nval;
        var G__8348 = cljs.core.next(coll__$1);
        val__$1 = G__8347;
        coll__$1 = G__8348;
        continue;
      }
    } else {
      return val__$1;
    }
    break;
  }
};
cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;
cljs.core.vec;
cljs.core.shuffle = function cljs$core$shuffle(coll) {
  var a = cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null, a);
};
cljs.core.reduce = function cljs$core$reduce(var_args) {
  var args8349 = [];
  var len__5835__auto___8354 = arguments.length;
  var i__5836__auto___8355 = 0;
  while (true) {
    if (i__5836__auto___8355 < len__5835__auto___8354) {
      args8349.push(arguments[i__5836__auto___8355]);
      var G__8356 = i__5836__auto___8355 + 1;
      i__5836__auto___8355 = G__8356;
      continue;
    } else {
    }
    break;
  }
  var G__8351 = args8349.length;
  switch(G__8351) {
    case 2:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8349.length)].join(""));;
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$2(null, f);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll, f);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = function(f, val, coll) {
  if (!(coll == null) ? coll.cljs$lang$protocol_mask$partition0$ & 524288 || coll.cljs$core$IReduce$ ? true : false : false) {
    return coll.cljs$core$IReduce$_reduce$arity$3(null, f, val);
  } else {
    if (cljs.core.array_QMARK_(coll)) {
      return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
    } else {
      if (typeof coll === "string") {
        return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
      } else {
        if (cljs.core.native_satisfies_QMARK_(cljs.core.IReduce, coll)) {
          return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll, f, val);
        } else {
          return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, val, coll);
        }
      }
    }
  }
};
cljs.core.reduce.cljs$lang$maxFixedArity = 3;
cljs.core.reduce_kv = function cljs$core$reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce(coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function cljs$core$identity(x) {
  return x;
};
cljs.core.completing = function cljs$core$completing(var_args) {
  var args8358 = [];
  var len__5835__auto___8361 = arguments.length;
  var i__5836__auto___8362 = 0;
  while (true) {
    if (i__5836__auto___8362 < len__5835__auto___8361) {
      args8358.push(arguments[i__5836__auto___8362]);
      var G__8363 = i__5836__auto___8362 + 1;
      i__5836__auto___8362 = G__8363;
      continue;
    } else {
    }
    break;
  }
  var G__8360 = args8358.length;
  switch(G__8360) {
    case 1:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8358.length)].join(""));;
  }
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f, cljs.core.identity);
};
cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = function(f, cf) {
  return function() {
    var G__8365 = null;
    var G__8365__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    };
    var G__8365__1 = function(x) {
      return cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null, x);
    };
    var G__8365__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y);
    };
    G__8365 = function(x, y) {
      switch(arguments.length) {
        case 0:
          return G__8365__0.call(this);
        case 1:
          return G__8365__1.call(this, x);
        case 2:
          return G__8365__2.call(this, x, y);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8365.cljs$core$IFn$_invoke$arity$0 = G__8365__0;
    G__8365.cljs$core$IFn$_invoke$arity$1 = G__8365__1;
    G__8365.cljs$core$IFn$_invoke$arity$2 = G__8365__2;
    return G__8365;
  }();
};
cljs.core.completing.cljs$lang$maxFixedArity = 2;
cljs.core.transduce = function cljs$core$transduce(var_args) {
  var args8366 = [];
  var len__5835__auto___8369 = arguments.length;
  var i__5836__auto___8370 = 0;
  while (true) {
    if (i__5836__auto___8370 < len__5835__auto___8369) {
      args8366.push(arguments[i__5836__auto___8370]);
      var G__8371 = i__5836__auto___8370 + 1;
      i__5836__auto___8370 = G__8371;
      continue;
    } else {
    }
    break;
  }
  var G__8368 = args8366.length;
  switch(G__8368) {
    case 3:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8366.length)].join(""));;
  }
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = function(xform, f, coll) {
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, f, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), coll);
};
cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = function(xform, f, init, coll) {
  var f__$1 = xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null, f);
  var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1, init, coll);
  return f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null, ret);
};
cljs.core.transduce.cljs$lang$maxFixedArity = 4;
cljs.core._PLUS_ = function cljs$core$_PLUS_(var_args) {
  var args8373 = [];
  var len__5835__auto___8379 = arguments.length;
  var i__5836__auto___8380 = 0;
  while (true) {
    if (i__5836__auto___8380 < len__5835__auto___8379) {
      args8373.push(arguments[i__5836__auto___8380]);
      var G__8381 = i__5836__auto___8380 + 1;
      i__5836__auto___8380 = G__8381;
      continue;
    } else {
    }
    break;
  }
  var G__8378 = args8373.length;
  switch(G__8378) {
    case 0:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8373.slice(2), 0);
      return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_, x + y, more);
};
cljs.core._PLUS_.cljs$lang$applyTo = function(seq8374) {
  var G__8375 = cljs.core.first(seq8374);
  var seq8374__$1 = cljs.core.next(seq8374);
  var G__8376 = cljs.core.first(seq8374__$1);
  var seq8374__$2 = cljs.core.next(seq8374__$1);
  return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__8375, G__8376, seq8374__$2);
};
cljs.core._PLUS_.cljs$lang$maxFixedArity = 2;
cljs.core._ = function cljs$core$_(var_args) {
  var args8383 = [];
  var len__5835__auto___8389 = arguments.length;
  var i__5836__auto___8390 = 0;
  while (true) {
    if (i__5836__auto___8390 < len__5835__auto___8389) {
      args8383.push(arguments[i__5836__auto___8390]);
      var G__8391 = i__5836__auto___8390 + 1;
      i__5836__auto___8390 = G__8391;
      continue;
    } else {
    }
    break;
  }
  var G__8388 = args8383.length;
  switch(G__8388) {
    case 1:
      return cljs.core._.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8383.slice(2), 0);
      return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core._.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core._.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._, x - y, more);
};
cljs.core._.cljs$lang$applyTo = function(seq8384) {
  var G__8385 = cljs.core.first(seq8384);
  var seq8384__$1 = cljs.core.next(seq8384);
  var G__8386 = cljs.core.first(seq8384__$1);
  var seq8384__$2 = cljs.core.next(seq8384__$1);
  return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__8385, G__8386, seq8384__$2);
};
cljs.core._.cljs$lang$maxFixedArity = 2;
cljs.core._STAR_ = function cljs$core$_STAR_(var_args) {
  var args8393 = [];
  var len__5835__auto___8399 = arguments.length;
  var i__5836__auto___8400 = 0;
  while (true) {
    if (i__5836__auto___8400 < len__5835__auto___8399) {
      args8393.push(arguments[i__5836__auto___8400]);
      var G__8401 = i__5836__auto___8400 + 1;
      i__5836__auto___8400 = G__8401;
      continue;
    } else {
    }
    break;
  }
  var G__8398 = args8393.length;
  switch(G__8398) {
    case 0:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8393.slice(2), 0);
      return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_, x * y, more);
};
cljs.core._STAR_.cljs$lang$applyTo = function(seq8394) {
  var G__8395 = cljs.core.first(seq8394);
  var seq8394__$1 = cljs.core.next(seq8394);
  var G__8396 = cljs.core.first(seq8394__$1);
  var seq8394__$2 = cljs.core.next(seq8394__$1);
  return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__8395, G__8396, seq8394__$2);
};
cljs.core._STAR_.cljs$lang$maxFixedArity = 2;
cljs.core.divide;
cljs.core._SLASH_ = function cljs$core$_SLASH_(var_args) {
  var args8403 = [];
  var len__5835__auto___8409 = arguments.length;
  var i__5836__auto___8410 = 0;
  while (true) {
    if (i__5836__auto___8410 < len__5835__auto___8409) {
      args8403.push(arguments[i__5836__auto___8410]);
      var G__8411 = i__5836__auto___8410 + 1;
      i__5836__auto___8410 = G__8411;
      continue;
    } else {
    }
    break;
  }
  var G__8408 = args8403.length;
  switch(G__8408) {
    case 1:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8403.slice(2), 0);
      return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_, x / y, more);
};
cljs.core._SLASH_.cljs$lang$applyTo = function(seq8404) {
  var G__8405 = cljs.core.first(seq8404);
  var seq8404__$1 = cljs.core.next(seq8404);
  var G__8406 = cljs.core.first(seq8404__$1);
  var seq8404__$2 = cljs.core.next(seq8404__$1);
  return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__8405, G__8406, seq8404__$2);
};
cljs.core._SLASH_.cljs$lang$maxFixedArity = 2;
cljs.core._LT_ = function cljs$core$_LT_(var_args) {
  var args8413 = [];
  var len__5835__auto___8419 = arguments.length;
  var i__5836__auto___8420 = 0;
  while (true) {
    if (i__5836__auto___8420 < len__5835__auto___8419) {
      args8413.push(arguments[i__5836__auto___8420]);
      var G__8421 = i__5836__auto___8420 + 1;
      i__5836__auto___8420 = G__8421;
      continue;
    } else {
    }
    break;
  }
  var G__8418 = args8413.length;
  switch(G__8418) {
    case 1:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8413.slice(2), 0);
      return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x < y;
};
cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x < y) {
      if (cljs.core.next(more)) {
        var G__8423 = y;
        var G__8424 = cljs.core.first(more);
        var G__8425 = cljs.core.next(more);
        x = G__8423;
        y = G__8424;
        more = G__8425;
        continue;
      } else {
        return y < cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT_.cljs$lang$applyTo = function(seq8414) {
  var G__8415 = cljs.core.first(seq8414);
  var seq8414__$1 = cljs.core.next(seq8414);
  var G__8416 = cljs.core.first(seq8414__$1);
  var seq8414__$2 = cljs.core.next(seq8414__$1);
  return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__8415, G__8416, seq8414__$2);
};
cljs.core._LT_.cljs$lang$maxFixedArity = 2;
cljs.core._LT__EQ_ = function cljs$core$_LT__EQ_(var_args) {
  var args8426 = [];
  var len__5835__auto___8432 = arguments.length;
  var i__5836__auto___8433 = 0;
  while (true) {
    if (i__5836__auto___8433 < len__5835__auto___8432) {
      args8426.push(arguments[i__5836__auto___8433]);
      var G__8434 = i__5836__auto___8433 + 1;
      i__5836__auto___8433 = G__8434;
      continue;
    } else {
    }
    break;
  }
  var G__8431 = args8426.length;
  switch(G__8431) {
    case 1:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8426.slice(2), 0);
      return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x <= y;
};
cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x <= y) {
      if (cljs.core.next(more)) {
        var G__8436 = y;
        var G__8437 = cljs.core.first(more);
        var G__8438 = cljs.core.next(more);
        x = G__8436;
        y = G__8437;
        more = G__8438;
        continue;
      } else {
        return y <= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._LT__EQ_.cljs$lang$applyTo = function(seq8427) {
  var G__8428 = cljs.core.first(seq8427);
  var seq8427__$1 = cljs.core.next(seq8427);
  var G__8429 = cljs.core.first(seq8427__$1);
  var seq8427__$2 = cljs.core.next(seq8427__$1);
  return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8428, G__8429, seq8427__$2);
};
cljs.core._LT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core._GT_ = function cljs$core$_GT_(var_args) {
  var args8439 = [];
  var len__5835__auto___8445 = arguments.length;
  var i__5836__auto___8446 = 0;
  while (true) {
    if (i__5836__auto___8446 < len__5835__auto___8445) {
      args8439.push(arguments[i__5836__auto___8446]);
      var G__8447 = i__5836__auto___8446 + 1;
      i__5836__auto___8446 = G__8447;
      continue;
    } else {
    }
    break;
  }
  var G__8444 = args8439.length;
  switch(G__8444) {
    case 1:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8439.slice(2), 0);
      return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x > y;
};
cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x > y) {
      if (cljs.core.next(more)) {
        var G__8449 = y;
        var G__8450 = cljs.core.first(more);
        var G__8451 = cljs.core.next(more);
        x = G__8449;
        y = G__8450;
        more = G__8451;
        continue;
      } else {
        return y > cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT_.cljs$lang$applyTo = function(seq8440) {
  var G__8441 = cljs.core.first(seq8440);
  var seq8440__$1 = cljs.core.next(seq8440);
  var G__8442 = cljs.core.first(seq8440__$1);
  var seq8440__$2 = cljs.core.next(seq8440__$1);
  return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__8441, G__8442, seq8440__$2);
};
cljs.core._GT_.cljs$lang$maxFixedArity = 2;
cljs.core._GT__EQ_ = function cljs$core$_GT__EQ_(var_args) {
  var args8452 = [];
  var len__5835__auto___8458 = arguments.length;
  var i__5836__auto___8459 = 0;
  while (true) {
    if (i__5836__auto___8459 < len__5835__auto___8458) {
      args8452.push(arguments[i__5836__auto___8459]);
      var G__8460 = i__5836__auto___8459 + 1;
      i__5836__auto___8459 = G__8460;
      continue;
    } else {
    }
    break;
  }
  var G__8457 = args8452.length;
  switch(G__8457) {
    case 1:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8452.slice(2), 0);
      return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x >= y;
};
cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x >= y) {
      if (cljs.core.next(more)) {
        var G__8462 = y;
        var G__8463 = cljs.core.first(more);
        var G__8464 = cljs.core.next(more);
        x = G__8462;
        y = G__8463;
        more = G__8464;
        continue;
      } else {
        return y >= cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._GT__EQ_.cljs$lang$applyTo = function(seq8453) {
  var G__8454 = cljs.core.first(seq8453);
  var seq8453__$1 = cljs.core.next(seq8453);
  var G__8455 = cljs.core.first(seq8453__$1);
  var seq8453__$2 = cljs.core.next(seq8453__$1);
  return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8454, G__8455, seq8453__$2);
};
cljs.core._GT__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.dec = function cljs$core$dec(x) {
  return x - 1;
};
cljs.core.max = function cljs$core$max(var_args) {
  var args8465 = [];
  var len__5835__auto___8471 = arguments.length;
  var i__5836__auto___8472 = 0;
  while (true) {
    if (i__5836__auto___8472 < len__5835__auto___8471) {
      args8465.push(arguments[i__5836__auto___8472]);
      var G__8473 = i__5836__auto___8472 + 1;
      i__5836__auto___8472 = G__8473;
      continue;
    } else {
    }
    break;
  }
  var G__8470 = args8465.length;
  switch(G__8470) {
    case 1:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.max.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8465.slice(2), 0);
      return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.max.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__5108__auto__ = x;
  var y__5109__auto__ = y;
  return x__5108__auto__ > y__5109__auto__ ? x__5108__auto__ : y__5109__auto__;
};
cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max, function() {
    var x__5108__auto__ = x;
    var y__5109__auto__ = y;
    return x__5108__auto__ > y__5109__auto__ ? x__5108__auto__ : y__5109__auto__;
  }(), more);
};
cljs.core.max.cljs$lang$applyTo = function(seq8466) {
  var G__8467 = cljs.core.first(seq8466);
  var seq8466__$1 = cljs.core.next(seq8466);
  var G__8468 = cljs.core.first(seq8466__$1);
  var seq8466__$2 = cljs.core.next(seq8466__$1);
  return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__8467, G__8468, seq8466__$2);
};
cljs.core.max.cljs$lang$maxFixedArity = 2;
cljs.core.min = function cljs$core$min(var_args) {
  var args8475 = [];
  var len__5835__auto___8481 = arguments.length;
  var i__5836__auto___8482 = 0;
  while (true) {
    if (i__5836__auto___8482 < len__5835__auto___8481) {
      args8475.push(arguments[i__5836__auto___8482]);
      var G__8483 = i__5836__auto___8482 + 1;
      i__5836__auto___8482 = G__8483;
      continue;
    } else {
    }
    break;
  }
  var G__8480 = args8475.length;
  switch(G__8480) {
    case 1:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.min.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8475.slice(2), 0);
      return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.min.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  var x__5115__auto__ = x;
  var y__5116__auto__ = y;
  return x__5115__auto__ < y__5116__auto__ ? x__5115__auto__ : y__5116__auto__;
};
cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min, function() {
    var x__5115__auto__ = x;
    var y__5116__auto__ = y;
    return x__5115__auto__ < y__5116__auto__ ? x__5115__auto__ : y__5116__auto__;
  }(), more);
};
cljs.core.min.cljs$lang$applyTo = function(seq8476) {
  var G__8477 = cljs.core.first(seq8476);
  var seq8476__$1 = cljs.core.next(seq8476);
  var G__8478 = cljs.core.first(seq8476__$1);
  var seq8476__$2 = cljs.core.next(seq8476__$1);
  return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__8477, G__8478, seq8476__$2);
};
cljs.core.min.cljs$lang$maxFixedArity = 2;
cljs.core.byte$ = function cljs$core$byte(x) {
  return x;
};
cljs.core.char$ = function cljs$core$char(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function cljs$core$short(x) {
  return x;
};
cljs.core.float$ = function cljs$core$float(x) {
  return x;
};
cljs.core.double$ = function cljs$core$double(x) {
  return x;
};
cljs.core.unchecked_byte = function cljs$core$unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function cljs$core$unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function cljs$core$unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function cljs$core$unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function cljs$core$unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function cljs$core$unchecked_add(var_args) {
  var args8485 = [];
  var len__5835__auto___8491 = arguments.length;
  var i__5836__auto___8492 = 0;
  while (true) {
    if (i__5836__auto___8492 < len__5835__auto___8491) {
      args8485.push(arguments[i__5836__auto___8492]);
      var G__8493 = i__5836__auto___8492 + 1;
      i__5836__auto___8492 = G__8493;
      continue;
    } else {
    }
    break;
  }
  var G__8490 = args8485.length;
  switch(G__8490) {
    case 0:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8485.slice(2), 0);
      return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add, x + y, more);
};
cljs.core.unchecked_add.cljs$lang$applyTo = function(seq8486) {
  var G__8487 = cljs.core.first(seq8486);
  var seq8486__$1 = cljs.core.next(seq8486);
  var G__8488 = cljs.core.first(seq8486__$1);
  var seq8486__$2 = cljs.core.next(seq8486__$1);
  return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__8487, G__8488, seq8486__$2);
};
cljs.core.unchecked_add.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_add_int = function cljs$core$unchecked_add_int(var_args) {
  var args8495 = [];
  var len__5835__auto___8501 = arguments.length;
  var i__5836__auto___8502 = 0;
  while (true) {
    if (i__5836__auto___8502 < len__5835__auto___8501) {
      args8495.push(arguments[i__5836__auto___8502]);
      var G__8503 = i__5836__auto___8502 + 1;
      i__5836__auto___8502 = G__8503;
      continue;
    } else {
    }
    break;
  }
  var G__8500 = args8495.length;
  switch(G__8500) {
    case 0:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8495.slice(2), 0);
      return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 0;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x + y;
};
cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int, x + y, more);
};
cljs.core.unchecked_add_int.cljs$lang$applyTo = function(seq8496) {
  var G__8497 = cljs.core.first(seq8496);
  var seq8496__$1 = cljs.core.next(seq8496);
  var G__8498 = cljs.core.first(seq8496__$1);
  var seq8496__$2 = cljs.core.next(seq8496__$1);
  return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__8497, G__8498, seq8496__$2);
};
cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_dec = function cljs$core$unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function cljs$core$unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function cljs$core$unchecked_divide_int(var_args) {
  var args8505 = [];
  var len__5835__auto___8511 = arguments.length;
  var i__5836__auto___8512 = 0;
  while (true) {
    if (i__5836__auto___8512 < len__5835__auto___8511) {
      args8505.push(arguments[i__5836__auto___8512]);
      var G__8513 = i__5836__auto___8512 + 1;
      i__5836__auto___8512 = G__8513;
      continue;
    } else {
    }
    break;
  }
  var G__8510 = args8505.length;
  switch(G__8510) {
    case 1:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8505.slice(2), 0);
      return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return 1 / x;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x / y;
};
cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int, x / y, more);
};
cljs.core.unchecked_divide_int.cljs$lang$applyTo = function(seq8506) {
  var G__8507 = cljs.core.first(seq8506);
  var seq8506__$1 = cljs.core.next(seq8506);
  var G__8508 = cljs.core.first(seq8506__$1);
  var seq8506__$2 = cljs.core.next(seq8506__$1);
  return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__8507, G__8508, seq8506__$2);
};
cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_inc = function cljs$core$unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function cljs$core$unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function cljs$core$unchecked_multiply(var_args) {
  var args8515 = [];
  var len__5835__auto___8521 = arguments.length;
  var i__5836__auto___8522 = 0;
  while (true) {
    if (i__5836__auto___8522 < len__5835__auto___8521) {
      args8515.push(arguments[i__5836__auto___8522]);
      var G__8523 = i__5836__auto___8522 + 1;
      i__5836__auto___8522 = G__8523;
      continue;
    } else {
    }
    break;
  }
  var G__8520 = args8515.length;
  switch(G__8520) {
    case 0:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8515.slice(2), 0);
      return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply, x * y, more);
};
cljs.core.unchecked_multiply.cljs$lang$applyTo = function(seq8516) {
  var G__8517 = cljs.core.first(seq8516);
  var seq8516__$1 = cljs.core.next(seq8516);
  var G__8518 = cljs.core.first(seq8516__$1);
  var seq8516__$2 = cljs.core.next(seq8516__$1);
  return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__8517, G__8518, seq8516__$2);
};
cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_multiply_int = function cljs$core$unchecked_multiply_int(var_args) {
  var args8525 = [];
  var len__5835__auto___8531 = arguments.length;
  var i__5836__auto___8532 = 0;
  while (true) {
    if (i__5836__auto___8532 < len__5835__auto___8531) {
      args8525.push(arguments[i__5836__auto___8532]);
      var G__8533 = i__5836__auto___8532 + 1;
      i__5836__auto___8532 = G__8533;
      continue;
    } else {
    }
    break;
  }
  var G__8530 = args8525.length;
  switch(G__8530) {
    case 0:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8525.slice(2), 0);
      return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = function() {
  return 1;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return x;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x * y;
};
cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int, x * y, more);
};
cljs.core.unchecked_multiply_int.cljs$lang$applyTo = function(seq8526) {
  var G__8527 = cljs.core.first(seq8526);
  var seq8526__$1 = cljs.core.next(seq8526);
  var G__8528 = cljs.core.first(seq8526__$1);
  var seq8526__$2 = cljs.core.next(seq8526__$1);
  return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__8527, G__8528, seq8526__$2);
};
cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_negate = function cljs$core$unchecked_negate(x) {
  return -x;
};
cljs.core.unchecked_negate_int = function cljs$core$unchecked_negate_int(x) {
  return -x;
};
cljs.core.mod;
cljs.core.unchecked_remainder_int = function cljs$core$unchecked_remainder_int(x, n) {
  return cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x, n) : cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function cljs$core$unchecked_subtract(var_args) {
  var args8535 = [];
  var len__5835__auto___8541 = arguments.length;
  var i__5836__auto___8542 = 0;
  while (true) {
    if (i__5836__auto___8542 < len__5835__auto___8541) {
      args8535.push(arguments[i__5836__auto___8542]);
      var G__8543 = i__5836__auto___8542 + 1;
      i__5836__auto___8542 = G__8543;
      continue;
    } else {
    }
    break;
  }
  var G__8540 = args8535.length;
  switch(G__8540) {
    case 1:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8535.slice(2), 0);
      return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract, x - y, more);
};
cljs.core.unchecked_subtract.cljs$lang$applyTo = function(seq8536) {
  var G__8537 = cljs.core.first(seq8536);
  var seq8536__$1 = cljs.core.next(seq8536);
  var G__8538 = cljs.core.first(seq8536__$1);
  var seq8536__$2 = cljs.core.next(seq8536__$1);
  return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__8537, G__8538, seq8536__$2);
};
cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = 2;
cljs.core.unchecked_subtract_int = function cljs$core$unchecked_subtract_int(var_args) {
  var args8545 = [];
  var len__5835__auto___8551 = arguments.length;
  var i__5836__auto___8552 = 0;
  while (true) {
    if (i__5836__auto___8552 < len__5835__auto___8551) {
      args8545.push(arguments[i__5836__auto___8552]);
      var G__8553 = i__5836__auto___8552 + 1;
      i__5836__auto___8552 = G__8553;
      continue;
    } else {
    }
    break;
  }
  var G__8550 = args8545.length;
  switch(G__8550) {
    case 1:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8545.slice(2), 0);
      return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return -x;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x - y;
};
cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int, x - y, more);
};
cljs.core.unchecked_subtract_int.cljs$lang$applyTo = function(seq8546) {
  var G__8547 = cljs.core.first(seq8546);
  var seq8546__$1 = cljs.core.next(seq8546);
  var G__8548 = cljs.core.first(seq8546__$1);
  var seq8546__$2 = cljs.core.next(seq8546__$1);
  return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__8547, G__8548, seq8546__$2);
};
cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
cljs.core.fix = function cljs$core$fix(q) {
  if (q >= 0) {
    return Math.floor(q);
  } else {
    return Math.ceil(q);
  }
};
cljs.core.int$ = function cljs$core$int(x) {
  return x | 0;
};
cljs.core.unchecked_int = function cljs$core$unchecked_int(x) {
  return cljs.core.fix(x);
};
cljs.core.long$ = function cljs$core$long(x) {
  return cljs.core.fix(x);
};
cljs.core.unchecked_long = function cljs$core$unchecked_long(x) {
  return cljs.core.fix(x);
};
cljs.core.booleans = function cljs$core$booleans(x) {
  return x;
};
cljs.core.bytes = function cljs$core$bytes(x) {
  return x;
};
cljs.core.chars = function cljs$core$chars(x) {
  return x;
};
cljs.core.shorts = function cljs$core$shorts(x) {
  return x;
};
cljs.core.ints = function cljs$core$ints(x) {
  return x;
};
cljs.core.floats = function cljs$core$floats(x) {
  return x;
};
cljs.core.doubles = function cljs$core$doubles(x) {
  return x;
};
cljs.core.longs = function cljs$core$longs(x) {
  return x;
};
cljs.core.js_mod = function cljs$core$js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function cljs$core$mod(n, d) {
  return (n % d + d) % d;
};
cljs.core.quot = function cljs$core$quot(n, d) {
  var rem = n % d;
  return cljs.core.fix((n - rem) / d);
};
cljs.core.rem = function cljs$core$rem(n, d) {
  var q = cljs.core.quot(n, d);
  return n - d * q;
};
cljs.core.bit_xor = function cljs$core$bit_xor(var_args) {
  var args8555 = [];
  var len__5835__auto___8561 = arguments.length;
  var i__5836__auto___8562 = 0;
  while (true) {
    if (i__5836__auto___8562 < len__5835__auto___8561) {
      args8555.push(arguments[i__5836__auto___8562]);
      var G__8563 = i__5836__auto___8562 + 1;
      i__5836__auto___8562 = G__8563;
      continue;
    } else {
    }
    break;
  }
  var G__8560 = args8555.length;
  switch(G__8560) {
    case 2:
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8555.slice(2), 0);
      return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x ^ y;
};
cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor, x ^ y, more);
};
cljs.core.bit_xor.cljs$lang$applyTo = function(seq8556) {
  var G__8557 = cljs.core.first(seq8556);
  var seq8556__$1 = cljs.core.next(seq8556);
  var G__8558 = cljs.core.first(seq8556__$1);
  var seq8556__$2 = cljs.core.next(seq8556__$1);
  return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__8557, G__8558, seq8556__$2);
};
cljs.core.bit_xor.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and = function cljs$core$bit_and(var_args) {
  var args8565 = [];
  var len__5835__auto___8571 = arguments.length;
  var i__5836__auto___8572 = 0;
  while (true) {
    if (i__5836__auto___8572 < len__5835__auto___8571) {
      args8565.push(arguments[i__5836__auto___8572]);
      var G__8573 = i__5836__auto___8572 + 1;
      i__5836__auto___8572 = G__8573;
      continue;
    } else {
    }
    break;
  }
  var G__8570 = args8565.length;
  switch(G__8570) {
    case 2:
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8565.slice(2), 0);
      return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & y;
};
cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and, x & y, more);
};
cljs.core.bit_and.cljs$lang$applyTo = function(seq8566) {
  var G__8567 = cljs.core.first(seq8566);
  var seq8566__$1 = cljs.core.next(seq8566);
  var G__8568 = cljs.core.first(seq8566__$1);
  var seq8566__$2 = cljs.core.next(seq8566__$1);
  return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__8567, G__8568, seq8566__$2);
};
cljs.core.bit_and.cljs$lang$maxFixedArity = 2;
cljs.core.bit_or = function cljs$core$bit_or(var_args) {
  var args8575 = [];
  var len__5835__auto___8581 = arguments.length;
  var i__5836__auto___8582 = 0;
  while (true) {
    if (i__5836__auto___8582 < len__5835__auto___8581) {
      args8575.push(arguments[i__5836__auto___8582]);
      var G__8583 = i__5836__auto___8582 + 1;
      i__5836__auto___8582 = G__8583;
      continue;
    } else {
    }
    break;
  }
  var G__8580 = args8575.length;
  switch(G__8580) {
    case 2:
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8575.slice(2), 0);
      return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x | y;
};
cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or, x | y, more);
};
cljs.core.bit_or.cljs$lang$applyTo = function(seq8576) {
  var G__8577 = cljs.core.first(seq8576);
  var seq8576__$1 = cljs.core.next(seq8576);
  var G__8578 = cljs.core.first(seq8576__$1);
  var seq8576__$2 = cljs.core.next(seq8576__$1);
  return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__8577, G__8578, seq8576__$2);
};
cljs.core.bit_or.cljs$lang$maxFixedArity = 2;
cljs.core.bit_and_not = function cljs$core$bit_and_not(var_args) {
  var args8585 = [];
  var len__5835__auto___8591 = arguments.length;
  var i__5836__auto___8592 = 0;
  while (true) {
    if (i__5836__auto___8592 < len__5835__auto___8591) {
      args8585.push(arguments[i__5836__auto___8592]);
      var G__8593 = i__5836__auto___8592 + 1;
      i__5836__auto___8592 = G__8593;
      continue;
    } else {
    }
    break;
  }
  var G__8590 = args8585.length;
  switch(G__8590) {
    case 2:
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8585.slice(2), 0);
      return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return x & ~y;
};
cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not, x & ~y, more);
};
cljs.core.bit_and_not.cljs$lang$applyTo = function(seq8586) {
  var G__8587 = cljs.core.first(seq8586);
  var seq8586__$1 = cljs.core.next(seq8586);
  var G__8588 = cljs.core.first(seq8586__$1);
  var seq8586__$2 = cljs.core.next(seq8586__$1);
  return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__8587, G__8588, seq8586__$2);
};
cljs.core.bit_and_not.cljs$lang$maxFixedArity = 2;
cljs.core.bit_clear = function cljs$core$bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function cljs$core$bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function cljs$core$bit_not(x) {
  return ~x;
};
cljs.core.bit_set = function cljs$core$bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function cljs$core$bit_test(x, n) {
  return (x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function cljs$core$bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function cljs$core$bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function cljs$core$bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function cljs$core$unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function cljs$core$bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return (v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function cljs$core$_EQ__EQ_(var_args) {
  var args8595 = [];
  var len__5835__auto___8601 = arguments.length;
  var i__5836__auto___8602 = 0;
  while (true) {
    if (i__5836__auto___8602 < len__5835__auto___8601) {
      args8595.push(arguments[i__5836__auto___8602]);
      var G__8603 = i__5836__auto___8602 + 1;
      i__5836__auto___8602 = G__8603;
      continue;
    } else {
    }
    break;
  }
  var G__8600 = args8595.length;
  switch(G__8600) {
    case 1:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8595.slice(2), 0);
      return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return true;
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return cljs.core._equiv(x, y);
};
cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  while (true) {
    if (x === y) {
      if (cljs.core.next(more)) {
        var G__8605 = y;
        var G__8606 = cljs.core.first(more);
        var G__8607 = cljs.core.next(more);
        x = G__8605;
        y = G__8606;
        more = G__8607;
        continue;
      } else {
        return y === cljs.core.first(more);
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core._EQ__EQ_.cljs$lang$applyTo = function(seq8596) {
  var G__8597 = cljs.core.first(seq8596);
  var seq8596__$1 = cljs.core.next(seq8596);
  var G__8598 = cljs.core.first(seq8596__$1);
  var seq8596__$2 = cljs.core.next(seq8596__$1);
  return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8597, G__8598, seq8596__$2);
};
cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.pos_QMARK_ = function cljs$core$pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function cljs$core$zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function cljs$core$neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function cljs$core$nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq(coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__8608 = n__$1 - 1;
      var G__8609 = cljs.core.next(xs);
      n__$1 = G__8608;
      xs = G__8609;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function cljs$core$str(var_args) {
  var args8610 = [];
  var len__5835__auto___8615 = arguments.length;
  var i__5836__auto___8616 = 0;
  while (true) {
    if (i__5836__auto___8616 < len__5835__auto___8615) {
      args8610.push(arguments[i__5836__auto___8616]);
      var G__8617 = i__5836__auto___8616 + 1;
      i__5836__auto___8616 = G__8617;
      continue;
    } else {
    }
    break;
  }
  var G__8614 = args8610.length;
  switch(G__8614) {
    case 0:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8610.slice(1), 0);
      return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5854__auto__);
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$0 = function() {
  return "";
};
cljs.core.str.cljs$core$IFn$_invoke$arity$1 = function(x) {
  if (x == null) {
    return "";
  } else {
    return [x].join("");
  }
};
cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = function(x, ys) {
  var sb = new goog.string.StringBuffer([cljs.core.str(x)].join(""));
  var more = ys;
  while (true) {
    if (cljs.core.truth_(more)) {
      var G__8619 = sb.append([cljs.core.str(cljs.core.first(more))].join(""));
      var G__8620 = cljs.core.next(more);
      sb = G__8619;
      more = G__8620;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
cljs.core.str.cljs$lang$applyTo = function(seq8611) {
  var G__8612 = cljs.core.first(seq8611);
  var seq8611__$1 = cljs.core.next(seq8611);
  return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__8612, seq8611__$1);
};
cljs.core.str.cljs$lang$maxFixedArity = 1;
cljs.core.subs = function cljs$core$subs(var_args) {
  var args8621 = [];
  var len__5835__auto___8624 = arguments.length;
  var i__5836__auto___8625 = 0;
  while (true) {
    if (i__5836__auto___8625 < len__5835__auto___8624) {
      args8621.push(arguments[i__5836__auto___8625]);
      var G__8626 = i__5836__auto___8625 + 1;
      i__5836__auto___8625 = G__8626;
      continue;
    } else {
    }
    break;
  }
  var G__8623 = args8621.length;
  switch(G__8623) {
    case 2:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subs.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8621.length)].join(""));;
  }
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = function(s, start) {
  return s.substring(start);
};
cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = function(s, start, end) {
  return s.substring(start, end);
};
cljs.core.subs.cljs$lang$maxFixedArity = 3;
cljs.core.map;
cljs.core.name;
cljs.core.equiv_sequential = function cljs$core$equiv_sequential(x, y) {
  return cljs.core.boolean$(cljs.core.sequential_QMARK_(y) ? cljs.core.counted_QMARK_(x) && cljs.core.counted_QMARK_(y) && !(cljs.core.count(x) === cljs.core.count(y)) ? false : function() {
    var xs = cljs.core.seq(x);
    var ys = cljs.core.seq(y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs), cljs.core.first(ys))) {
            var G__8628 = cljs.core.next(xs);
            var G__8629 = cljs.core.next(ys);
            xs = G__8628;
            ys = G__8629;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function cljs$core$hash_coll(coll) {
  if (cljs.core.seq(coll)) {
    var res = cljs.core.hash(cljs.core.first(coll));
    var s = cljs.core.next(coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__8630 = cljs.core.hash_combine(res, cljs.core.hash(cljs.core.first(s)));
        var G__8631 = cljs.core.next(s);
        res = G__8630;
        s = G__8631;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.key;
cljs.core.val;
cljs.core.hash_imap = function cljs$core$hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq(m);
  while (true) {
    if (s) {
      var e = cljs.core.first(s);
      var G__8632 = (h + (cljs.core.hash(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e)) ^ cljs.core.hash(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__8633 = cljs.core.next(s);
      h = G__8632;
      s = G__8633;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function cljs$core$hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq(s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first(s__$1);
      var G__8634 = (h + cljs.core.hash(e)) % 4503599627370496;
      var G__8635 = cljs.core.next(s__$1);
      h = G__8634;
      s__$1 = G__8635;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.name;
cljs.core.chunk_first;
cljs.core.chunk_rest;
cljs.core.extend_object_BANG_ = function cljs$core$extend_object_BANG_(obj, fn_map) {
  var seq__8642_8648 = cljs.core.seq(fn_map);
  var chunk__8643_8649 = null;
  var count__8644_8650 = 0;
  var i__8645_8651 = 0;
  while (true) {
    if (i__8645_8651 < count__8644_8650) {
      var vec__8646_8652 = chunk__8643_8649.cljs$core$IIndexed$_nth$arity$2(null, i__8645_8651);
      var key_name_8653 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8646_8652, 0, null);
      var f_8654 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8646_8652, 1, null);
      var str_name_8655 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_8653) : cljs.core.name.call(null, key_name_8653);
      obj[str_name_8655] = f_8654;
      var G__8656 = seq__8642_8648;
      var G__8657 = chunk__8643_8649;
      var G__8658 = count__8644_8650;
      var G__8659 = i__8645_8651 + 1;
      seq__8642_8648 = G__8656;
      chunk__8643_8649 = G__8657;
      count__8644_8650 = G__8658;
      i__8645_8651 = G__8659;
      continue;
    } else {
      var temp__4425__auto___8660 = cljs.core.seq(seq__8642_8648);
      if (temp__4425__auto___8660) {
        var seq__8642_8661__$1 = temp__4425__auto___8660;
        if (cljs.core.chunked_seq_QMARK_(seq__8642_8661__$1)) {
          var c__5580__auto___8662 = cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__8642_8661__$1) : cljs.core.chunk_first.call(null, seq__8642_8661__$1);
          var G__8663 = cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__8642_8661__$1) : cljs.core.chunk_rest.call(null, seq__8642_8661__$1);
          var G__8664 = c__5580__auto___8662;
          var G__8665 = cljs.core.count(c__5580__auto___8662);
          var G__8666 = 0;
          seq__8642_8648 = G__8663;
          chunk__8643_8649 = G__8664;
          count__8644_8650 = G__8665;
          i__8645_8651 = G__8666;
          continue;
        } else {
          var vec__8647_8667 = cljs.core.first(seq__8642_8661__$1);
          var key_name_8668 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8647_8667, 0, null);
          var f_8669 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__8647_8667, 1, null);
          var str_name_8670 = cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_8668) : cljs.core.name.call(null, key_name_8668);
          obj[str_name_8670] = f_8669;
          var G__8671 = cljs.core.next(seq__8642_8661__$1);
          var G__8672 = null;
          var G__8673 = 0;
          var G__8674 = 0;
          seq__8642_8648 = G__8671;
          chunk__8643_8649 = G__8672;
          count__8644_8650 = G__8673;
          i__8645_8651 = G__8674;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest(coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.List.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$first, cljs.core.cst$sym$rest, cljs.core.cst$sym$count, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/List");
};
cljs.core.__GT_List = function cljs$core$__GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.list_QMARK_ = function cljs$core$list_QMARK_(x) {
  if (!(x == null)) {
    if (x.cljs$lang$protocol_mask$partition0$ & 33554432 || x.cljs$core$IList$) {
      return true;
    } else {
      if (!x.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IList, x);
  }
};
cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.empty_ordered_hash;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.list_QMARK_(other) || cljs.core.sequential_QMARK_(other)) {
    return cljs.core.seq(other) == null;
  } else {
    return false;
  }
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.EmptyList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null);
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/EmptyList");
};
cljs.core.__GT_EmptyList = function cljs$core$__GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.reversible_QMARK_ = function cljs$core$reversible_QMARK_(coll) {
  if (!(coll == null)) {
    if (coll.cljs$lang$protocol_mask$partition0$ & 134217728 || coll.cljs$core$IReversible$) {
      return true;
    } else {
      if (!coll.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible, coll);
  }
};
cljs.core.rseq = function cljs$core$rseq(coll) {
  return cljs.core._rseq(coll);
};
cljs.core.reverse = function cljs$core$reverse(coll) {
  if (cljs.core.reversible_QMARK_(coll)) {
    return cljs.core.rseq(coll);
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function cljs$core$list(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___8680 = arguments.length;
  var i__5836__auto___8681 = 0;
  while (true) {
    if (i__5836__auto___8681 < len__5835__auto___8680) {
      args__5842__auto__.push(arguments[i__5836__auto___8681]);
      var G__8682 = i__5836__auto___8681 + 1;
      i__5836__auto___8681 = G__8682;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = function(xs) {
  var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
    var arr = [];
    var xs__$1 = xs;
    while (true) {
      if (!(xs__$1 == null)) {
        arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));
        var G__8683 = xs__$1.cljs$core$INext$_next$arity$1(null);
        xs__$1 = G__8683;
        continue;
      } else {
        return arr;
      }
      break;
    }
  }();
  var i = arr.length;
  var r = cljs.core.List.EMPTY;
  while (true) {
    if (i > 0) {
      var G__8684 = i - 1;
      var G__8685 = r.cljs$core$ICollection$_conj$arity$2(null, arr[i - 1]);
      i = G__8684;
      r = G__8685;
      continue;
    } else {
      return r;
    }
    break;
  }
};
cljs.core.list.cljs$lang$maxFixedArity = 0;
cljs.core.list.cljs$lang$applyTo = function(seq8679) {
  return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq8679));
};
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq(self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.Cons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$first, cljs.core.cst$sym$rest, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Cons");
};
cljs.core.__GT_Cons = function cljs$core$__GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.cons = function cljs$core$cons(x, coll) {
  if (function() {
    var or__4777__auto__ = coll == null;
    if (or__4777__auto__) {
      return or__4777__auto__;
    } else {
      if (!(coll == null)) {
        if (coll.cljs$lang$protocol_mask$partition0$ & 64 || coll.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq(coll), null);
  }
};
cljs.core.hash_keyword = function cljs$core$hash_keyword(k) {
  return cljs.core.hash_symbol(k) + 2654435769 | 0;
};
cljs.core.compare_keywords = function cljs$core$compare_keywords(a, b) {
  if (a.fqn === b.fqn) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__4765__auto__ = cljs.core.not(a.ns);
      if (and__4765__auto__) {
        return b.ns;
      } else {
        return and__4765__auto__;
      }
    }())) {
      return -1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not(b.ns)) {
          return 1;
        } else {
          var nsc = function() {
            var G__8696 = a.ns;
            var G__8697 = b.ns;
            return goog.array.defaultCompare(G__8696, G__8697);
          }();
          if (0 === nsc) {
            var G__8698 = a.name;
            var G__8699 = b.name;
            return goog.array.defaultCompare(G__8698, G__8699);
          } else {
            return nsc;
          }
        }
      } else {
        var G__8700 = a.name;
        var G__8701 = b.name;
        return goog.array.defaultCompare(G__8700, G__8701);
      }
    }
  }
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(":"), cljs.core.str(self__.fqn)].join("");
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__8703 = null;
  var G__8703__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
  };
  var G__8703__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
  };
  G__8703 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__8703__2.call(this, self__, coll);
      case 3:
        return G__8703__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__8703.cljs$core$IFn$_invoke$arity$2 = G__8703__2;
  G__8703.cljs$core$IFn$_invoke$arity$3 = G__8703__3;
  return G__8703;
}();
cljs.core.Keyword.prototype.apply = function(self__, args8702) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args8702)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__5212__auto__ = self__._hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_keyword(this$__$1);
    self__._hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write(writer, [cljs.core.str(":"), cljs.core.str(self__.fqn)].join(""));
};
cljs.core.Keyword.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns, cljs.core.cst$sym$name, cljs.core.cst$sym$fqn, cljs.core.with_meta(cljs.core.cst$sym$_hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Keyword");
};
cljs.core.__GT_Keyword = function cljs$core$__GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function cljs$core$keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function cljs$core$keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.symbol_identical_QMARK_ = function cljs$core$symbol_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Symbol && y instanceof cljs.core.Symbol) {
      return x.str === y.str;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function cljs$core$namespace(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_namespace$arity$1(null);
  } else {
    throw new Error([cljs.core.str("Doesn't support namespace: "), cljs.core.str(x)].join(""));
  }
};
cljs.core.keyword = function cljs$core$keyword(var_args) {
  var args8706 = [];
  var len__5835__auto___8709 = arguments.length;
  var i__5836__auto___8710 = 0;
  while (true) {
    if (i__5836__auto___8710 < len__5835__auto___8709) {
      args8706.push(arguments[i__5836__auto___8710]);
      var G__8711 = i__5836__auto___8710 + 1;
      i__5836__auto___8710 = G__8711;
      continue;
    } else {
    }
    break;
  }
  var G__8708 = args8706.length;
  switch(G__8708) {
    case 1:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8706.length)].join(""));;
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = function(name) {
  if (name instanceof cljs.core.Keyword) {
    return name;
  } else {
    if (name instanceof cljs.core.Symbol) {
      return new cljs.core.Keyword(cljs.core.namespace(name), cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null, name), name.str, null);
    } else {
      if (typeof name === "string") {
        var parts = name.split("/");
        if (parts.length === 2) {
          return new cljs.core.Keyword(parts[0], parts[1], name, null);
        } else {
          return new cljs.core.Keyword(null, parts[0], name, null);
        }
      } else {
        return null;
      }
    }
  }
};
cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = function(ns, name) {
  return new cljs.core.Keyword(ns, name, [cljs.core.str(cljs.core.truth_(ns) ? [cljs.core.str(ns), cljs.core.str("/")].join("") : null), cljs.core.str(name)].join(""), null);
};
cljs.core.keyword.cljs$lang$maxFixedArity = 2;
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq(coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest(self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__8713 = ls.sval();
        ls = G__8713;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq(self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.LazySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.with_meta(cljs.core.cst$sym$fn, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$s, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/LazySeq");
};
cljs.core.__GT_LazySeq = function cljs$core$__GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.ArrayChunk;
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 2;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$end, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.__GT_ChunkBuffer = function cljs$core$__GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function cljs$core$chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr, cljs.core.cst$sym$off, cljs.core.cst$sym$end], null);
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ArrayChunk");
};
cljs.core.__GT_ArrayChunk = function cljs$core$__GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function cljs$core$array_chunk(var_args) {
  var args8714 = [];
  var len__5835__auto___8717 = arguments.length;
  var i__5836__auto___8718 = 0;
  while (true) {
    if (i__5836__auto___8718 < len__5835__auto___8717) {
      args8714.push(arguments[i__5836__auto___8718]);
      var G__8719 = i__5836__auto___8718 + 1;
      i__5836__auto___8718 = G__8719;
      continue;
    } else {
    }
    break;
  }
  var G__8716 = args8714.length;
  switch(G__8716) {
    case 1:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8714.length)].join(""));;
  }
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = function(arr) {
  return new cljs.core.ArrayChunk(arr, 0, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = function(arr, off) {
  return new cljs.core.ArrayChunk(arr, off, arr.length);
};
cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = function(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq(self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count(self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk, cljs.core.cst$sym$more, cljs.core.cst$sym$meta, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ChunkedCons");
};
cljs.core.__GT_ChunkedCons = function cljs$core$__GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.chunk_cons = function cljs$core$chunk_cons(chunk, rest) {
  if (cljs.core._count(chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function cljs$core$chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function cljs$core$chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function cljs$core$chunk_first(s) {
  return cljs.core._chunked_first(s);
};
cljs.core.chunk_rest = function cljs$core$chunk_rest(s) {
  return cljs.core._chunked_rest(s);
};
cljs.core.chunk_next = function cljs$core$chunk_next(s) {
  if (!(s == null) ? s.cljs$lang$protocol_mask$partition1$ & 1024 || s.cljs$core$IChunkedNext$ ? true : false : false) {
    return cljs.core._chunked_next(s);
  } else {
    return cljs.core.seq(cljs.core._chunked_rest(s));
  }
};
cljs.core.to_array = function cljs$core$to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq(s__$1)) {
      ary.push(cljs.core.first(s__$1));
      var G__8723 = cljs.core.next(s__$1);
      s__$1 = G__8723;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function cljs$core$to_array_2d(coll) {
  var ret = new Array(cljs.core.count(coll));
  var i_8724 = 0;
  var xs_8725 = cljs.core.seq(coll);
  while (true) {
    if (xs_8725) {
      ret[i_8724] = cljs.core.to_array(cljs.core.first(xs_8725));
      var G__8726 = i_8724 + 1;
      var G__8727 = cljs.core.next(xs_8725);
      i_8724 = G__8726;
      xs_8725 = G__8727;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function cljs$core$int_array(var_args) {
  var args8728 = [];
  var len__5835__auto___8731 = arguments.length;
  var i__5836__auto___8732 = 0;
  while (true) {
    if (i__5836__auto___8732 < len__5835__auto___8731) {
      args8728.push(arguments[i__5836__auto___8732]);
      var G__8733 = i__5836__auto___8732 + 1;
      i__5836__auto___8732 = G__8733;
      continue;
    } else {
    }
    break;
  }
  var G__8730 = args8728.length;
  switch(G__8730) {
    case 1:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8728.length)].join(""));;
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__8735 = i + 1;
        var G__8736 = cljs.core.next(s__$1);
        i = G__8735;
        s__$1 = G__8736;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5680__auto___8737 = size;
    var i_8738 = 0;
    while (true) {
      if (i_8738 < n__5680__auto___8737) {
        a[i_8738] = init_val_or_seq;
        var G__8739 = i_8738 + 1;
        i_8738 = G__8739;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.int_array.cljs$lang$maxFixedArity = 2;
cljs.core.long_array = function cljs$core$long_array(var_args) {
  var args8740 = [];
  var len__5835__auto___8743 = arguments.length;
  var i__5836__auto___8744 = 0;
  while (true) {
    if (i__5836__auto___8744 < len__5835__auto___8743) {
      args8740.push(arguments[i__5836__auto___8744]);
      var G__8745 = i__5836__auto___8744 + 1;
      i__5836__auto___8744 = G__8745;
      continue;
    } else {
    }
    break;
  }
  var G__8742 = args8740.length;
  switch(G__8742) {
    case 1:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8740.length)].join(""));;
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__8747 = i + 1;
        var G__8748 = cljs.core.next(s__$1);
        i = G__8747;
        s__$1 = G__8748;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5680__auto___8749 = size;
    var i_8750 = 0;
    while (true) {
      if (i_8750 < n__5680__auto___8749) {
        a[i_8750] = init_val_or_seq;
        var G__8751 = i_8750 + 1;
        i_8750 = G__8751;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.long_array.cljs$lang$maxFixedArity = 2;
cljs.core.double_array = function cljs$core$double_array(var_args) {
  var args8752 = [];
  var len__5835__auto___8755 = arguments.length;
  var i__5836__auto___8756 = 0;
  while (true) {
    if (i__5836__auto___8756 < len__5835__auto___8755) {
      args8752.push(arguments[i__5836__auto___8756]);
      var G__8757 = i__5836__auto___8756 + 1;
      i__5836__auto___8756 = G__8757;
      continue;
    } else {
    }
    break;
  }
  var G__8754 = args8752.length;
  switch(G__8754) {
    case 1:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8752.length)].join(""));;
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__8759 = i + 1;
        var G__8760 = cljs.core.next(s__$1);
        i = G__8759;
        s__$1 = G__8760;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5680__auto___8761 = size;
    var i_8762 = 0;
    while (true) {
      if (i_8762 < n__5680__auto___8761) {
        a[i_8762] = init_val_or_seq;
        var G__8763 = i_8762 + 1;
        i_8762 = G__8763;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.double_array.cljs$lang$maxFixedArity = 2;
cljs.core.object_array = function cljs$core$object_array(var_args) {
  var args8764 = [];
  var len__5835__auto___8767 = arguments.length;
  var i__5836__auto___8768 = 0;
  while (true) {
    if (i__5836__auto___8768 < len__5835__auto___8767) {
      args8764.push(arguments[i__5836__auto___8768]);
      var G__8769 = i__5836__auto___8768 + 1;
      i__5836__auto___8768 = G__8769;
      continue;
    } else {
    }
    break;
  }
  var G__8766 = args8764.length;
  switch(G__8766) {
    case 1:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8764.length)].join(""));;
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = function(size_or_seq) {
  if (typeof size_or_seq === "number") {
    return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq, null);
  } else {
    return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
  }
};
cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = function(size, init_val_or_seq) {
  var a = new Array(size);
  if (cljs.core.seq_QMARK_(init_val_or_seq)) {
    var s = cljs.core.seq(init_val_or_seq);
    var i = 0;
    var s__$1 = s;
    while (true) {
      if (s__$1 && i < size) {
        a[i] = cljs.core.first(s__$1);
        var G__8771 = i + 1;
        var G__8772 = cljs.core.next(s__$1);
        i = G__8771;
        s__$1 = G__8772;
        continue;
      } else {
        return a;
      }
      break;
    }
  } else {
    var n__5680__auto___8773 = size;
    var i_8774 = 0;
    while (true) {
      if (i_8774 < n__5680__auto___8773) {
        a[i_8774] = init_val_or_seq;
        var G__8775 = i_8774 + 1;
        i_8774 = G__8775;
        continue;
      } else {
      }
      break;
    }
    return a;
  }
};
cljs.core.object_array.cljs$lang$maxFixedArity = 2;
cljs.core.bounded_count = function cljs$core$bounded_count(s, n) {
  if (cljs.core.counted_QMARK_(s)) {
    return cljs.core.count(s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq(s__$1)) {
        var G__8776 = cljs.core.next(s__$1);
        var G__8777 = i - 1;
        var G__8778 = sum + 1;
        s__$1 = G__8776;
        i = G__8777;
        sum = G__8778;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function cljs$core$spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next(arglist) == null) {
      return cljs.core.seq(cljs.core.first(arglist));
    } else {
      return cljs.core.cons(cljs.core.first(arglist), cljs$core$spread(cljs.core.next(arglist)));
    }
  }
};
cljs.core.concat = function cljs$core$concat(var_args) {
  var args8780 = [];
  var len__5835__auto___8792 = arguments.length;
  var i__5836__auto___8793 = 0;
  while (true) {
    if (i__5836__auto___8793 < len__5835__auto___8792) {
      args8780.push(arguments[i__5836__auto___8793]);
      var G__8794 = i__5836__auto___8793 + 1;
      i__5836__auto___8793 = G__8794;
      continue;
    } else {
    }
    break;
  }
  var G__8785 = args8780.length;
  switch(G__8785) {
    case 0:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8780.slice(2), 0);
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = function() {
  return new cljs.core.LazySeq(null, function() {
    return null;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return x;
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return new cljs.core.LazySeq(null, function() {
    var s = cljs.core.seq(x);
    if (s) {
      if (cljs.core.chunked_seq_QMARK_(s)) {
        return cljs.core.chunk_cons(cljs.core.chunk_first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s), y));
      } else {
        return cljs.core.cons(cljs.core.first(s), cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s), y));
      }
    } else {
      return y;
    }
  }, null, null);
};
cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = function(x, y, zs) {
  var cat = function cljs$core$cat(xys, zs__$1) {
    return new cljs.core.LazySeq(null, function() {
      var xys__$1 = cljs.core.seq(xys);
      if (xys__$1) {
        if (cljs.core.chunked_seq_QMARK_(xys__$1)) {
          return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1), cljs$core$cat(cljs.core.chunk_rest(xys__$1), zs__$1));
        } else {
          return cljs.core.cons(cljs.core.first(xys__$1), cljs$core$cat(cljs.core.rest(xys__$1), zs__$1));
        }
      } else {
        if (cljs.core.truth_(zs__$1)) {
          return cljs$core$cat(cljs.core.first(zs__$1), cljs.core.next(zs__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x, y), zs);
};
cljs.core.concat.cljs$lang$applyTo = function(seq8781) {
  var G__8782 = cljs.core.first(seq8781);
  var seq8781__$1 = cljs.core.next(seq8781);
  var G__8783 = cljs.core.first(seq8781__$1);
  var seq8781__$2 = cljs.core.next(seq8781__$1);
  return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__8782, G__8783, seq8781__$2);
};
cljs.core.concat.cljs$lang$maxFixedArity = 2;
cljs.core.list_STAR_ = function cljs$core$list_STAR_(var_args) {
  var args8796 = [];
  var len__5835__auto___8804 = arguments.length;
  var i__5836__auto___8805 = 0;
  while (true) {
    if (i__5836__auto___8805 < len__5835__auto___8804) {
      args8796.push(arguments[i__5836__auto___8805]);
      var G__8806 = i__5836__auto___8805 + 1;
      i__5836__auto___8805 = G__8806;
      continue;
    } else {
    }
    break;
  }
  var G__8803 = args8796.length;
  switch(G__8803) {
    case 1:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8796.slice(4), 0);
      return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5854__auto__);
  }
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = function(args) {
  return cljs.core.seq(args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = function(a, args) {
  return cljs.core.cons(a, args);
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = function(a, b, args) {
  return cljs.core.cons(a, cljs.core.cons(b, args));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, args) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, args)));
};
cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = function(a, b, c, d, more) {
  return cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(more)))));
};
cljs.core.list_STAR_.cljs$lang$applyTo = function(seq8797) {
  var G__8798 = cljs.core.first(seq8797);
  var seq8797__$1 = cljs.core.next(seq8797);
  var G__8799 = cljs.core.first(seq8797__$1);
  var seq8797__$2 = cljs.core.next(seq8797__$1);
  var G__8800 = cljs.core.first(seq8797__$2);
  var seq8797__$3 = cljs.core.next(seq8797__$2);
  var G__8801 = cljs.core.first(seq8797__$3);
  var seq8797__$4 = cljs.core.next(seq8797__$3);
  return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__8798, G__8799, G__8800, G__8801, seq8797__$4);
};
cljs.core.list_STAR_.cljs$lang$maxFixedArity = 4;
cljs.core.transient$ = function cljs$core$transient(coll) {
  return cljs.core._as_transient(coll);
};
cljs.core.persistent_BANG_ = function cljs$core$persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_(tcoll);
};
cljs.core.conj_BANG_ = function cljs$core$conj_BANG_(var_args) {
  var args8808 = [];
  var len__5835__auto___8814 = arguments.length;
  var i__5836__auto___8815 = 0;
  while (true) {
    if (i__5836__auto___8815 < len__5835__auto___8814) {
      args8808.push(arguments[i__5836__auto___8815]);
      var G__8816 = i__5836__auto___8815 + 1;
      i__5836__auto___8815 = G__8816;
      continue;
    } else {
    }
    break;
  }
  var G__8813 = args8808.length;
  switch(G__8813) {
    case 0:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8808.slice(2), 0);
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return coll;
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._conj_BANG_(tcoll, val);
};
cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._conj_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__8818 = ntcoll;
      var G__8819 = cljs.core.first(vals);
      var G__8820 = cljs.core.next(vals);
      tcoll = G__8818;
      val = G__8819;
      vals = G__8820;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.conj_BANG_.cljs$lang$applyTo = function(seq8809) {
  var G__8810 = cljs.core.first(seq8809);
  var seq8809__$1 = cljs.core.next(seq8809);
  var G__8811 = cljs.core.first(seq8809__$1);
  var seq8809__$2 = cljs.core.next(seq8809__$1);
  return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8810, G__8811, seq8809__$2);
};
cljs.core.conj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.assoc_BANG_ = function cljs$core$assoc_BANG_(var_args) {
  var args8821 = [];
  var len__5835__auto___8828 = arguments.length;
  var i__5836__auto___8829 = 0;
  while (true) {
    if (i__5836__auto___8829 < len__5835__auto___8828) {
      args8821.push(arguments[i__5836__auto___8829]);
      var G__8830 = i__5836__auto___8829 + 1;
      i__5836__auto___8829 = G__8830;
      continue;
    } else {
    }
    break;
  }
  var G__8827 = args8821.length;
  switch(G__8827) {
    case 3:
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8821.slice(3), 0);
      return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5854__auto__);
  }
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = function(tcoll, key, val) {
  return cljs.core._assoc_BANG_(tcoll, key, val);
};
cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, val, kvs) {
  while (true) {
    var ntcoll = cljs.core._assoc_BANG_(tcoll, key, val);
    if (cljs.core.truth_(kvs)) {
      var G__8832 = ntcoll;
      var G__8833 = cljs.core.first(kvs);
      var G__8834 = cljs.core.second(kvs);
      var G__8835 = cljs.core.nnext(kvs);
      tcoll = G__8832;
      key = G__8833;
      val = G__8834;
      kvs = G__8835;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.assoc_BANG_.cljs$lang$applyTo = function(seq8822) {
  var G__8823 = cljs.core.first(seq8822);
  var seq8822__$1 = cljs.core.next(seq8822);
  var G__8824 = cljs.core.first(seq8822__$1);
  var seq8822__$2 = cljs.core.next(seq8822__$1);
  var G__8825 = cljs.core.first(seq8822__$2);
  var seq8822__$3 = cljs.core.next(seq8822__$2);
  return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8823, G__8824, G__8825, seq8822__$3);
};
cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = 3;
cljs.core.dissoc_BANG_ = function cljs$core$dissoc_BANG_(var_args) {
  var args8836 = [];
  var len__5835__auto___8842 = arguments.length;
  var i__5836__auto___8843 = 0;
  while (true) {
    if (i__5836__auto___8843 < len__5835__auto___8842) {
      args8836.push(arguments[i__5836__auto___8843]);
      var G__8844 = i__5836__auto___8843 + 1;
      i__5836__auto___8843 = G__8844;
      continue;
    } else {
    }
    break;
  }
  var G__8841 = args8836.length;
  switch(G__8841) {
    case 2:
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8836.slice(2), 0);
      return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, key) {
  return cljs.core._dissoc_BANG_(tcoll, key);
};
cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, key, ks) {
  while (true) {
    var ntcoll = cljs.core._dissoc_BANG_(tcoll, key);
    if (cljs.core.truth_(ks)) {
      var G__8846 = ntcoll;
      var G__8847 = cljs.core.first(ks);
      var G__8848 = cljs.core.next(ks);
      tcoll = G__8846;
      key = G__8847;
      ks = G__8848;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.dissoc_BANG_.cljs$lang$applyTo = function(seq8837) {
  var G__8838 = cljs.core.first(seq8837);
  var seq8837__$1 = cljs.core.next(seq8837);
  var G__8839 = cljs.core.first(seq8837__$1);
  var seq8837__$2 = cljs.core.next(seq8837__$1);
  return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8838, G__8839, seq8837__$2);
};
cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.pop_BANG_ = function cljs$core$pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_(tcoll);
};
cljs.core.disj_BANG_ = function cljs$core$disj_BANG_(var_args) {
  var args8849 = [];
  var len__5835__auto___8855 = arguments.length;
  var i__5836__auto___8856 = 0;
  while (true) {
    if (i__5836__auto___8856 < len__5835__auto___8855) {
      args8849.push(arguments[i__5836__auto___8856]);
      var G__8857 = i__5836__auto___8856 + 1;
      i__5836__auto___8856 = G__8857;
      continue;
    } else {
    }
    break;
  }
  var G__8854 = args8849.length;
  switch(G__8854) {
    case 2:
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8849.slice(2), 0);
      return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = function(tcoll, val) {
  return cljs.core._disjoin_BANG_(tcoll, val);
};
cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(tcoll, val, vals) {
  while (true) {
    var ntcoll = cljs.core._disjoin_BANG_(tcoll, val);
    if (cljs.core.truth_(vals)) {
      var G__8859 = ntcoll;
      var G__8860 = cljs.core.first(vals);
      var G__8861 = cljs.core.next(vals);
      tcoll = G__8859;
      val = G__8860;
      vals = G__8861;
      continue;
    } else {
      return ntcoll;
    }
    break;
  }
};
cljs.core.disj_BANG_.cljs$lang$applyTo = function(seq8850) {
  var G__8851 = cljs.core.first(seq8850);
  var seq8850__$1 = cljs.core.next(seq8850);
  var G__8852 = cljs.core.first(seq8850__$1);
  var seq8850__$2 = cljs.core.next(seq8850__$1);
  return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__8851, G__8852, seq8850__$2);
};
cljs.core.disj_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.apply_to = function cljs$core$apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq(args);
  if (argc === 0) {
    return f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
  } else {
    var a5724 = cljs.core._first(args__$1);
    var args__$2 = cljs.core._rest(args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a5724);
      } else {
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a5724) : f.call(null, a5724);
      }
    } else {
      var b5725 = cljs.core._first(args__$2);
      var args__$3 = cljs.core._rest(args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a5724, b5725);
        } else {
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a5724, b5725) : f.call(null, a5724, b5725);
        }
      } else {
        var c5726 = cljs.core._first(args__$3);
        var args__$4 = cljs.core._rest(args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a5724, b5725, c5726);
          } else {
            return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a5724, b5725, c5726) : f.call(null, a5724, b5725, c5726);
          }
        } else {
          var d5727 = cljs.core._first(args__$4);
          var args__$5 = cljs.core._rest(args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a5724, b5725, c5726, d5727);
            } else {
              return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a5724, b5725, c5726, d5727) : f.call(null, a5724, b5725, c5726, d5727);
            }
          } else {
            var e5728 = cljs.core._first(args__$5);
            var args__$6 = cljs.core._rest(args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a5724, b5725, c5726, d5727, e5728);
              } else {
                return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a5724, b5725, c5726, d5727, e5728) : f.call(null, a5724, b5725, c5726, d5727, e5728);
              }
            } else {
              var f5729 = cljs.core._first(args__$6);
              var args__$7 = cljs.core._rest(args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a5724, b5725, c5726, d5727, e5728, f5729);
                } else {
                  return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a5724, b5725, c5726, d5727, e5728, f5729) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729);
                }
              } else {
                var g5730 = cljs.core._first(args__$7);
                var args__$8 = cljs.core._rest(args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a5724, b5725, c5726, d5727, e5728, f5729, g5730);
                  } else {
                    return f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a5724, b5725, c5726, d5727, e5728, f5729, g5730) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730);
                  }
                } else {
                  var h5731 = cljs.core._first(args__$8);
                  var args__$9 = cljs.core._rest(args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731);
                    } else {
                      return f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731);
                    }
                  } else {
                    var i5732 = cljs.core._first(args__$9);
                    var args__$10 = cljs.core._rest(args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732);
                      } else {
                        return f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732);
                      }
                    } else {
                      var j5733 = cljs.core._first(args__$10);
                      var args__$11 = cljs.core._rest(args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733);
                        } else {
                          return f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733);
                        }
                      } else {
                        var k5734 = cljs.core._first(args__$11);
                        var args__$12 = cljs.core._rest(args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734);
                          } else {
                            return f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734);
                          }
                        } else {
                          var l5735 = cljs.core._first(args__$12);
                          var args__$13 = cljs.core._rest(args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735);
                            } else {
                              return f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735);
                            }
                          } else {
                            var m5736 = cljs.core._first(args__$13);
                            var args__$14 = cljs.core._rest(args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736);
                              } else {
                                return f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736);
                              }
                            } else {
                              var n5737 = cljs.core._first(args__$14);
                              var args__$15 = cljs.core._rest(args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737);
                                } else {
                                  return f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737);
                                }
                              } else {
                                var o5738 = cljs.core._first(args__$15);
                                var args__$16 = cljs.core._rest(args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738);
                                  } else {
                                    return f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738);
                                  }
                                } else {
                                  var p5739 = cljs.core._first(args__$16);
                                  var args__$17 = cljs.core._rest(args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739);
                                    } else {
                                      return f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739);
                                    }
                                  } else {
                                    var q5740 = cljs.core._first(args__$17);
                                    var args__$18 = cljs.core._rest(args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740);
                                      } else {
                                        return f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740);
                                      }
                                    } else {
                                      var r5741 = cljs.core._first(args__$18);
                                      var args__$19 = cljs.core._rest(args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740, r5741);
                                        } else {
                                          return f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740, r5741) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740, r5741);
                                        }
                                      } else {
                                        var s5742 = cljs.core._first(args__$19);
                                        var args__$20 = cljs.core._rest(args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740, r5741, s5742);
                                          } else {
                                            return f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740, r5741, s5742) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740, r5741, s5742);
                                          }
                                        } else {
                                          var t5743 = cljs.core._first(args__$20);
                                          var args__$21 = cljs.core._rest(args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740, r5741, s5742, t5743);
                                            } else {
                                              return f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740, r5741, s5742, t5743) : f.call(null, a5724, b5725, c5726, d5727, e5728, f5729, g5730, h5731, i5732, j5733, k5734, l5735, m5736, n5737, o5738, p5739, q5740, r5741, s5742, t5743);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function cljs$core$apply(var_args) {
  var args8862 = [];
  var len__5835__auto___8871 = arguments.length;
  var i__5836__auto___8872 = 0;
  while (true) {
    if (i__5836__auto___8872 < len__5835__auto___8871) {
      args8862.push(arguments[i__5836__auto___8872]);
      var G__8873 = i__5836__auto___8872 + 1;
      i__5836__auto___8872 = G__8873;
      continue;
    } else {
    }
    break;
  }
  var G__8870 = args8862.length;
  switch(G__8870) {
    case 2:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8862.slice(5), 0);
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], argseq__5854__auto__);
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = function(f, args) {
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(args, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, args);
    } else {
      return f.cljs$lang$applyTo(args);
    }
  } else {
    return f.apply(f, cljs.core.to_array(args));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = function(f, x, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x, y, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = function(f, x, y, z, args) {
  var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x, y, z, args);
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = function(f, a, b, c, d, args) {
  var arglist = cljs.core.cons(a, cljs.core.cons(b, cljs.core.cons(c, cljs.core.cons(d, cljs.core.spread(args)))));
  var fixed_arity = f.cljs$lang$maxFixedArity;
  if (f.cljs$lang$applyTo) {
    var bc = cljs.core.bounded_count(arglist, fixed_arity + 1);
    if (bc <= fixed_arity) {
      return cljs.core.apply_to(f, bc, arglist);
    } else {
      return f.cljs$lang$applyTo(arglist);
    }
  } else {
    return f.apply(f, cljs.core.to_array(arglist));
  }
};
cljs.core.apply.cljs$lang$applyTo = function(seq8863) {
  var G__8864 = cljs.core.first(seq8863);
  var seq8863__$1 = cljs.core.next(seq8863);
  var G__8865 = cljs.core.first(seq8863__$1);
  var seq8863__$2 = cljs.core.next(seq8863__$1);
  var G__8866 = cljs.core.first(seq8863__$2);
  var seq8863__$3 = cljs.core.next(seq8863__$2);
  var G__8867 = cljs.core.first(seq8863__$3);
  var seq8863__$4 = cljs.core.next(seq8863__$3);
  var G__8868 = cljs.core.first(seq8863__$4);
  var seq8863__$5 = cljs.core.next(seq8863__$4);
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__8864, G__8865, G__8866, G__8867, G__8868, seq8863__$5);
};
cljs.core.apply.cljs$lang$maxFixedArity = 5;
cljs.core.vary_meta = function cljs$core$vary_meta(var_args) {
  var args8875 = [];
  var len__5835__auto___8900 = arguments.length;
  var i__5836__auto___8901 = 0;
  while (true) {
    if (i__5836__auto___8901 < len__5835__auto___8900) {
      args8875.push(arguments[i__5836__auto___8901]);
      var G__8902 = i__5836__auto___8901 + 1;
      i__5836__auto___8901 = G__8902;
      continue;
    } else {
    }
    break;
  }
  var G__8884 = args8875.length;
  switch(G__8884) {
    case 2:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8875.slice(6), 0);
      return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5854__auto__);
  }
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = function(obj, f) {
  return cljs.core.with_meta(obj, function() {
    var G__8885 = cljs.core.meta(obj);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8885) : f.call(null, G__8885);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = function(obj, f, a) {
  return cljs.core.with_meta(obj, function() {
    var G__8886 = cljs.core.meta(obj);
    var G__8887 = a;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__8886, G__8887) : f.call(null, G__8886, G__8887);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = function(obj, f, a, b) {
  return cljs.core.with_meta(obj, function() {
    var G__8888 = cljs.core.meta(obj);
    var G__8889 = a;
    var G__8890 = b;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__8888, G__8889, G__8890) : f.call(null, G__8888, G__8889, G__8890);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = function(obj, f, a, b, c) {
  return cljs.core.with_meta(obj, function() {
    var G__8891 = cljs.core.meta(obj);
    var G__8892 = a;
    var G__8893 = b;
    var G__8894 = c;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__8891, G__8892, G__8893, G__8894) : f.call(null, G__8891, G__8892, G__8893, G__8894);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = function(obj, f, a, b, c, d) {
  return cljs.core.with_meta(obj, function() {
    var G__8895 = cljs.core.meta(obj);
    var G__8896 = a;
    var G__8897 = b;
    var G__8898 = c;
    var G__8899 = d;
    return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__8895, G__8896, G__8897, G__8898, G__8899) : f.call(null, G__8895, G__8896, G__8897, G__8898, G__8899);
  }());
};
cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = function(obj, f, a, b, c, d, args) {
  return cljs.core.with_meta(obj, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.meta(obj), a, b, c, cljs.core.array_seq([d, args], 0)));
};
cljs.core.vary_meta.cljs$lang$applyTo = function(seq8876) {
  var G__8877 = cljs.core.first(seq8876);
  var seq8876__$1 = cljs.core.next(seq8876);
  var G__8878 = cljs.core.first(seq8876__$1);
  var seq8876__$2 = cljs.core.next(seq8876__$1);
  var G__8879 = cljs.core.first(seq8876__$2);
  var seq8876__$3 = cljs.core.next(seq8876__$2);
  var G__8880 = cljs.core.first(seq8876__$3);
  var seq8876__$4 = cljs.core.next(seq8876__$3);
  var G__8881 = cljs.core.first(seq8876__$4);
  var seq8876__$5 = cljs.core.next(seq8876__$4);
  var G__8882 = cljs.core.first(seq8876__$5);
  var seq8876__$6 = cljs.core.next(seq8876__$5);
  return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__8877, G__8878, G__8879, G__8880, G__8881, G__8882, seq8876__$6);
};
cljs.core.vary_meta.cljs$lang$maxFixedArity = 6;
cljs.core.not_EQ_ = function cljs$core$not_EQ_(var_args) {
  var args8904 = [];
  var len__5835__auto___8910 = arguments.length;
  var i__5836__auto___8911 = 0;
  while (true) {
    if (i__5836__auto___8911 < len__5835__auto___8910) {
      args8904.push(arguments[i__5836__auto___8911]);
      var G__8912 = i__5836__auto___8911 + 1;
      i__5836__auto___8911 = G__8912;
      continue;
    } else {
    }
    break;
  }
  var G__8909 = args8904.length;
  switch(G__8909) {
    case 1:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8904.slice(2), 0);
      return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return false;
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = function(x, y) {
  return !cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y);
};
cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = function(x, y, more) {
  return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_, x, y, more));
};
cljs.core.not_EQ_.cljs$lang$applyTo = function(seq8905) {
  var G__8906 = cljs.core.first(seq8905);
  var seq8905__$1 = cljs.core.next(seq8905);
  var G__8907 = cljs.core.first(seq8905__$1);
  var seq8905__$2 = cljs.core.next(seq8905__$1);
  return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__8906, G__8907, seq8905__$2);
};
cljs.core.not_EQ_.cljs$lang$maxFixedArity = 2;
cljs.core.not_empty = function cljs$core$not_empty(coll) {
  if (cljs.core.seq(coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function cljs$core$nil_iter() {
  if (typeof cljs.core.t_cljs$core8917 !== "undefined") {
  } else {
    cljs.core.t_cljs$core8917 = function(nil_iter, meta8918) {
      this.nil_iter = nil_iter;
      this.meta8918 = meta8918;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
      this.cljs$lang$protocol_mask$partition1$ = 0;
    };
    cljs.core.t_cljs$core8917.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_8919, meta8918__$1) {
      var self__ = this;
      var _8919__$1 = this;
      return new cljs.core.t_cljs$core8917(self__.nil_iter, meta8918__$1);
    };
    cljs.core.t_cljs$core8917.prototype.cljs$core$IMeta$_meta$arity$1 = function(_8919) {
      var self__ = this;
      var _8919__$1 = this;
      return self__.meta8918;
    };
    cljs.core.t_cljs$core8917.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t_cljs$core8917.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t_cljs$core8917.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t_cljs$core8917.getBasis = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_iter, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$arglists, cljs.core.list(cljs.core.cst$sym$quote, cljs.core.list(cljs.core.PersistentVector.EMPTY))], null)), cljs.core.cst$sym$meta8918], null);
    };
    cljs.core.t_cljs$core8917.cljs$lang$type = true;
    cljs.core.t_cljs$core8917.cljs$lang$ctorStr = "cljs.core/t_cljs$core8917";
    cljs.core.t_cljs$core8917.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
      return cljs.core._write(writer__5376__auto__, "cljs.core/t_cljs$core8917");
    };
    cljs.core.__GT_t_cljs$core8917 = function cljs$core$nil_iter_$___GT_t_cljs$core8917(nil_iter__$1, meta8918) {
      return new cljs.core.t_cljs$core8917(nil_iter__$1, meta8918);
    };
  }
  return new cljs.core.t_cljs$core8917(cljs$core$nil_iter, cljs.core.PersistentArrayMap.EMPTY);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.StringIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s, cljs.core.with_meta(cljs.core.cst$sym$i, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/StringIter");
};
cljs.core.__GT_StringIter = function cljs$core$__GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function cljs$core$string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr, cljs.core.with_meta(cljs.core.cst$sym$i, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ArrayIter");
};
cljs.core.__GT_ArrayIter = function cljs$core$__GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function cljs$core$array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq(self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next(self__._seq);
    } else {
    }
  }
  return !(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not(this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first(self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.SeqIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$_next, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/SeqIter");
};
cljs.core.__GT_SeqIter = function cljs$core$__GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function cljs$core$seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function cljs$core$iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter();
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter(coll);
    } else {
      if (cljs.core.array_QMARK_(coll)) {
        return cljs.core.array_iter(coll);
      } else {
        if (cljs.core.truth_(cljs.core.iterable_QMARK_(coll))) {
          return cljs.core._iterator(coll);
        } else {
          if (cljs.core.seqable_QMARK_(coll)) {
            return cljs.core.seq_iter(coll);
          } else {
            throw new Error([cljs.core.str("Cannot create iterator from "), cljs.core.str(coll)].join(""));
          }
        }
      }
    }
  }
};
cljs.core.LazyTransformer;
cljs.core.lazy_transformer = function cljs$core$lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4765__auto__ = !(lt.stepper == null);
      if (and__4765__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__4765__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(function() {
        var G__8920 = lt;
        var G__8921 = self__.iter.next();
        return self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__8920, G__8921) : self__.xform.call(null, G__8920, G__8921);
      }())) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.Stepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform, cljs.core.cst$sym$iter], null);
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Stepper");
};
cljs.core.__GT_Stepper = function cljs$core$__GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function cljs$core$stepper(xform, iter) {
  var stepfn = function() {
    var cljs$core$stepper_$_stepfn = null;
    var cljs$core$stepper_$_stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return result;
    };
    var cljs$core$stepper_$_stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepper_$_stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepper_$_stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepper_$_stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
    cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
    return cljs$core$stepper_$_stepfn;
  }();
  return new cljs.core.Stepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq(self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first(iters__$1);
      if (cljs.core.not(iter.hasNext())) {
        return false;
      } else {
        var G__8922 = cljs.core.next(iters__$1);
        iters__$1 = G__8922;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__5680__auto___8923 = self__.iters.length;
  var i_8924 = 0;
  while (true) {
    if (i_8924 < n__5680__auto___8923) {
      self__.nexts[i_8924] = self__.iters[i_8924].next();
      var G__8925 = i_8924 + 1;
      i_8924 = G__8925;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__4765__auto__ = !(lt.stepper == null);
      if (and__4765__auto__) {
        return this$.hasNext();
      } else {
        return and__4765__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform, cljs.core.cons(lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null, lt);
  }
};
cljs.core.MultiStepper.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform, cljs.core.cst$sym$iters, cljs.core.cst$sym$nexts], null);
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/MultiStepper");
};
cljs.core.__GT_MultiStepper = function cljs$core$__GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function cljs$core$multi_stepper(var_args) {
  var args8926 = [];
  var len__5835__auto___8929 = arguments.length;
  var i__5836__auto___8930 = 0;
  while (true) {
    if (i__5836__auto___8930 < len__5835__auto___8929) {
      args8926.push(arguments[i__5836__auto___8930]);
      var G__8931 = i__5836__auto___8930 + 1;
      i__5836__auto___8930 = G__8931;
      continue;
    } else {
    }
    break;
  }
  var G__8928 = args8926.length;
  switch(G__8928) {
    case 2:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args8926.length)].join(""));;
  }
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = function(xform, iters) {
  return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length));
};
cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = function(xform, iters, nexts) {
  var stepfn = function() {
    var cljs$core$stepfn = null;
    var cljs$core$stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_(result) ? cljs.core.deref(result) : result;
      lt.stepper = null;
      return lt;
    };
    var cljs$core$stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer(lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    cljs$core$stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return cljs$core$stepfn__1.call(this, result);
        case 2:
          return cljs$core$stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
    cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
    return cljs$core$stepfn;
  }();
  return new cljs.core.MultiStepper(xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null, stepfn), iters, nexts);
};
cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons(o, cljs.core._seq(this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq(this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential(this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_(other) && cljs.core.seq(other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll(this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq(self__.rest);
  }
};
cljs.core.LazyTransformer.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$stepper, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$first, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$rest, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.cst$sym$meta], 
  null);
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/LazyTransformer");
};
cljs.core.__GT_LazyTransformer = function cljs$core$__GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper(xform, cljs.core.iter(coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__8933_8937 = cljs.core.seq(colls);
  var chunk__8934_8938 = null;
  var count__8935_8939 = 0;
  var i__8936_8940 = 0;
  while (true) {
    if (i__8936_8940 < count__8935_8939) {
      var coll_8941 = chunk__8934_8938.cljs$core$IIndexed$_nth$arity$2(null, i__8936_8940);
      iters.push(cljs.core.iter(coll_8941));
      var G__8942 = seq__8933_8937;
      var G__8943 = chunk__8934_8938;
      var G__8944 = count__8935_8939;
      var G__8945 = i__8936_8940 + 1;
      seq__8933_8937 = G__8942;
      chunk__8934_8938 = G__8943;
      count__8935_8939 = G__8944;
      i__8936_8940 = G__8945;
      continue;
    } else {
      var temp__4425__auto___8946 = cljs.core.seq(seq__8933_8937);
      if (temp__4425__auto___8946) {
        var seq__8933_8947__$1 = temp__4425__auto___8946;
        if (cljs.core.chunked_seq_QMARK_(seq__8933_8947__$1)) {
          var c__5580__auto___8948 = cljs.core.chunk_first(seq__8933_8947__$1);
          var G__8949 = cljs.core.chunk_rest(seq__8933_8947__$1);
          var G__8950 = c__5580__auto___8948;
          var G__8951 = cljs.core.count(c__5580__auto___8948);
          var G__8952 = 0;
          seq__8933_8937 = G__8949;
          chunk__8934_8938 = G__8950;
          count__8935_8939 = G__8951;
          i__8936_8940 = G__8952;
          continue;
        } else {
          var coll_8953 = cljs.core.first(seq__8933_8947__$1);
          iters.push(cljs.core.iter(coll_8953));
          var G__8954 = cljs.core.next(seq__8933_8947__$1);
          var G__8955 = null;
          var G__8956 = 0;
          var G__8957 = 0;
          seq__8933_8937 = G__8954;
          chunk__8934_8938 = G__8955;
          count__8935_8939 = G__8956;
          i__8936_8940 = G__8957;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function cljs$core$sequence(var_args) {
  var args8958 = [];
  var len__5835__auto___8964 = arguments.length;
  var i__5836__auto___8965 = 0;
  while (true) {
    if (i__5836__auto___8965 < len__5835__auto___8964) {
      args8958.push(arguments[i__5836__auto___8965]);
      var G__8966 = i__5836__auto___8965 + 1;
      i__5836__auto___8965 = G__8966;
      continue;
    } else {
    }
    break;
  }
  var G__8963 = args8958.length;
  switch(G__8963) {
    case 1:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8958.slice(2), 0);
      return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  if (cljs.core.seq_QMARK_(coll)) {
    return coll;
  } else {
    var or__4777__auto__ = cljs.core.seq(coll);
    if (or__4777__auto__) {
      return or__4777__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = function(xform, coll) {
  return cljs.core.LazyTransformer.create(xform, coll);
};
cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = function(xform, coll, colls) {
  return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array(cljs.core.cons(coll, colls)));
};
cljs.core.sequence.cljs$lang$applyTo = function(seq8959) {
  var G__8960 = cljs.core.first(seq8959);
  var seq8959__$1 = cljs.core.next(seq8959);
  var G__8961 = cljs.core.first(seq8959__$1);
  var seq8959__$2 = cljs.core.next(seq8959__$1);
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__8960, G__8961, seq8959__$2);
};
cljs.core.sequence.cljs$lang$maxFixedArity = 2;
cljs.core.every_QMARK_ = function cljs$core$every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(function() {
        var G__8969 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8969) : pred.call(null, G__8969);
      }())) {
        var G__8970 = pred;
        var G__8971 = cljs.core.next(coll);
        pred = G__8970;
        coll = G__8971;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function cljs$core$not_every_QMARK_(pred, coll) {
  return !cljs.core.every_QMARK_(pred, coll);
};
cljs.core.some = function cljs$core$some(pred, coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var or__4777__auto__ = function() {
        var G__8975 = cljs.core.first(coll);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__8975) : pred.call(null, G__8975);
      }();
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        var G__8976 = pred;
        var G__8977 = cljs.core.next(coll);
        pred = G__8976;
        coll = G__8977;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function cljs$core$not_any_QMARK_(pred, coll) {
  return cljs.core.not(cljs.core.some(pred, coll));
};
cljs.core.even_QMARK_ = function cljs$core$even_QMARK_(n) {
  if (cljs.core.integer_QMARK_(n)) {
    return (n & 1) === 0;
  } else {
    throw new Error([cljs.core.str("Argument must be an integer: "), cljs.core.str(n)].join(""));
  }
};
cljs.core.odd_QMARK_ = function cljs$core$odd_QMARK_(n) {
  return !cljs.core.even_QMARK_(n);
};
cljs.core.complement = function cljs$core$complement(f) {
  return function() {
    var G__8978 = null;
    var G__8978__0 = function() {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    };
    var G__8978__1 = function(x) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
    };
    var G__8978__2 = function(x, y) {
      return cljs.core.not(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y));
    };
    var G__8978__3 = function() {
      var G__8979__delegate = function(x, y, zs) {
        return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f, x, y, zs));
      };
      var G__8979 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          var G__8980__i = 0, G__8980__a = new Array(arguments.length - 2);
          while (G__8980__i < G__8980__a.length) {
            G__8980__a[G__8980__i] = arguments[G__8980__i + 2];
            ++G__8980__i;
          }
          zs = new cljs.core.IndexedSeq(G__8980__a, 0);
        }
        return G__8979__delegate.call(this, x, y, zs);
      };
      G__8979.cljs$lang$maxFixedArity = 2;
      G__8979.cljs$lang$applyTo = function(arglist__8981) {
        var x = cljs.core.first(arglist__8981);
        arglist__8981 = cljs.core.next(arglist__8981);
        var y = cljs.core.first(arglist__8981);
        var zs = cljs.core.rest(arglist__8981);
        return G__8979__delegate(x, y, zs);
      };
      G__8979.cljs$core$IFn$_invoke$arity$variadic = G__8979__delegate;
      return G__8979;
    }();
    G__8978 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__8978__0.call(this);
        case 1:
          return G__8978__1.call(this, x);
        case 2:
          return G__8978__2.call(this, x, y);
        default:
          var G__8982 = null;
          if (arguments.length > 2) {
            var G__8983__i = 0, G__8983__a = new Array(arguments.length - 2);
            while (G__8983__i < G__8983__a.length) {
              G__8983__a[G__8983__i] = arguments[G__8983__i + 2];
              ++G__8983__i;
            }
            G__8982 = new cljs.core.IndexedSeq(G__8983__a, 0);
          }
          return G__8978__3.cljs$core$IFn$_invoke$arity$variadic(x, y, G__8982);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__8978.cljs$lang$maxFixedArity = 2;
    G__8978.cljs$lang$applyTo = G__8978__3.cljs$lang$applyTo;
    G__8978.cljs$core$IFn$_invoke$arity$0 = G__8978__0;
    G__8978.cljs$core$IFn$_invoke$arity$1 = G__8978__1;
    G__8978.cljs$core$IFn$_invoke$arity$2 = G__8978__2;
    G__8978.cljs$core$IFn$_invoke$arity$variadic = G__8978__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__8978;
  }();
};
cljs.core.constantly = function cljs$core$constantly(x) {
  return function() {
    var G__8984__delegate = function(args) {
      return x;
    };
    var G__8984 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__8985__i = 0, G__8985__a = new Array(arguments.length - 0);
        while (G__8985__i < G__8985__a.length) {
          G__8985__a[G__8985__i] = arguments[G__8985__i + 0];
          ++G__8985__i;
        }
        args = new cljs.core.IndexedSeq(G__8985__a, 0);
      }
      return G__8984__delegate.call(this, args);
    };
    G__8984.cljs$lang$maxFixedArity = 0;
    G__8984.cljs$lang$applyTo = function(arglist__8986) {
      var args = cljs.core.seq(arglist__8986);
      return G__8984__delegate(args);
    };
    G__8984.cljs$core$IFn$_invoke$arity$variadic = G__8984__delegate;
    return G__8984;
  }();
};
cljs.core.comp = function cljs$core$comp(var_args) {
  var args8987 = [];
  var len__5835__auto___9014 = arguments.length;
  var i__5836__auto___9015 = 0;
  while (true) {
    if (i__5836__auto___9015 < len__5835__auto___9014) {
      args8987.push(arguments[i__5836__auto___9015]);
      var G__9016 = i__5836__auto___9015 + 1;
      i__5836__auto___9015 = G__9016;
      continue;
    } else {
    }
    break;
  }
  var G__8993 = args8987.length;
  switch(G__8993) {
    case 0:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args8987.slice(3), 0);
      return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5854__auto__);
  }
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.identity;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__9018 = null;
    var G__9018__0 = function() {
      var G__8994 = g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8994) : f.call(null, G__8994);
    };
    var G__9018__1 = function(x) {
      var G__8995 = g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8995) : f.call(null, G__8995);
    };
    var G__9018__2 = function(x, y) {
      var G__8996 = g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8996) : f.call(null, G__8996);
    };
    var G__9018__3 = function(x, y, z) {
      var G__8997 = g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8997) : f.call(null, G__8997);
    };
    var G__9018__4 = function() {
      var G__9019__delegate = function(x, y, z, args) {
        var G__8998 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args);
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__8998) : f.call(null, G__8998);
      };
      var G__9019 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9020__i = 0, G__9020__a = new Array(arguments.length - 3);
          while (G__9020__i < G__9020__a.length) {
            G__9020__a[G__9020__i] = arguments[G__9020__i + 3];
            ++G__9020__i;
          }
          args = new cljs.core.IndexedSeq(G__9020__a, 0);
        }
        return G__9019__delegate.call(this, x, y, z, args);
      };
      G__9019.cljs$lang$maxFixedArity = 3;
      G__9019.cljs$lang$applyTo = function(arglist__9021) {
        var x = cljs.core.first(arglist__9021);
        arglist__9021 = cljs.core.next(arglist__9021);
        var y = cljs.core.first(arglist__9021);
        arglist__9021 = cljs.core.next(arglist__9021);
        var z = cljs.core.first(arglist__9021);
        var args = cljs.core.rest(arglist__9021);
        return G__9019__delegate(x, y, z, args);
      };
      G__9019.cljs$core$IFn$_invoke$arity$variadic = G__9019__delegate;
      return G__9019;
    }();
    G__9018 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9018__0.call(this);
        case 1:
          return G__9018__1.call(this, x);
        case 2:
          return G__9018__2.call(this, x, y);
        case 3:
          return G__9018__3.call(this, x, y, z);
        default:
          var G__9022 = null;
          if (arguments.length > 3) {
            var G__9023__i = 0, G__9023__a = new Array(arguments.length - 3);
            while (G__9023__i < G__9023__a.length) {
              G__9023__a[G__9023__i] = arguments[G__9023__i + 3];
              ++G__9023__i;
            }
            G__9022 = new cljs.core.IndexedSeq(G__9023__a, 0);
          }
          return G__9018__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9022);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9018.cljs$lang$maxFixedArity = 3;
    G__9018.cljs$lang$applyTo = G__9018__4.cljs$lang$applyTo;
    G__9018.cljs$core$IFn$_invoke$arity$0 = G__9018__0;
    G__9018.cljs$core$IFn$_invoke$arity$1 = G__9018__1;
    G__9018.cljs$core$IFn$_invoke$arity$2 = G__9018__2;
    G__9018.cljs$core$IFn$_invoke$arity$3 = G__9018__3;
    G__9018.cljs$core$IFn$_invoke$arity$variadic = G__9018__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9018;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__9024 = null;
    var G__9024__0 = function() {
      var G__9000 = function() {
        var G__9001 = h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9001) : g.call(null, G__9001);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9000) : f.call(null, G__9000);
    };
    var G__9024__1 = function(x) {
      var G__9003 = function() {
        var G__9004 = h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9004) : g.call(null, G__9004);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9003) : f.call(null, G__9003);
    };
    var G__9024__2 = function(x, y) {
      var G__9006 = function() {
        var G__9007 = h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9007) : g.call(null, G__9007);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9006) : f.call(null, G__9006);
    };
    var G__9024__3 = function(x, y, z) {
      var G__9009 = function() {
        var G__9010 = h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z);
        return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9010) : g.call(null, G__9010);
      }();
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9009) : f.call(null, G__9009);
    };
    var G__9024__4 = function() {
      var G__9025__delegate = function(x, y, z, args) {
        var G__9012 = function() {
          var G__9013 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args);
          return g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__9013) : g.call(null, G__9013);
        }();
        return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9012) : f.call(null, G__9012);
      };
      var G__9025 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9026__i = 0, G__9026__a = new Array(arguments.length - 3);
          while (G__9026__i < G__9026__a.length) {
            G__9026__a[G__9026__i] = arguments[G__9026__i + 3];
            ++G__9026__i;
          }
          args = new cljs.core.IndexedSeq(G__9026__a, 0);
        }
        return G__9025__delegate.call(this, x, y, z, args);
      };
      G__9025.cljs$lang$maxFixedArity = 3;
      G__9025.cljs$lang$applyTo = function(arglist__9027) {
        var x = cljs.core.first(arglist__9027);
        arglist__9027 = cljs.core.next(arglist__9027);
        var y = cljs.core.first(arglist__9027);
        arglist__9027 = cljs.core.next(arglist__9027);
        var z = cljs.core.first(arglist__9027);
        var args = cljs.core.rest(arglist__9027);
        return G__9025__delegate(x, y, z, args);
      };
      G__9025.cljs$core$IFn$_invoke$arity$variadic = G__9025__delegate;
      return G__9025;
    }();
    G__9024 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9024__0.call(this);
        case 1:
          return G__9024__1.call(this, x);
        case 2:
          return G__9024__2.call(this, x, y);
        case 3:
          return G__9024__3.call(this, x, y, z);
        default:
          var G__9028 = null;
          if (arguments.length > 3) {
            var G__9029__i = 0, G__9029__a = new Array(arguments.length - 3);
            while (G__9029__i < G__9029__a.length) {
              G__9029__a[G__9029__i] = arguments[G__9029__i + 3];
              ++G__9029__i;
            }
            G__9028 = new cljs.core.IndexedSeq(G__9029__a, 0);
          }
          return G__9024__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9028);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9024.cljs$lang$maxFixedArity = 3;
    G__9024.cljs$lang$applyTo = G__9024__4.cljs$lang$applyTo;
    G__9024.cljs$core$IFn$_invoke$arity$0 = G__9024__0;
    G__9024.cljs$core$IFn$_invoke$arity$1 = G__9024__1;
    G__9024.cljs$core$IFn$_invoke$arity$2 = G__9024__2;
    G__9024.cljs$core$IFn$_invoke$arity$3 = G__9024__3;
    G__9024.cljs$core$IFn$_invoke$arity$variadic = G__9024__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9024;
  }();
};
cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = function(f1, f2, f3, fs) {
  var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1, f2, f3, fs));
  return function(fs__$1) {
    return function() {
      var G__9030__delegate = function(args) {
        var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1), args);
        var fs__$2 = cljs.core.next(fs__$1);
        while (true) {
          if (fs__$2) {
            var G__9031 = cljs.core.first(fs__$2).call(null, ret);
            var G__9032 = cljs.core.next(fs__$2);
            ret = G__9031;
            fs__$2 = G__9032;
            continue;
          } else {
            return ret;
          }
          break;
        }
      };
      var G__9030 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__9033__i = 0, G__9033__a = new Array(arguments.length - 0);
          while (G__9033__i < G__9033__a.length) {
            G__9033__a[G__9033__i] = arguments[G__9033__i + 0];
            ++G__9033__i;
          }
          args = new cljs.core.IndexedSeq(G__9033__a, 0);
        }
        return G__9030__delegate.call(this, args);
      };
      G__9030.cljs$lang$maxFixedArity = 0;
      G__9030.cljs$lang$applyTo = function(arglist__9034) {
        var args = cljs.core.seq(arglist__9034);
        return G__9030__delegate(args);
      };
      G__9030.cljs$core$IFn$_invoke$arity$variadic = G__9030__delegate;
      return G__9030;
    }();
  }(fs__$1);
};
cljs.core.comp.cljs$lang$applyTo = function(seq8988) {
  var G__8989 = cljs.core.first(seq8988);
  var seq8988__$1 = cljs.core.next(seq8988);
  var G__8990 = cljs.core.first(seq8988__$1);
  var seq8988__$2 = cljs.core.next(seq8988__$1);
  var G__8991 = cljs.core.first(seq8988__$2);
  var seq8988__$3 = cljs.core.next(seq8988__$2);
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__8989, G__8990, G__8991, seq8988__$3);
};
cljs.core.comp.cljs$lang$maxFixedArity = 3;
cljs.core.partial = function cljs$core$partial(var_args) {
  var args9035 = [];
  var len__5835__auto___9043 = arguments.length;
  var i__5836__auto___9044 = 0;
  while (true) {
    if (i__5836__auto___9044 < len__5835__auto___9043) {
      args9035.push(arguments[i__5836__auto___9044]);
      var G__9045 = i__5836__auto___9044 + 1;
      i__5836__auto___9044 = G__9045;
      continue;
    } else {
    }
    break;
  }
  var G__9042 = args9035.length;
  switch(G__9042) {
    case 1:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9035.slice(4), 0);
      return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5854__auto__);
  }
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return f;
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = function(f, arg1) {
  return function() {
    var G__9047 = null;
    var G__9047__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null, arg1);
    };
    var G__9047__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, x) : f.call(null, arg1, x);
    };
    var G__9047__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, x, y) : f.call(null, arg1, x, y);
    };
    var G__9047__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, x, y, z) : f.call(null, arg1, x, y, z);
    };
    var G__9047__4 = function() {
      var G__9048__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, x, y, z, cljs.core.array_seq([args], 0));
      };
      var G__9048 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9049__i = 0, G__9049__a = new Array(arguments.length - 3);
          while (G__9049__i < G__9049__a.length) {
            G__9049__a[G__9049__i] = arguments[G__9049__i + 3];
            ++G__9049__i;
          }
          args = new cljs.core.IndexedSeq(G__9049__a, 0);
        }
        return G__9048__delegate.call(this, x, y, z, args);
      };
      G__9048.cljs$lang$maxFixedArity = 3;
      G__9048.cljs$lang$applyTo = function(arglist__9050) {
        var x = cljs.core.first(arglist__9050);
        arglist__9050 = cljs.core.next(arglist__9050);
        var y = cljs.core.first(arglist__9050);
        arglist__9050 = cljs.core.next(arglist__9050);
        var z = cljs.core.first(arglist__9050);
        var args = cljs.core.rest(arglist__9050);
        return G__9048__delegate(x, y, z, args);
      };
      G__9048.cljs$core$IFn$_invoke$arity$variadic = G__9048__delegate;
      return G__9048;
    }();
    G__9047 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9047__0.call(this);
        case 1:
          return G__9047__1.call(this, x);
        case 2:
          return G__9047__2.call(this, x, y);
        case 3:
          return G__9047__3.call(this, x, y, z);
        default:
          var G__9051 = null;
          if (arguments.length > 3) {
            var G__9052__i = 0, G__9052__a = new Array(arguments.length - 3);
            while (G__9052__i < G__9052__a.length) {
              G__9052__a[G__9052__i] = arguments[G__9052__i + 3];
              ++G__9052__i;
            }
            G__9051 = new cljs.core.IndexedSeq(G__9052__a, 0);
          }
          return G__9047__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9051);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9047.cljs$lang$maxFixedArity = 3;
    G__9047.cljs$lang$applyTo = G__9047__4.cljs$lang$applyTo;
    G__9047.cljs$core$IFn$_invoke$arity$0 = G__9047__0;
    G__9047.cljs$core$IFn$_invoke$arity$1 = G__9047__1;
    G__9047.cljs$core$IFn$_invoke$arity$2 = G__9047__2;
    G__9047.cljs$core$IFn$_invoke$arity$3 = G__9047__3;
    G__9047.cljs$core$IFn$_invoke$arity$variadic = G__9047__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9047;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = function(f, arg1, arg2) {
  return function() {
    var G__9053 = null;
    var G__9053__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1, arg2) : f.call(null, arg1, arg2);
    };
    var G__9053__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, x) : f.call(null, arg1, arg2, x);
    };
    var G__9053__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, x, y) : f.call(null, arg1, arg2, x, y);
    };
    var G__9053__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, x, y, z) : f.call(null, arg1, arg2, x, y, z);
    };
    var G__9053__4 = function() {
      var G__9054__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, x, y, cljs.core.array_seq([z, args], 0));
      };
      var G__9054 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9055__i = 0, G__9055__a = new Array(arguments.length - 3);
          while (G__9055__i < G__9055__a.length) {
            G__9055__a[G__9055__i] = arguments[G__9055__i + 3];
            ++G__9055__i;
          }
          args = new cljs.core.IndexedSeq(G__9055__a, 0);
        }
        return G__9054__delegate.call(this, x, y, z, args);
      };
      G__9054.cljs$lang$maxFixedArity = 3;
      G__9054.cljs$lang$applyTo = function(arglist__9056) {
        var x = cljs.core.first(arglist__9056);
        arglist__9056 = cljs.core.next(arglist__9056);
        var y = cljs.core.first(arglist__9056);
        arglist__9056 = cljs.core.next(arglist__9056);
        var z = cljs.core.first(arglist__9056);
        var args = cljs.core.rest(arglist__9056);
        return G__9054__delegate(x, y, z, args);
      };
      G__9054.cljs$core$IFn$_invoke$arity$variadic = G__9054__delegate;
      return G__9054;
    }();
    G__9053 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9053__0.call(this);
        case 1:
          return G__9053__1.call(this, x);
        case 2:
          return G__9053__2.call(this, x, y);
        case 3:
          return G__9053__3.call(this, x, y, z);
        default:
          var G__9057 = null;
          if (arguments.length > 3) {
            var G__9058__i = 0, G__9058__a = new Array(arguments.length - 3);
            while (G__9058__i < G__9058__a.length) {
              G__9058__a[G__9058__i] = arguments[G__9058__i + 3];
              ++G__9058__i;
            }
            G__9057 = new cljs.core.IndexedSeq(G__9058__a, 0);
          }
          return G__9053__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9057);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9053.cljs$lang$maxFixedArity = 3;
    G__9053.cljs$lang$applyTo = G__9053__4.cljs$lang$applyTo;
    G__9053.cljs$core$IFn$_invoke$arity$0 = G__9053__0;
    G__9053.cljs$core$IFn$_invoke$arity$1 = G__9053__1;
    G__9053.cljs$core$IFn$_invoke$arity$2 = G__9053__2;
    G__9053.cljs$core$IFn$_invoke$arity$3 = G__9053__3;
    G__9053.cljs$core$IFn$_invoke$arity$variadic = G__9053__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9053;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = function(f, arg1, arg2, arg3) {
  return function() {
    var G__9059 = null;
    var G__9059__0 = function() {
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1, arg2, arg3) : f.call(null, arg1, arg2, arg3);
    };
    var G__9059__1 = function(x) {
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1, arg2, arg3, x) : f.call(null, arg1, arg2, arg3, x);
    };
    var G__9059__2 = function(x, y) {
      return f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1, arg2, arg3, x, y) : f.call(null, arg1, arg2, arg3, x, y);
    };
    var G__9059__3 = function(x, y, z) {
      return f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1, arg2, arg3, x, y, z) : f.call(null, arg1, arg2, arg3, x, y, z);
    };
    var G__9059__4 = function() {
      var G__9060__delegate = function(x, y, z, args) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, x, cljs.core.array_seq([y, z, args], 0));
      };
      var G__9060 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9061__i = 0, G__9061__a = new Array(arguments.length - 3);
          while (G__9061__i < G__9061__a.length) {
            G__9061__a[G__9061__i] = arguments[G__9061__i + 3];
            ++G__9061__i;
          }
          args = new cljs.core.IndexedSeq(G__9061__a, 0);
        }
        return G__9060__delegate.call(this, x, y, z, args);
      };
      G__9060.cljs$lang$maxFixedArity = 3;
      G__9060.cljs$lang$applyTo = function(arglist__9062) {
        var x = cljs.core.first(arglist__9062);
        arglist__9062 = cljs.core.next(arglist__9062);
        var y = cljs.core.first(arglist__9062);
        arglist__9062 = cljs.core.next(arglist__9062);
        var z = cljs.core.first(arglist__9062);
        var args = cljs.core.rest(arglist__9062);
        return G__9060__delegate(x, y, z, args);
      };
      G__9060.cljs$core$IFn$_invoke$arity$variadic = G__9060__delegate;
      return G__9060;
    }();
    G__9059 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__9059__0.call(this);
        case 1:
          return G__9059__1.call(this, x);
        case 2:
          return G__9059__2.call(this, x, y);
        case 3:
          return G__9059__3.call(this, x, y, z);
        default:
          var G__9063 = null;
          if (arguments.length > 3) {
            var G__9064__i = 0, G__9064__a = new Array(arguments.length - 3);
            while (G__9064__i < G__9064__a.length) {
              G__9064__a[G__9064__i] = arguments[G__9064__i + 3];
              ++G__9064__i;
            }
            G__9063 = new cljs.core.IndexedSeq(G__9064__a, 0);
          }
          return G__9059__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9063);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9059.cljs$lang$maxFixedArity = 3;
    G__9059.cljs$lang$applyTo = G__9059__4.cljs$lang$applyTo;
    G__9059.cljs$core$IFn$_invoke$arity$0 = G__9059__0;
    G__9059.cljs$core$IFn$_invoke$arity$1 = G__9059__1;
    G__9059.cljs$core$IFn$_invoke$arity$2 = G__9059__2;
    G__9059.cljs$core$IFn$_invoke$arity$3 = G__9059__3;
    G__9059.cljs$core$IFn$_invoke$arity$variadic = G__9059__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9059;
  }();
};
cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = function(f, arg1, arg2, arg3, more) {
  return function() {
    var G__9065__delegate = function(args) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, arg1, arg2, arg3, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more, args));
    };
    var G__9065 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__9066__i = 0, G__9066__a = new Array(arguments.length - 0);
        while (G__9066__i < G__9066__a.length) {
          G__9066__a[G__9066__i] = arguments[G__9066__i + 0];
          ++G__9066__i;
        }
        args = new cljs.core.IndexedSeq(G__9066__a, 0);
      }
      return G__9065__delegate.call(this, args);
    };
    G__9065.cljs$lang$maxFixedArity = 0;
    G__9065.cljs$lang$applyTo = function(arglist__9067) {
      var args = cljs.core.seq(arglist__9067);
      return G__9065__delegate(args);
    };
    G__9065.cljs$core$IFn$_invoke$arity$variadic = G__9065__delegate;
    return G__9065;
  }();
};
cljs.core.partial.cljs$lang$applyTo = function(seq9036) {
  var G__9037 = cljs.core.first(seq9036);
  var seq9036__$1 = cljs.core.next(seq9036);
  var G__9038 = cljs.core.first(seq9036__$1);
  var seq9036__$2 = cljs.core.next(seq9036__$1);
  var G__9039 = cljs.core.first(seq9036__$2);
  var seq9036__$3 = cljs.core.next(seq9036__$2);
  var G__9040 = cljs.core.first(seq9036__$3);
  var seq9036__$4 = cljs.core.next(seq9036__$3);
  return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__9037, G__9038, G__9039, G__9040, seq9036__$4);
};
cljs.core.partial.cljs$lang$maxFixedArity = 4;
cljs.core.fnil = function cljs$core$fnil(var_args) {
  var args9068 = [];
  var len__5835__auto___9087 = arguments.length;
  var i__5836__auto___9088 = 0;
  while (true) {
    if (i__5836__auto___9088 < len__5835__auto___9087) {
      args9068.push(arguments[i__5836__auto___9088]);
      var G__9089 = i__5836__auto___9088 + 1;
      i__5836__auto___9088 = G__9089;
      continue;
    } else {
    }
    break;
  }
  var G__9070 = args9068.length;
  switch(G__9070) {
    case 2:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9068.length)].join(""));;
  }
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = function(f, x) {
  return function() {
    var G__9091 = null;
    var G__9091__1 = function(a) {
      var G__9071 = a == null ? x : a;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9071) : f.call(null, G__9071);
    };
    var G__9091__2 = function(a, b) {
      var G__9072 = a == null ? x : a;
      var G__9073 = b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9072, G__9073) : f.call(null, G__9072, G__9073);
    };
    var G__9091__3 = function(a, b, c) {
      var G__9074 = a == null ? x : a;
      var G__9075 = b;
      var G__9076 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9074, G__9075, G__9076) : f.call(null, G__9074, G__9075, G__9076);
    };
    var G__9091__4 = function() {
      var G__9092__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b, c, ds);
      };
      var G__9092 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__9093__i = 0, G__9093__a = new Array(arguments.length - 3);
          while (G__9093__i < G__9093__a.length) {
            G__9093__a[G__9093__i] = arguments[G__9093__i + 3];
            ++G__9093__i;
          }
          ds = new cljs.core.IndexedSeq(G__9093__a, 0);
        }
        return G__9092__delegate.call(this, a, b, c, ds);
      };
      G__9092.cljs$lang$maxFixedArity = 3;
      G__9092.cljs$lang$applyTo = function(arglist__9094) {
        var a = cljs.core.first(arglist__9094);
        arglist__9094 = cljs.core.next(arglist__9094);
        var b = cljs.core.first(arglist__9094);
        arglist__9094 = cljs.core.next(arglist__9094);
        var c = cljs.core.first(arglist__9094);
        var ds = cljs.core.rest(arglist__9094);
        return G__9092__delegate(a, b, c, ds);
      };
      G__9092.cljs$core$IFn$_invoke$arity$variadic = G__9092__delegate;
      return G__9092;
    }();
    G__9091 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 1:
          return G__9091__1.call(this, a);
        case 2:
          return G__9091__2.call(this, a, b);
        case 3:
          return G__9091__3.call(this, a, b, c);
        default:
          var G__9095 = null;
          if (arguments.length > 3) {
            var G__9096__i = 0, G__9096__a = new Array(arguments.length - 3);
            while (G__9096__i < G__9096__a.length) {
              G__9096__a[G__9096__i] = arguments[G__9096__i + 3];
              ++G__9096__i;
            }
            G__9095 = new cljs.core.IndexedSeq(G__9096__a, 0);
          }
          return G__9091__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__9095);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9091.cljs$lang$maxFixedArity = 3;
    G__9091.cljs$lang$applyTo = G__9091__4.cljs$lang$applyTo;
    G__9091.cljs$core$IFn$_invoke$arity$1 = G__9091__1;
    G__9091.cljs$core$IFn$_invoke$arity$2 = G__9091__2;
    G__9091.cljs$core$IFn$_invoke$arity$3 = G__9091__3;
    G__9091.cljs$core$IFn$_invoke$arity$variadic = G__9091__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9091;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = function(f, x, y) {
  return function() {
    var G__9097 = null;
    var G__9097__2 = function(a, b) {
      var G__9077 = a == null ? x : a;
      var G__9078 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9077, G__9078) : f.call(null, G__9077, G__9078);
    };
    var G__9097__3 = function(a, b, c) {
      var G__9079 = a == null ? x : a;
      var G__9080 = b == null ? y : b;
      var G__9081 = c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9079, G__9080, G__9081) : f.call(null, G__9079, G__9080, G__9081);
    };
    var G__9097__4 = function() {
      var G__9098__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c, ds);
      };
      var G__9098 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__9099__i = 0, G__9099__a = new Array(arguments.length - 3);
          while (G__9099__i < G__9099__a.length) {
            G__9099__a[G__9099__i] = arguments[G__9099__i + 3];
            ++G__9099__i;
          }
          ds = new cljs.core.IndexedSeq(G__9099__a, 0);
        }
        return G__9098__delegate.call(this, a, b, c, ds);
      };
      G__9098.cljs$lang$maxFixedArity = 3;
      G__9098.cljs$lang$applyTo = function(arglist__9100) {
        var a = cljs.core.first(arglist__9100);
        arglist__9100 = cljs.core.next(arglist__9100);
        var b = cljs.core.first(arglist__9100);
        arglist__9100 = cljs.core.next(arglist__9100);
        var c = cljs.core.first(arglist__9100);
        var ds = cljs.core.rest(arglist__9100);
        return G__9098__delegate(a, b, c, ds);
      };
      G__9098.cljs$core$IFn$_invoke$arity$variadic = G__9098__delegate;
      return G__9098;
    }();
    G__9097 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__9097__2.call(this, a, b);
        case 3:
          return G__9097__3.call(this, a, b, c);
        default:
          var G__9101 = null;
          if (arguments.length > 3) {
            var G__9102__i = 0, G__9102__a = new Array(arguments.length - 3);
            while (G__9102__i < G__9102__a.length) {
              G__9102__a[G__9102__i] = arguments[G__9102__i + 3];
              ++G__9102__i;
            }
            G__9101 = new cljs.core.IndexedSeq(G__9102__a, 0);
          }
          return G__9097__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__9101);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9097.cljs$lang$maxFixedArity = 3;
    G__9097.cljs$lang$applyTo = G__9097__4.cljs$lang$applyTo;
    G__9097.cljs$core$IFn$_invoke$arity$2 = G__9097__2;
    G__9097.cljs$core$IFn$_invoke$arity$3 = G__9097__3;
    G__9097.cljs$core$IFn$_invoke$arity$variadic = G__9097__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9097;
  }();
};
cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = function(f, x, y, z) {
  return function() {
    var G__9103 = null;
    var G__9103__2 = function(a, b) {
      var G__9082 = a == null ? x : a;
      var G__9083 = b == null ? y : b;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9082, G__9083) : f.call(null, G__9082, G__9083);
    };
    var G__9103__3 = function(a, b, c) {
      var G__9084 = a == null ? x : a;
      var G__9085 = b == null ? y : b;
      var G__9086 = c == null ? z : c;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9084, G__9085, G__9086) : f.call(null, G__9084, G__9085, G__9086);
    };
    var G__9103__4 = function() {
      var G__9104__delegate = function(a, b, c, ds) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
      };
      var G__9104 = function(a, b, c, var_args) {
        var ds = null;
        if (arguments.length > 3) {
          var G__9105__i = 0, G__9105__a = new Array(arguments.length - 3);
          while (G__9105__i < G__9105__a.length) {
            G__9105__a[G__9105__i] = arguments[G__9105__i + 3];
            ++G__9105__i;
          }
          ds = new cljs.core.IndexedSeq(G__9105__a, 0);
        }
        return G__9104__delegate.call(this, a, b, c, ds);
      };
      G__9104.cljs$lang$maxFixedArity = 3;
      G__9104.cljs$lang$applyTo = function(arglist__9106) {
        var a = cljs.core.first(arglist__9106);
        arglist__9106 = cljs.core.next(arglist__9106);
        var b = cljs.core.first(arglist__9106);
        arglist__9106 = cljs.core.next(arglist__9106);
        var c = cljs.core.first(arglist__9106);
        var ds = cljs.core.rest(arglist__9106);
        return G__9104__delegate(a, b, c, ds);
      };
      G__9104.cljs$core$IFn$_invoke$arity$variadic = G__9104__delegate;
      return G__9104;
    }();
    G__9103 = function(a, b, c, var_args) {
      var ds = var_args;
      switch(arguments.length) {
        case 2:
          return G__9103__2.call(this, a, b);
        case 3:
          return G__9103__3.call(this, a, b, c);
        default:
          var G__9107 = null;
          if (arguments.length > 3) {
            var G__9108__i = 0, G__9108__a = new Array(arguments.length - 3);
            while (G__9108__i < G__9108__a.length) {
              G__9108__a[G__9108__i] = arguments[G__9108__i + 3];
              ++G__9108__i;
            }
            G__9107 = new cljs.core.IndexedSeq(G__9108__a, 0);
          }
          return G__9103__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, G__9107);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__9103.cljs$lang$maxFixedArity = 3;
    G__9103.cljs$lang$applyTo = G__9103__4.cljs$lang$applyTo;
    G__9103.cljs$core$IFn$_invoke$arity$2 = G__9103__2;
    G__9103.cljs$core$IFn$_invoke$arity$3 = G__9103__3;
    G__9103.cljs$core$IFn$_invoke$arity$variadic = G__9103__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__9103;
  }();
};
cljs.core.fnil.cljs$lang$maxFixedArity = 4;
cljs.core.volatile_BANG_;
cljs.core.map_indexed = function cljs$core$map_indexed(var_args) {
  var args9109 = [];
  var len__5835__auto___9142 = arguments.length;
  var i__5836__auto___9143 = 0;
  while (true) {
    if (i__5836__auto___9143 < len__5835__auto___9142) {
      args9109.push(arguments[i__5836__auto___9143]);
      var G__9144 = i__5836__auto___9143 + 1;
      i__5836__auto___9143 = G__9144;
      continue;
    } else {
    }
    break;
  }
  var G__9111 = args9109.length;
  switch(G__9111) {
    case 1:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9109.length)].join(""));;
  }
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var i = cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1(-1) : cljs.core.volatile_BANG_.call(null, -1);
    return function(i) {
      return function() {
        var G__9146 = null;
        var G__9146__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9146__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9146__2 = function(result, input) {
          var G__9114 = result;
          var G__9115 = function() {
            var G__9116 = cljs.core._vreset_BANG_(i, cljs.core._deref(i) + 1);
            var G__9117 = input;
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9116, G__9117) : f.call(null, G__9116, G__9117);
          }();
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9114, G__9115) : rf.call(null, G__9114, G__9115);
        };
        G__9146 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9146__0.call(this);
            case 1:
              return G__9146__1.call(this, result);
            case 2:
              return G__9146__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9146.cljs$core$IFn$_invoke$arity$0 = G__9146__0;
        G__9146.cljs$core$IFn$_invoke$arity$1 = G__9146__1;
        G__9146.cljs$core$IFn$_invoke$arity$2 = G__9146__2;
        return G__9146;
      }();
    }(i);
  };
};
cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var mapi = function cljs$core$mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5680__auto___9147 = size;
          var i_9148 = 0;
          while (true) {
            if (i_9148 < n__5680__auto___9147) {
              cljs.core.chunk_append(b, function() {
                var G__9138 = idx + i_9148;
                var G__9139 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9148);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9138, G__9139) : f.call(null, G__9138, G__9139);
              }());
              var G__9149 = i_9148 + 1;
              i_9148 = G__9149;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$mapi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          return cljs.core.cons(function() {
            var G__9140 = idx;
            var G__9141 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9140, G__9141) : f.call(null, G__9140, G__9141);
          }(), cljs$core$mapi(idx + 1, cljs.core.rest(s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi(0, coll);
};
cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.keep = function cljs$core$keep(var_args) {
  var args9150 = [];
  var len__5835__auto___9155 = arguments.length;
  var i__5836__auto___9156 = 0;
  while (true) {
    if (i__5836__auto___9156 < len__5835__auto___9155) {
      args9150.push(arguments[i__5836__auto___9156]);
      var G__9157 = i__5836__auto___9156 + 1;
      i__5836__auto___9156 = G__9157;
      continue;
    } else {
    }
    break;
  }
  var G__9152 = args9150.length;
  switch(G__9152) {
    case 1:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9150.length)].join(""));;
  }
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__9159 = null;
      var G__9159__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9159__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9159__2 = function(result, input) {
        var v = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        if (v == null) {
          return result;
        } else {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
        }
      };
      G__9159 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9159__0.call(this);
          case 1:
            return G__9159__1.call(this, result);
          case 2:
            return G__9159__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9159.cljs$core$IFn$_invoke$arity$0 = G__9159__0;
      G__9159.cljs$core$IFn$_invoke$arity$1 = G__9159__1;
      G__9159.cljs$core$IFn$_invoke$arity$2 = G__9159__2;
      return G__9159;
    }();
  };
};
cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5680__auto___9160 = size;
        var i_9161 = 0;
        while (true) {
          if (i_9161 < n__5680__auto___9160) {
            var x_9162 = function() {
              var G__9153 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9161);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9153) : f.call(null, G__9153);
            }();
            if (x_9162 == null) {
            } else {
              cljs.core.chunk_append(b, x_9162);
            }
            var G__9163 = i_9161 + 1;
            i_9161 = G__9163;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        var x = function() {
          var G__9154 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9154) : f.call(null, G__9154);
        }();
        if (x == null) {
          return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s));
        } else {
          return cljs.core.cons(x, cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.keep.cljs$lang$maxFixedArity = 2;
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__9164 = cljs.core.seq(self__.watches);
  var chunk__9165 = null;
  var count__9166 = 0;
  var i__9167 = 0;
  while (true) {
    if (i__9167 < count__9166) {
      var vec__9168 = chunk__9165.cljs$core$IIndexed$_nth$arity$2(null, i__9167);
      var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9168, 0, null);
      var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9168, 1, null);
      f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
      var G__9170 = seq__9164;
      var G__9171 = chunk__9165;
      var G__9172 = count__9166;
      var G__9173 = i__9167 + 1;
      seq__9164 = G__9170;
      chunk__9165 = G__9171;
      count__9166 = G__9172;
      i__9167 = G__9173;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__9164);
      if (temp__4425__auto__) {
        var seq__9164__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9164__$1)) {
          var c__5580__auto__ = cljs.core.chunk_first(seq__9164__$1);
          var G__9174 = cljs.core.chunk_rest(seq__9164__$1);
          var G__9175 = c__5580__auto__;
          var G__9176 = cljs.core.count(c__5580__auto__);
          var G__9177 = 0;
          seq__9164 = G__9174;
          chunk__9165 = G__9175;
          count__9166 = G__9176;
          i__9167 = G__9177;
          continue;
        } else {
          var vec__9169 = cljs.core.first(seq__9164__$1);
          var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9169, 0, null);
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9169, 1, null);
          f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key, this$__$1, oldval, newval) : f.call(null, key, this$__$1, oldval, newval);
          var G__9178 = cljs.core.next(seq__9164__$1);
          var G__9179 = null;
          var G__9180 = 0;
          var G__9181 = 0;
          seq__9164 = G__9178;
          chunk__9165 = G__9179;
          count__9166 = G__9180;
          i__9167 = G__9181;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state, cljs.core.cst$sym$meta, cljs.core.cst$sym$validator, cljs.core.cst$sym$watches], null);
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Atom");
};
cljs.core.__GT_Atom = function cljs$core$__GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function cljs$core$atom(var_args) {
  var args9182 = [];
  var len__5835__auto___9190 = arguments.length;
  var i__5836__auto___9191 = 0;
  while (true) {
    if (i__5836__auto___9191 < len__5835__auto___9190) {
      args9182.push(arguments[i__5836__auto___9191]);
      var G__9192 = i__5836__auto___9191 + 1;
      i__5836__auto___9191 = G__9192;
      continue;
    } else {
    }
    break;
  }
  var G__9186 = args9182.length;
  switch(G__9186) {
    case 1:
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9182.slice(1), 0);
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5854__auto__);
  }
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.Atom(x, null, null, null);
};
cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = function(x, p__9187) {
  var map__9188 = p__9187;
  var map__9188__$1 = (!(map__9188 == null) ? map__9188.cljs$lang$protocol_mask$partition0$ & 64 || map__9188.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__9188) : map__9188;
  var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9188__$1, cljs.core.cst$kw$meta);
  var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__9188__$1, cljs.core.cst$kw$validator);
  return new cljs.core.Atom(x, meta, validator, null);
};
cljs.core.atom.cljs$lang$applyTo = function(seq9183) {
  var G__9184 = cljs.core.first(seq9183);
  var seq9183__$1 = cljs.core.next(seq9183);
  return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__9184, seq9183__$1);
};
cljs.core.atom.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str;
cljs.core.reset_BANG_ = function cljs$core$reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null, new_value))) {
      } else {
        throw new Error([cljs.core.str("Assert failed: "), cljs.core.str("Validator rejected reference state"), cljs.core.str("\n"), cljs.core.str(function() {
          var G__9195 = cljs.core.list(cljs.core.cst$sym$validate, cljs.core.cst$sym$new_DASH_value);
          return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9195) : cljs.core.pr_str.call(null, G__9195);
        }())].join(""));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches(a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_(a, new_value);
  }
};
cljs.core.swap_BANG_ = function cljs$core$swap_BANG_(var_args) {
  var args9196 = [];
  var len__5835__auto___9210 = arguments.length;
  var i__5836__auto___9211 = 0;
  while (true) {
    if (i__5836__auto___9211 < len__5835__auto___9210) {
      args9196.push(arguments[i__5836__auto___9211]);
      var G__9212 = i__5836__auto___9211 + 1;
      i__5836__auto___9211 = G__9212;
      continue;
    } else {
    }
    break;
  }
  var G__9203 = args9196.length;
  switch(G__9203) {
    case 2:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9196.slice(4), 0);
      return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5854__auto__);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = function(a, f) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__9204 = a.state;
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9204) : f.call(null, G__9204);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a, f);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = function(a, f, x) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__9205 = a.state;
      var G__9206 = x;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9205, G__9206) : f.call(null, G__9205, G__9206);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a, f, x);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = function(a, f, x, y) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, function() {
      var G__9207 = a.state;
      var G__9208 = x;
      var G__9209 = y;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9207, G__9208, G__9209) : f.call(null, G__9207, G__9208, G__9209);
    }());
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a, f, x, y);
  }
};
cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(a, f, x, y, more) {
  if (a instanceof cljs.core.Atom) {
    return cljs.core.reset_BANG_(a, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, a.state, x, y, more));
  } else {
    return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a, f, x, y, more);
  }
};
cljs.core.swap_BANG_.cljs$lang$applyTo = function(seq9197) {
  var G__9198 = cljs.core.first(seq9197);
  var seq9197__$1 = cljs.core.next(seq9197);
  var G__9199 = cljs.core.first(seq9197__$1);
  var seq9197__$2 = cljs.core.next(seq9197__$1);
  var G__9200 = cljs.core.first(seq9197__$2);
  var seq9197__$3 = cljs.core.next(seq9197__$2);
  var G__9201 = cljs.core.first(seq9197__$3);
  var seq9197__$4 = cljs.core.next(seq9197__$3);
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__9198, G__9199, G__9200, G__9201, seq9197__$4);
};
cljs.core.swap_BANG_.cljs$lang$maxFixedArity = 4;
cljs.core.compare_and_set_BANG_ = function cljs$core$compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null), oldval)) {
    cljs.core.reset_BANG_(a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function cljs$core$set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function cljs$core$get_validator(iref) {
  return iref.validator;
};
cljs.core.Volatile = function(state) {
  this.state = state;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Volatile.prototype.cljs$core$IVolatile$ = true;
cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = function(_, new_state) {
  var self__ = this;
  var ___$1 = this;
  return self__.state = new_state;
};
cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Volatile.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.Volatile.cljs$lang$type = true;
cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";
cljs.core.Volatile.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Volatile");
};
cljs.core.__GT_Volatile = function cljs$core$__GT_Volatile(state) {
  return new cljs.core.Volatile(state);
};
cljs.core.volatile_BANG_ = function cljs$core$volatile_BANG_(val) {
  return new cljs.core.Volatile(val);
};
cljs.core.volatile_QMARK_ = function cljs$core$volatile_QMARK_(x) {
  return x instanceof cljs.core.Volatile;
};
cljs.core.vreset_BANG_ = function cljs$core$vreset_BANG_(vol, newval) {
  return cljs.core._vreset_BANG_(vol, newval);
};
cljs.core.keep_indexed = function cljs$core$keep_indexed(var_args) {
  var args9214 = [];
  var len__5835__auto___9245 = arguments.length;
  var i__5836__auto___9246 = 0;
  while (true) {
    if (i__5836__auto___9246 < len__5835__auto___9245) {
      args9214.push(arguments[i__5836__auto___9246]);
      var G__9247 = i__5836__auto___9246 + 1;
      i__5836__auto___9246 = G__9247;
      continue;
    } else {
    }
    break;
  }
  var G__9216 = args9214.length;
  switch(G__9216) {
    case 1:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9214.length)].join(""));;
  }
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__9249 = null;
        var G__9249__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9249__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9249__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          var v = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i, input) : f.call(null, i, input);
          if (v == null) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          }
        };
        G__9249 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9249__0.call(this);
            case 1:
              return G__9249__1.call(this, result);
            case 2:
              return G__9249__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9249.cljs$core$IFn$_invoke$arity$0 = G__9249__0;
        G__9249.cljs$core$IFn$_invoke$arity$1 = G__9249__1;
        G__9249.cljs$core$IFn$_invoke$arity$2 = G__9249__2;
        return G__9249;
      }();
    }(ia);
  };
};
cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  var keepi = function cljs$core$keepi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4425__auto__ = cljs.core.seq(coll__$1);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(s)) {
          var c = cljs.core.chunk_first(s);
          var size = cljs.core.count(c);
          var b = cljs.core.chunk_buffer(size);
          var n__5680__auto___9250 = size;
          var i_9251 = 0;
          while (true) {
            if (i_9251 < n__5680__auto___9250) {
              var x_9252 = function() {
                var G__9241 = idx + i_9251;
                var G__9242 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9251);
                return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9241, G__9242) : f.call(null, G__9241, G__9242);
              }();
              if (x_9252 == null) {
              } else {
                cljs.core.chunk_append(b, x_9252);
              }
              var G__9253 = i_9251 + 1;
              i_9251 = G__9253;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons(cljs.core.chunk(b), cljs$core$keepi(idx + size, cljs.core.chunk_rest(s)));
        } else {
          var x = function() {
            var G__9243 = idx;
            var G__9244 = cljs.core.first(s);
            return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9243, G__9244) : f.call(null, G__9243, G__9244);
          }();
          if (x == null) {
            return cljs$core$keepi(idx + 1, cljs.core.rest(s));
          } else {
            return cljs.core.cons(x, cljs$core$keepi(idx + 1, cljs.core.rest(s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return keepi(0, coll);
};
cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;
cljs.core.every_pred = function cljs$core$every_pred(var_args) {
  var args9260 = [];
  var len__5835__auto___9267 = arguments.length;
  var i__5836__auto___9268 = 0;
  while (true) {
    if (i__5836__auto___9268 < len__5835__auto___9267) {
      args9260.push(arguments[i__5836__auto___9268]);
      var G__9269 = i__5836__auto___9268 + 1;
      i__5836__auto___9268 = G__9269;
      continue;
    } else {
    }
    break;
  }
  var G__9266 = args9260.length;
  switch(G__9266) {
    case 1:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9260.slice(3), 0);
      return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5854__auto__);
  }
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$ep1 = null;
    var cljs$core$ep1__0 = function() {
      return true;
    };
    var cljs$core$ep1__1 = function(x) {
      return cljs.core.boolean$(p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x));
    };
    var cljs$core$ep1__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4765__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__4765__auto__)) {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        } else {
          return and__4765__auto__;
        }
      }());
    };
    var cljs$core$ep1__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4765__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
        if (cljs.core.truth_(and__4765__auto__)) {
          var and__4765__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
          if (cljs.core.truth_(and__4765__auto____$1)) {
            return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
          } else {
            return and__4765__auto____$1;
          }
        } else {
          return and__4765__auto__;
        }
      }());
    };
    var cljs$core$ep1__4 = function() {
      var G__9271__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4765__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4765__auto__)) {
            return cljs.core.every_QMARK_(p, args);
          } else {
            return and__4765__auto__;
          }
        }());
      };
      var G__9271 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9272__i = 0, G__9272__a = new Array(arguments.length - 3);
          while (G__9272__i < G__9272__a.length) {
            G__9272__a[G__9272__i] = arguments[G__9272__i + 3];
            ++G__9272__i;
          }
          args = new cljs.core.IndexedSeq(G__9272__a, 0);
        }
        return G__9271__delegate.call(this, x, y, z, args);
      };
      G__9271.cljs$lang$maxFixedArity = 3;
      G__9271.cljs$lang$applyTo = function(arglist__9273) {
        var x = cljs.core.first(arglist__9273);
        arglist__9273 = cljs.core.next(arglist__9273);
        var y = cljs.core.first(arglist__9273);
        arglist__9273 = cljs.core.next(arglist__9273);
        var z = cljs.core.first(arglist__9273);
        var args = cljs.core.rest(arglist__9273);
        return G__9271__delegate(x, y, z, args);
      };
      G__9271.cljs$core$IFn$_invoke$arity$variadic = G__9271__delegate;
      return G__9271;
    }();
    cljs$core$ep1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep1__0.call(this);
        case 1:
          return cljs$core$ep1__1.call(this, x);
        case 2:
          return cljs$core$ep1__2.call(this, x, y);
        case 3:
          return cljs$core$ep1__3.call(this, x, y, z);
        default:
          var G__9274 = null;
          if (arguments.length > 3) {
            var G__9275__i = 0, G__9275__a = new Array(arguments.length - 3);
            while (G__9275__i < G__9275__a.length) {
              G__9275__a[G__9275__i] = arguments[G__9275__i + 3];
              ++G__9275__i;
            }
            G__9274 = new cljs.core.IndexedSeq(G__9275__a, 0);
          }
          return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9274);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep1.cljs$lang$maxFixedArity = 3;
    cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
    cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep1;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$ep2 = null;
    var cljs$core$ep2__0 = function() {
      return true;
    };
    var cljs$core$ep2__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4765__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4765__auto__)) {
          return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        } else {
          return and__4765__auto__;
        }
      }());
    };
    var cljs$core$ep2__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4765__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4765__auto__)) {
          var and__4765__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__4765__auto____$1)) {
            var and__4765__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(and__4765__auto____$2)) {
              return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
            } else {
              return and__4765__auto____$2;
            }
          } else {
            return and__4765__auto____$1;
          }
        } else {
          return and__4765__auto__;
        }
      }());
    };
    var cljs$core$ep2__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4765__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4765__auto__)) {
          var and__4765__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
          if (cljs.core.truth_(and__4765__auto____$1)) {
            var and__4765__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
            if (cljs.core.truth_(and__4765__auto____$2)) {
              var and__4765__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
              if (cljs.core.truth_(and__4765__auto____$3)) {
                var and__4765__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4765__auto____$4)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                } else {
                  return and__4765__auto____$4;
                }
              } else {
                return and__4765__auto____$3;
              }
            } else {
              return and__4765__auto____$2;
            }
          } else {
            return and__4765__auto____$1;
          }
        } else {
          return and__4765__auto__;
        }
      }());
    };
    var cljs$core$ep2__4 = function() {
      var G__9276__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4765__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4765__auto__)) {
            return cljs.core.every_QMARK_(function(and__4765__auto__) {
              return function(p1__9254_SHARP_) {
                var and__4765__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9254_SHARP_) : p1.call(null, p1__9254_SHARP_);
                if (cljs.core.truth_(and__4765__auto____$1)) {
                  return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9254_SHARP_) : p2.call(null, p1__9254_SHARP_);
                } else {
                  return and__4765__auto____$1;
                }
              };
            }(and__4765__auto__), args);
          } else {
            return and__4765__auto__;
          }
        }());
      };
      var G__9276 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9277__i = 0, G__9277__a = new Array(arguments.length - 3);
          while (G__9277__i < G__9277__a.length) {
            G__9277__a[G__9277__i] = arguments[G__9277__i + 3];
            ++G__9277__i;
          }
          args = new cljs.core.IndexedSeq(G__9277__a, 0);
        }
        return G__9276__delegate.call(this, x, y, z, args);
      };
      G__9276.cljs$lang$maxFixedArity = 3;
      G__9276.cljs$lang$applyTo = function(arglist__9278) {
        var x = cljs.core.first(arglist__9278);
        arglist__9278 = cljs.core.next(arglist__9278);
        var y = cljs.core.first(arglist__9278);
        arglist__9278 = cljs.core.next(arglist__9278);
        var z = cljs.core.first(arglist__9278);
        var args = cljs.core.rest(arglist__9278);
        return G__9276__delegate(x, y, z, args);
      };
      G__9276.cljs$core$IFn$_invoke$arity$variadic = G__9276__delegate;
      return G__9276;
    }();
    cljs$core$ep2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep2__0.call(this);
        case 1:
          return cljs$core$ep2__1.call(this, x);
        case 2:
          return cljs$core$ep2__2.call(this, x, y);
        case 3:
          return cljs$core$ep2__3.call(this, x, y, z);
        default:
          var G__9279 = null;
          if (arguments.length > 3) {
            var G__9280__i = 0, G__9280__a = new Array(arguments.length - 3);
            while (G__9280__i < G__9280__a.length) {
              G__9280__a[G__9280__i] = arguments[G__9280__i + 3];
              ++G__9280__i;
            }
            G__9279 = new cljs.core.IndexedSeq(G__9280__a, 0);
          }
          return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9279);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep2.cljs$lang$maxFixedArity = 3;
    cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
    cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep2;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$ep3 = null;
    var cljs$core$ep3__0 = function() {
      return true;
    };
    var cljs$core$ep3__1 = function(x) {
      return cljs.core.boolean$(function() {
        var and__4765__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4765__auto__)) {
          var and__4765__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4765__auto____$1)) {
            return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          } else {
            return and__4765__auto____$1;
          }
        } else {
          return and__4765__auto__;
        }
      }());
    };
    var cljs$core$ep3__2 = function(x, y) {
      return cljs.core.boolean$(function() {
        var and__4765__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4765__auto__)) {
          var and__4765__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4765__auto____$1)) {
            var and__4765__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__4765__auto____$2)) {
              var and__4765__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__4765__auto____$3)) {
                var and__4765__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4765__auto____$4)) {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                } else {
                  return and__4765__auto____$4;
                }
              } else {
                return and__4765__auto____$3;
              }
            } else {
              return and__4765__auto____$2;
            }
          } else {
            return and__4765__auto____$1;
          }
        } else {
          return and__4765__auto__;
        }
      }());
    };
    var cljs$core$ep3__3 = function(x, y, z) {
      return cljs.core.boolean$(function() {
        var and__4765__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
        if (cljs.core.truth_(and__4765__auto__)) {
          var and__4765__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(and__4765__auto____$1)) {
            var and__4765__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
            if (cljs.core.truth_(and__4765__auto____$2)) {
              var and__4765__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
              if (cljs.core.truth_(and__4765__auto____$3)) {
                var and__4765__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
                if (cljs.core.truth_(and__4765__auto____$4)) {
                  var and__4765__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                  if (cljs.core.truth_(and__4765__auto____$5)) {
                    var and__4765__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                    if (cljs.core.truth_(and__4765__auto____$6)) {
                      var and__4765__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                      if (cljs.core.truth_(and__4765__auto____$7)) {
                        return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                      } else {
                        return and__4765__auto____$7;
                      }
                    } else {
                      return and__4765__auto____$6;
                    }
                  } else {
                    return and__4765__auto____$5;
                  }
                } else {
                  return and__4765__auto____$4;
                }
              } else {
                return and__4765__auto____$3;
              }
            } else {
              return and__4765__auto____$2;
            }
          } else {
            return and__4765__auto____$1;
          }
        } else {
          return and__4765__auto__;
        }
      }());
    };
    var cljs$core$ep3__4 = function() {
      var G__9281__delegate = function(x, y, z, args) {
        return cljs.core.boolean$(function() {
          var and__4765__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(and__4765__auto__)) {
            return cljs.core.every_QMARK_(function(and__4765__auto__) {
              return function(p1__9255_SHARP_) {
                var and__4765__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9255_SHARP_) : p1.call(null, p1__9255_SHARP_);
                if (cljs.core.truth_(and__4765__auto____$1)) {
                  var and__4765__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9255_SHARP_) : p2.call(null, p1__9255_SHARP_);
                  if (cljs.core.truth_(and__4765__auto____$2)) {
                    return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__9255_SHARP_) : p3.call(null, p1__9255_SHARP_);
                  } else {
                    return and__4765__auto____$2;
                  }
                } else {
                  return and__4765__auto____$1;
                }
              };
            }(and__4765__auto__), args);
          } else {
            return and__4765__auto__;
          }
        }());
      };
      var G__9281 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9282__i = 0, G__9282__a = new Array(arguments.length - 3);
          while (G__9282__i < G__9282__a.length) {
            G__9282__a[G__9282__i] = arguments[G__9282__i + 3];
            ++G__9282__i;
          }
          args = new cljs.core.IndexedSeq(G__9282__a, 0);
        }
        return G__9281__delegate.call(this, x, y, z, args);
      };
      G__9281.cljs$lang$maxFixedArity = 3;
      G__9281.cljs$lang$applyTo = function(arglist__9283) {
        var x = cljs.core.first(arglist__9283);
        arglist__9283 = cljs.core.next(arglist__9283);
        var y = cljs.core.first(arglist__9283);
        arglist__9283 = cljs.core.next(arglist__9283);
        var z = cljs.core.first(arglist__9283);
        var args = cljs.core.rest(arglist__9283);
        return G__9281__delegate(x, y, z, args);
      };
      G__9281.cljs$core$IFn$_invoke$arity$variadic = G__9281__delegate;
      return G__9281;
    }();
    cljs$core$ep3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$ep3__0.call(this);
        case 1:
          return cljs$core$ep3__1.call(this, x);
        case 2:
          return cljs$core$ep3__2.call(this, x, y);
        case 3:
          return cljs$core$ep3__3.call(this, x, y, z);
        default:
          var G__9284 = null;
          if (arguments.length > 3) {
            var G__9285__i = 0, G__9285__a = new Array(arguments.length - 3);
            while (G__9285__i < G__9285__a.length) {
              G__9285__a[G__9285__i] = arguments[G__9285__i + 3];
              ++G__9285__i;
            }
            G__9284 = new cljs.core.IndexedSeq(G__9285__a, 0);
          }
          return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9284);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$ep3.cljs$lang$maxFixedArity = 3;
    cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
    cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$ep3;
  }();
};
cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$epn = null;
      var cljs$core$epn__0 = function() {
        return true;
      };
      var cljs$core$epn__1 = function(x) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__9256_SHARP_) {
            return p1__9256_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9256_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9256_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__2 = function(x, y) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__9257_SHARP_) {
            var and__4765__auto__ = p1__9257_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9257_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9257_SHARP_.call(null, x);
            if (cljs.core.truth_(and__4765__auto__)) {
              return p1__9257_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9257_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9257_SHARP_.call(null, y);
            } else {
              return and__4765__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__3 = function(x, y, z) {
        return cljs.core.every_QMARK_(function(ps__$1) {
          return function(p1__9258_SHARP_) {
            var and__4765__auto__ = p1__9258_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9258_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9258_SHARP_.call(null, x);
            if (cljs.core.truth_(and__4765__auto__)) {
              var and__4765__auto____$1 = p1__9258_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9258_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9258_SHARP_.call(null, y);
              if (cljs.core.truth_(and__4765__auto____$1)) {
                return p1__9258_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9258_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__9258_SHARP_.call(null, z);
              } else {
                return and__4765__auto____$1;
              }
            } else {
              return and__4765__auto__;
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$epn__4 = function() {
        var G__9286__delegate = function(x, y, z, args) {
          return cljs.core.boolean$(function() {
            var and__4765__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x, y, z);
            if (cljs.core.truth_(and__4765__auto__)) {
              return cljs.core.every_QMARK_(function(and__4765__auto__, ps__$1) {
                return function(p1__9259_SHARP_) {
                  return cljs.core.every_QMARK_(p1__9259_SHARP_, args);
                };
              }(and__4765__auto__, ps__$1), ps__$1);
            } else {
              return and__4765__auto__;
            }
          }());
        };
        var G__9286 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9287__i = 0, G__9287__a = new Array(arguments.length - 3);
            while (G__9287__i < G__9287__a.length) {
              G__9287__a[G__9287__i] = arguments[G__9287__i + 3];
              ++G__9287__i;
            }
            args = new cljs.core.IndexedSeq(G__9287__a, 0);
          }
          return G__9286__delegate.call(this, x, y, z, args);
        };
        G__9286.cljs$lang$maxFixedArity = 3;
        G__9286.cljs$lang$applyTo = function(arglist__9288) {
          var x = cljs.core.first(arglist__9288);
          arglist__9288 = cljs.core.next(arglist__9288);
          var y = cljs.core.first(arglist__9288);
          arglist__9288 = cljs.core.next(arglist__9288);
          var z = cljs.core.first(arglist__9288);
          var args = cljs.core.rest(arglist__9288);
          return G__9286__delegate(x, y, z, args);
        };
        G__9286.cljs$core$IFn$_invoke$arity$variadic = G__9286__delegate;
        return G__9286;
      }();
      cljs$core$epn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$epn__0.call(this);
          case 1:
            return cljs$core$epn__1.call(this, x);
          case 2:
            return cljs$core$epn__2.call(this, x, y);
          case 3:
            return cljs$core$epn__3.call(this, x, y, z);
          default:
            var G__9289 = null;
            if (arguments.length > 3) {
              var G__9290__i = 0, G__9290__a = new Array(arguments.length - 3);
              while (G__9290__i < G__9290__a.length) {
                G__9290__a[G__9290__i] = arguments[G__9290__i + 3];
                ++G__9290__i;
              }
              G__9289 = new cljs.core.IndexedSeq(G__9290__a, 0);
            }
            return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9289);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$epn.cljs$lang$maxFixedArity = 3;
      cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
      cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$epn;
    }();
  }(ps__$1);
};
cljs.core.every_pred.cljs$lang$applyTo = function(seq9261) {
  var G__9262 = cljs.core.first(seq9261);
  var seq9261__$1 = cljs.core.next(seq9261);
  var G__9263 = cljs.core.first(seq9261__$1);
  var seq9261__$2 = cljs.core.next(seq9261__$1);
  var G__9264 = cljs.core.first(seq9261__$2);
  var seq9261__$3 = cljs.core.next(seq9261__$2);
  return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__9262, G__9263, G__9264, seq9261__$3);
};
cljs.core.every_pred.cljs$lang$maxFixedArity = 3;
cljs.core.some_fn = function cljs$core$some_fn(var_args) {
  var args9297 = [];
  var len__5835__auto___9304 = arguments.length;
  var i__5836__auto___9305 = 0;
  while (true) {
    if (i__5836__auto___9305 < len__5835__auto___9304) {
      args9297.push(arguments[i__5836__auto___9305]);
      var G__9306 = i__5836__auto___9305 + 1;
      i__5836__auto___9305 = G__9306;
      continue;
    } else {
    }
    break;
  }
  var G__9303 = args9297.length;
  switch(G__9303) {
    case 1:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9297.slice(3), 0);
      return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5854__auto__);
  }
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = function(p) {
  return function() {
    var cljs$core$sp1 = null;
    var cljs$core$sp1__0 = function() {
      return null;
    };
    var cljs$core$sp1__1 = function(x) {
      return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
    };
    var cljs$core$sp1__2 = function(x, y) {
      var or__4777__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
      }
    };
    var cljs$core$sp1__3 = function(x, y, z) {
      var or__4777__auto__ = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null, x);
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        var or__4777__auto____$1 = p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null, y);
        if (cljs.core.truth_(or__4777__auto____$1)) {
          return or__4777__auto____$1;
        } else {
          return p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null, z);
        }
      }
    };
    var cljs$core$sp1__4 = function() {
      var G__9308__delegate = function(x, y, z, args) {
        var or__4777__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4777__auto__)) {
          return or__4777__auto__;
        } else {
          return cljs.core.some(p, args);
        }
      };
      var G__9308 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9309__i = 0, G__9309__a = new Array(arguments.length - 3);
          while (G__9309__i < G__9309__a.length) {
            G__9309__a[G__9309__i] = arguments[G__9309__i + 3];
            ++G__9309__i;
          }
          args = new cljs.core.IndexedSeq(G__9309__a, 0);
        }
        return G__9308__delegate.call(this, x, y, z, args);
      };
      G__9308.cljs$lang$maxFixedArity = 3;
      G__9308.cljs$lang$applyTo = function(arglist__9310) {
        var x = cljs.core.first(arglist__9310);
        arglist__9310 = cljs.core.next(arglist__9310);
        var y = cljs.core.first(arglist__9310);
        arglist__9310 = cljs.core.next(arglist__9310);
        var z = cljs.core.first(arglist__9310);
        var args = cljs.core.rest(arglist__9310);
        return G__9308__delegate(x, y, z, args);
      };
      G__9308.cljs$core$IFn$_invoke$arity$variadic = G__9308__delegate;
      return G__9308;
    }();
    cljs$core$sp1 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp1__0.call(this);
        case 1:
          return cljs$core$sp1__1.call(this, x);
        case 2:
          return cljs$core$sp1__2.call(this, x, y);
        case 3:
          return cljs$core$sp1__3.call(this, x, y, z);
        default:
          var G__9311 = null;
          if (arguments.length > 3) {
            var G__9312__i = 0, G__9312__a = new Array(arguments.length - 3);
            while (G__9312__i < G__9312__a.length) {
              G__9312__a[G__9312__i] = arguments[G__9312__i + 3];
              ++G__9312__i;
            }
            G__9311 = new cljs.core.IndexedSeq(G__9312__a, 0);
          }
          return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9311);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp1.cljs$lang$maxFixedArity = 3;
    cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
    cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp1;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = function(p1, p2) {
  return function() {
    var cljs$core$sp2 = null;
    var cljs$core$sp2__0 = function() {
      return null;
    };
    var cljs$core$sp2__1 = function(x) {
      var or__4777__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
      }
    };
    var cljs$core$sp2__2 = function(x, y) {
      var or__4777__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        var or__4777__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__4777__auto____$1)) {
          return or__4777__auto____$1;
        } else {
          var or__4777__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
          if (cljs.core.truth_(or__4777__auto____$2)) {
            return or__4777__auto____$2;
          } else {
            return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
          }
        }
      }
    };
    var cljs$core$sp2__3 = function(x, y, z) {
      var or__4777__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        var or__4777__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
        if (cljs.core.truth_(or__4777__auto____$1)) {
          return or__4777__auto____$1;
        } else {
          var or__4777__auto____$2 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
          if (cljs.core.truth_(or__4777__auto____$2)) {
            return or__4777__auto____$2;
          } else {
            var or__4777__auto____$3 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
            if (cljs.core.truth_(or__4777__auto____$3)) {
              return or__4777__auto____$3;
            } else {
              var or__4777__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4777__auto____$4)) {
                return or__4777__auto____$4;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp2__4 = function() {
      var G__9313__delegate = function(x, y, z, args) {
        var or__4777__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4777__auto__)) {
          return or__4777__auto__;
        } else {
          return cljs.core.some(function(or__4777__auto__) {
            return function(p1__9291_SHARP_) {
              var or__4777__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9291_SHARP_) : p1.call(null, p1__9291_SHARP_);
              if (cljs.core.truth_(or__4777__auto____$1)) {
                return or__4777__auto____$1;
              } else {
                return p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9291_SHARP_) : p2.call(null, p1__9291_SHARP_);
              }
            };
          }(or__4777__auto__), args);
        }
      };
      var G__9313 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9314__i = 0, G__9314__a = new Array(arguments.length - 3);
          while (G__9314__i < G__9314__a.length) {
            G__9314__a[G__9314__i] = arguments[G__9314__i + 3];
            ++G__9314__i;
          }
          args = new cljs.core.IndexedSeq(G__9314__a, 0);
        }
        return G__9313__delegate.call(this, x, y, z, args);
      };
      G__9313.cljs$lang$maxFixedArity = 3;
      G__9313.cljs$lang$applyTo = function(arglist__9315) {
        var x = cljs.core.first(arglist__9315);
        arglist__9315 = cljs.core.next(arglist__9315);
        var y = cljs.core.first(arglist__9315);
        arglist__9315 = cljs.core.next(arglist__9315);
        var z = cljs.core.first(arglist__9315);
        var args = cljs.core.rest(arglist__9315);
        return G__9313__delegate(x, y, z, args);
      };
      G__9313.cljs$core$IFn$_invoke$arity$variadic = G__9313__delegate;
      return G__9313;
    }();
    cljs$core$sp2 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp2__0.call(this);
        case 1:
          return cljs$core$sp2__1.call(this, x);
        case 2:
          return cljs$core$sp2__2.call(this, x, y);
        case 3:
          return cljs$core$sp2__3.call(this, x, y, z);
        default:
          var G__9316 = null;
          if (arguments.length > 3) {
            var G__9317__i = 0, G__9317__a = new Array(arguments.length - 3);
            while (G__9317__i < G__9317__a.length) {
              G__9317__a[G__9317__i] = arguments[G__9317__i + 3];
              ++G__9317__i;
            }
            G__9316 = new cljs.core.IndexedSeq(G__9317__a, 0);
          }
          return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9316);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp2.cljs$lang$maxFixedArity = 3;
    cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
    cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp2;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = function(p1, p2, p3) {
  return function() {
    var cljs$core$sp3 = null;
    var cljs$core$sp3__0 = function() {
      return null;
    };
    var cljs$core$sp3__1 = function(x) {
      var or__4777__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        var or__4777__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4777__auto____$1)) {
          return or__4777__auto____$1;
        } else {
          return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
        }
      }
    };
    var cljs$core$sp3__2 = function(x, y) {
      var or__4777__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        var or__4777__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4777__auto____$1)) {
          return or__4777__auto____$1;
        } else {
          var or__4777__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__4777__auto____$2)) {
            return or__4777__auto____$2;
          } else {
            var or__4777__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__4777__auto____$3)) {
              return or__4777__auto____$3;
            } else {
              var or__4777__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4777__auto____$4)) {
                return or__4777__auto____$4;
              } else {
                return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__3 = function(x, y, z) {
      var or__4777__auto__ = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null, x);
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        var or__4777__auto____$1 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null, x);
        if (cljs.core.truth_(or__4777__auto____$1)) {
          return or__4777__auto____$1;
        } else {
          var or__4777__auto____$2 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null, x);
          if (cljs.core.truth_(or__4777__auto____$2)) {
            return or__4777__auto____$2;
          } else {
            var or__4777__auto____$3 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null, y);
            if (cljs.core.truth_(or__4777__auto____$3)) {
              return or__4777__auto____$3;
            } else {
              var or__4777__auto____$4 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null, y);
              if (cljs.core.truth_(or__4777__auto____$4)) {
                return or__4777__auto____$4;
              } else {
                var or__4777__auto____$5 = p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null, y);
                if (cljs.core.truth_(or__4777__auto____$5)) {
                  return or__4777__auto____$5;
                } else {
                  var or__4777__auto____$6 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null, z);
                  if (cljs.core.truth_(or__4777__auto____$6)) {
                    return or__4777__auto____$6;
                  } else {
                    var or__4777__auto____$7 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null, z);
                    if (cljs.core.truth_(or__4777__auto____$7)) {
                      return or__4777__auto____$7;
                    } else {
                      return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null, z);
                    }
                  }
                }
              }
            }
          }
        }
      }
    };
    var cljs$core$sp3__4 = function() {
      var G__9318__delegate = function(x, y, z, args) {
        var or__4777__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x, y, z);
        if (cljs.core.truth_(or__4777__auto__)) {
          return or__4777__auto__;
        } else {
          return cljs.core.some(function(or__4777__auto__) {
            return function(p1__9292_SHARP_) {
              var or__4777__auto____$1 = p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__9292_SHARP_) : p1.call(null, p1__9292_SHARP_);
              if (cljs.core.truth_(or__4777__auto____$1)) {
                return or__4777__auto____$1;
              } else {
                var or__4777__auto____$2 = p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__9292_SHARP_) : p2.call(null, p1__9292_SHARP_);
                if (cljs.core.truth_(or__4777__auto____$2)) {
                  return or__4777__auto____$2;
                } else {
                  return p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__9292_SHARP_) : p3.call(null, p1__9292_SHARP_);
                }
              }
            };
          }(or__4777__auto__), args);
        }
      };
      var G__9318 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__9319__i = 0, G__9319__a = new Array(arguments.length - 3);
          while (G__9319__i < G__9319__a.length) {
            G__9319__a[G__9319__i] = arguments[G__9319__i + 3];
            ++G__9319__i;
          }
          args = new cljs.core.IndexedSeq(G__9319__a, 0);
        }
        return G__9318__delegate.call(this, x, y, z, args);
      };
      G__9318.cljs$lang$maxFixedArity = 3;
      G__9318.cljs$lang$applyTo = function(arglist__9320) {
        var x = cljs.core.first(arglist__9320);
        arglist__9320 = cljs.core.next(arglist__9320);
        var y = cljs.core.first(arglist__9320);
        arglist__9320 = cljs.core.next(arglist__9320);
        var z = cljs.core.first(arglist__9320);
        var args = cljs.core.rest(arglist__9320);
        return G__9318__delegate(x, y, z, args);
      };
      G__9318.cljs$core$IFn$_invoke$arity$variadic = G__9318__delegate;
      return G__9318;
    }();
    cljs$core$sp3 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return cljs$core$sp3__0.call(this);
        case 1:
          return cljs$core$sp3__1.call(this, x);
        case 2:
          return cljs$core$sp3__2.call(this, x, y);
        case 3:
          return cljs$core$sp3__3.call(this, x, y, z);
        default:
          var G__9321 = null;
          if (arguments.length > 3) {
            var G__9322__i = 0, G__9322__a = new Array(arguments.length - 3);
            while (G__9322__i < G__9322__a.length) {
              G__9322__a[G__9322__i] = arguments[G__9322__i + 3];
              ++G__9322__i;
            }
            G__9321 = new cljs.core.IndexedSeq(G__9322__a, 0);
          }
          return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9321);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    cljs$core$sp3.cljs$lang$maxFixedArity = 3;
    cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
    cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
    return cljs$core$sp3;
  }();
};
cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = function(p1, p2, p3, ps) {
  var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1, p2, p3, ps);
  return function(ps__$1) {
    return function() {
      var cljs$core$spn = null;
      var cljs$core$spn__0 = function() {
        return null;
      };
      var cljs$core$spn__1 = function(x) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9293_SHARP_) {
            return p1__9293_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9293_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9293_SHARP_.call(null, x);
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__2 = function(x, y) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9294_SHARP_) {
            var or__4777__auto__ = p1__9294_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9294_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9294_SHARP_.call(null, x);
            if (cljs.core.truth_(or__4777__auto__)) {
              return or__4777__auto__;
            } else {
              return p1__9294_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9294_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9294_SHARP_.call(null, y);
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__3 = function(x, y, z) {
        return cljs.core.some(function(ps__$1) {
          return function(p1__9295_SHARP_) {
            var or__4777__auto__ = p1__9295_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9295_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__9295_SHARP_.call(null, x);
            if (cljs.core.truth_(or__4777__auto__)) {
              return or__4777__auto__;
            } else {
              var or__4777__auto____$1 = p1__9295_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9295_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__9295_SHARP_.call(null, y);
              if (cljs.core.truth_(or__4777__auto____$1)) {
                return or__4777__auto____$1;
              } else {
                return p1__9295_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__9295_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__9295_SHARP_.call(null, z);
              }
            }
          };
        }(ps__$1), ps__$1);
      };
      var cljs$core$spn__4 = function() {
        var G__9323__delegate = function(x, y, z, args) {
          var or__4777__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x, y, z);
          if (cljs.core.truth_(or__4777__auto__)) {
            return or__4777__auto__;
          } else {
            return cljs.core.some(function(or__4777__auto__, ps__$1) {
              return function(p1__9296_SHARP_) {
                return cljs.core.some(p1__9296_SHARP_, args);
              };
            }(or__4777__auto__, ps__$1), ps__$1);
          }
        };
        var G__9323 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__9324__i = 0, G__9324__a = new Array(arguments.length - 3);
            while (G__9324__i < G__9324__a.length) {
              G__9324__a[G__9324__i] = arguments[G__9324__i + 3];
              ++G__9324__i;
            }
            args = new cljs.core.IndexedSeq(G__9324__a, 0);
          }
          return G__9323__delegate.call(this, x, y, z, args);
        };
        G__9323.cljs$lang$maxFixedArity = 3;
        G__9323.cljs$lang$applyTo = function(arglist__9325) {
          var x = cljs.core.first(arglist__9325);
          arglist__9325 = cljs.core.next(arglist__9325);
          var y = cljs.core.first(arglist__9325);
          arglist__9325 = cljs.core.next(arglist__9325);
          var z = cljs.core.first(arglist__9325);
          var args = cljs.core.rest(arglist__9325);
          return G__9323__delegate(x, y, z, args);
        };
        G__9323.cljs$core$IFn$_invoke$arity$variadic = G__9323__delegate;
        return G__9323;
      }();
      cljs$core$spn = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return cljs$core$spn__0.call(this);
          case 1:
            return cljs$core$spn__1.call(this, x);
          case 2:
            return cljs$core$spn__2.call(this, x, y);
          case 3:
            return cljs$core$spn__3.call(this, x, y, z);
          default:
            var G__9326 = null;
            if (arguments.length > 3) {
              var G__9327__i = 0, G__9327__a = new Array(arguments.length - 3);
              while (G__9327__i < G__9327__a.length) {
                G__9327__a[G__9327__i] = arguments[G__9327__i + 3];
                ++G__9327__i;
              }
              G__9326 = new cljs.core.IndexedSeq(G__9327__a, 0);
            }
            return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__9326);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      cljs$core$spn.cljs$lang$maxFixedArity = 3;
      cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
      cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
      return cljs$core$spn;
    }();
  }(ps__$1);
};
cljs.core.some_fn.cljs$lang$applyTo = function(seq9298) {
  var G__9299 = cljs.core.first(seq9298);
  var seq9298__$1 = cljs.core.next(seq9298);
  var G__9300 = cljs.core.first(seq9298__$1);
  var seq9298__$2 = cljs.core.next(seq9298__$1);
  var G__9301 = cljs.core.first(seq9298__$2);
  var seq9298__$3 = cljs.core.next(seq9298__$2);
  return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__9299, G__9300, G__9301, seq9298__$3);
};
cljs.core.some_fn.cljs$lang$maxFixedArity = 3;
cljs.core.map = function cljs$core$map(var_args) {
  var args9329 = [];
  var len__5835__auto___9349 = arguments.length;
  var i__5836__auto___9350 = 0;
  while (true) {
    if (i__5836__auto___9350 < len__5835__auto___9349) {
      args9329.push(arguments[i__5836__auto___9350]);
      var G__9351 = i__5836__auto___9350 + 1;
      i__5836__auto___9350 = G__9351;
      continue;
    } else {
    }
    break;
  }
  var G__9336 = args9329.length;
  switch(G__9336) {
    case 1:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.map.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9329.slice(4), 0);
      return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5854__auto__);
  }
};
cljs.core.map.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    return function() {
      var G__9353 = null;
      var G__9353__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9353__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9353__2 = function(result, input) {
        var G__9337 = result;
        var G__9338 = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
        return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9337, G__9338) : rf.call(null, G__9337, G__9338);
      };
      var G__9353__3 = function() {
        var G__9354__delegate = function(result, input, inputs) {
          var G__9339 = result;
          var G__9340 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, input, inputs);
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__9339, G__9340) : rf.call(null, G__9339, G__9340);
        };
        var G__9354 = function(result, input, var_args) {
          var inputs = null;
          if (arguments.length > 2) {
            var G__9355__i = 0, G__9355__a = new Array(arguments.length - 2);
            while (G__9355__i < G__9355__a.length) {
              G__9355__a[G__9355__i] = arguments[G__9355__i + 2];
              ++G__9355__i;
            }
            inputs = new cljs.core.IndexedSeq(G__9355__a, 0);
          }
          return G__9354__delegate.call(this, result, input, inputs);
        };
        G__9354.cljs$lang$maxFixedArity = 2;
        G__9354.cljs$lang$applyTo = function(arglist__9356) {
          var result = cljs.core.first(arglist__9356);
          arglist__9356 = cljs.core.next(arglist__9356);
          var input = cljs.core.first(arglist__9356);
          var inputs = cljs.core.rest(arglist__9356);
          return G__9354__delegate(result, input, inputs);
        };
        G__9354.cljs$core$IFn$_invoke$arity$variadic = G__9354__delegate;
        return G__9354;
      }();
      G__9353 = function(result, input, var_args) {
        var inputs = var_args;
        switch(arguments.length) {
          case 0:
            return G__9353__0.call(this);
          case 1:
            return G__9353__1.call(this, result);
          case 2:
            return G__9353__2.call(this, result, input);
          default:
            var G__9357 = null;
            if (arguments.length > 2) {
              var G__9358__i = 0, G__9358__a = new Array(arguments.length - 2);
              while (G__9358__i < G__9358__a.length) {
                G__9358__a[G__9358__i] = arguments[G__9358__i + 2];
                ++G__9358__i;
              }
              G__9357 = new cljs.core.IndexedSeq(G__9358__a, 0);
            }
            return G__9353__3.cljs$core$IFn$_invoke$arity$variadic(result, input, G__9357);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9353.cljs$lang$maxFixedArity = 2;
      G__9353.cljs$lang$applyTo = G__9353__3.cljs$lang$applyTo;
      G__9353.cljs$core$IFn$_invoke$arity$0 = G__9353__0;
      G__9353.cljs$core$IFn$_invoke$arity$1 = G__9353__1;
      G__9353.cljs$core$IFn$_invoke$arity$2 = G__9353__2;
      G__9353.cljs$core$IFn$_invoke$arity$variadic = G__9353__3.cljs$core$IFn$_invoke$arity$variadic;
      return G__9353;
    }();
  };
};
cljs.core.map.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5680__auto___9359 = size;
        var i_9360 = 0;
        while (true) {
          if (i_9360 < n__5680__auto___9359) {
            cljs.core.chunk_append(b, function() {
              var G__9341 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9360);
              return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9341) : f.call(null, G__9341);
            }());
            var G__9361 = i_9360 + 1;
            i_9360 = G__9361;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.chunk_rest(s)));
      } else {
        return cljs.core.cons(function() {
          var G__9342 = cljs.core.first(s);
          return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9342) : f.call(null, G__9342);
        }(), cljs.core.map.cljs$core$IFn$_invoke$arity$2(f, cljs.core.rest(s)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(function() {
        var G__9343 = cljs.core.first(s1);
        var G__9344 = cljs.core.first(s2);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9343, G__9344) : f.call(null, G__9343, G__9344);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, cljs.core.rest(s1), cljs.core.rest(s2)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    var s3 = cljs.core.seq(c3);
    if (s1 && s2 && s3) {
      return cljs.core.cons(function() {
        var G__9345 = cljs.core.first(s1);
        var G__9346 = cljs.core.first(s2);
        var G__9347 = cljs.core.first(s3);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9345, G__9346, G__9347) : f.call(null, G__9345, G__9346, G__9347);
      }(), cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, cljs.core.rest(s1), cljs.core.rest(s2), cljs.core.rest(s3)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  var step = function cljs$core$step(cs) {
    return new cljs.core.LazySeq(null, function() {
      var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cs);
      if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
        return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
      } else {
        return null;
      }
    }, null, null);
  };
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(step) {
    return function(p1__9328_SHARP_) {
      return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, p1__9328_SHARP_);
    };
  }(step), step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c3, cljs.core.array_seq([c2, c1], 0))));
};
cljs.core.map.cljs$lang$applyTo = function(seq9330) {
  var G__9331 = cljs.core.first(seq9330);
  var seq9330__$1 = cljs.core.next(seq9330);
  var G__9332 = cljs.core.first(seq9330__$1);
  var seq9330__$2 = cljs.core.next(seq9330__$1);
  var G__9333 = cljs.core.first(seq9330__$2);
  var seq9330__$3 = cljs.core.next(seq9330__$2);
  var G__9334 = cljs.core.first(seq9330__$3);
  var seq9330__$4 = cljs.core.next(seq9330__$3);
  return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__9331, G__9332, G__9333, G__9334, seq9330__$4);
};
cljs.core.map.cljs$lang$maxFixedArity = 4;
cljs.core.take = function cljs$core$take(var_args) {
  var args9362 = [];
  var len__5835__auto___9367 = arguments.length;
  var i__5836__auto___9368 = 0;
  while (true) {
    if (i__5836__auto___9368 < len__5835__auto___9367) {
      args9362.push(arguments[i__5836__auto___9368]);
      var G__9369 = i__5836__auto___9368 + 1;
      i__5836__auto___9368 = G__9369;
      continue;
    } else {
    }
    break;
  }
  var G__9364 = args9362.length;
  switch(G__9364) {
    case 1:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9362.length)].join(""));;
  }
};
cljs.core.take.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9365 = cljs.core.list(cljs.core.cst$sym$number_QMARK_, cljs.core.cst$sym$n);
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9365) : cljs.core.pr_str.call(null, G__9365);
    }())].join(""));
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9371 = null;
        var G__9371__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9371__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9371__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          var nn = cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          var result__$1 = n__$1 > 0 ? rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input) : result;
          if (!(nn > 0)) {
            return cljs.core.ensure_reduced(result__$1);
          } else {
            return result__$1;
          }
        };
        G__9371 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9371__0.call(this);
            case 1:
              return G__9371__1.call(this, result);
            case 2:
              return G__9371__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9371.cljs$core$IFn$_invoke$arity$0 = G__9371__0;
        G__9371.cljs$core$IFn$_invoke$arity$1 = G__9371__1;
        G__9371.cljs$core$IFn$_invoke$arity$2 = G__9371__2;
        return G__9371;
      }();
    }(na);
  };
};
cljs.core.take.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9366 = cljs.core.list(cljs.core.cst$sym$number_QMARK_, cljs.core.cst$sym$n);
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9366) : cljs.core.pr_str.call(null, G__9366);
    }())].join(""));
  }
  return new cljs.core.LazySeq(null, function() {
    if (n > 0) {
      var temp__4425__auto__ = cljs.core.seq(coll);
      if (temp__4425__auto__) {
        var s = temp__4425__auto__;
        return cljs.core.cons(cljs.core.first(s), cljs.core.take.cljs$core$IFn$_invoke$arity$2(n - 1, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take.cljs$lang$maxFixedArity = 2;
cljs.core.drop = function cljs$core$drop(var_args) {
  var args9372 = [];
  var len__5835__auto___9377 = arguments.length;
  var i__5836__auto___9378 = 0;
  while (true) {
    if (i__5836__auto___9378 < len__5835__auto___9377) {
      args9372.push(arguments[i__5836__auto___9378]);
      var G__9379 = i__5836__auto___9378 + 1;
      i__5836__auto___9378 = G__9379;
      continue;
    } else {
    }
    break;
  }
  var G__9374 = args9372.length;
  switch(G__9374) {
    case 1:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9372.length)].join(""));;
  }
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9375 = cljs.core.list(cljs.core.cst$sym$number_QMARK_, cljs.core.cst$sym$n);
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9375) : cljs.core.pr_str.call(null, G__9375);
    }())].join(""));
  }
  return function(rf) {
    var na = cljs.core.volatile_BANG_(n);
    return function(na) {
      return function() {
        var G__9381 = null;
        var G__9381__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9381__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9381__2 = function(result, input) {
          var n__$1 = cljs.core.deref(na);
          cljs.core._vreset_BANG_(na, cljs.core._deref(na) - 1);
          if (n__$1 > 0) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9381 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9381__0.call(this);
            case 1:
              return G__9381__1.call(this, result);
            case 2:
              return G__9381__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9381.cljs$core$IFn$_invoke$arity$0 = G__9381__0;
        G__9381.cljs$core$IFn$_invoke$arity$1 = G__9381__1;
        G__9381.cljs$core$IFn$_invoke$arity$2 = G__9381__2;
        return G__9381;
      }();
    }(na);
  };
};
cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__9376 = cljs.core.list(cljs.core.cst$sym$number_QMARK_, cljs.core.cst$sym$n);
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__9376) : cljs.core.pr_str.call(null, G__9376);
    }())].join(""));
  }
  var step = function(n__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (n__$1 > 0 && s) {
        var G__9382 = n__$1 - 1;
        var G__9383 = cljs.core.rest(s);
        n__$1 = G__9382;
        coll__$1 = G__9383;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(n, coll);
    };
  }(step), null, null);
};
cljs.core.drop.cljs$lang$maxFixedArity = 2;
cljs.core.drop_last = function cljs$core$drop_last(var_args) {
  var args9384 = [];
  var len__5835__auto___9387 = arguments.length;
  var i__5836__auto___9388 = 0;
  while (true) {
    if (i__5836__auto___9388 < len__5835__auto___9387) {
      args9384.push(arguments[i__5836__auto___9388]);
      var G__9389 = i__5836__auto___9388 + 1;
      i__5836__auto___9388 = G__9389;
      continue;
    } else {
    }
    break;
  }
  var G__9386 = args9384.length;
  switch(G__9386) {
    case 1:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9384.length)].join(""));;
  }
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = function(s) {
  return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2(1, s);
};
cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = function(n, s) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$3(function(x, _) {
    return x;
  }, s, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s));
};
cljs.core.drop_last.cljs$lang$maxFixedArity = 2;
cljs.core.take_last = function cljs$core$take_last(n, coll) {
  var s = cljs.core.seq(coll);
  var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll));
  while (true) {
    if (lead) {
      var G__9391 = cljs.core.next(s);
      var G__9392 = cljs.core.next(lead);
      s = G__9391;
      lead = G__9392;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function cljs$core$drop_while(var_args) {
  var args9393 = [];
  var len__5835__auto___9398 = arguments.length;
  var i__5836__auto___9399 = 0;
  while (true) {
    if (i__5836__auto___9399 < len__5835__auto___9398) {
      args9393.push(arguments[i__5836__auto___9399]);
      var G__9400 = i__5836__auto___9399 + 1;
      i__5836__auto___9399 = G__9400;
      continue;
    } else {
    }
    break;
  }
  var G__9395 = args9393.length;
  switch(G__9395) {
    case 1:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9393.length)].join(""));;
  }
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    var da = cljs.core.volatile_BANG_(true);
    return function(da) {
      return function() {
        var G__9402 = null;
        var G__9402__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9402__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9402__2 = function(result, input) {
          var drop_QMARK_ = cljs.core.deref(da);
          if (cljs.core.truth_(function() {
            var and__4765__auto__ = drop_QMARK_;
            if (cljs.core.truth_(and__4765__auto__)) {
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input);
            } else {
              return and__4765__auto__;
            }
          }())) {
            return result;
          } else {
            cljs.core.vreset_BANG_(da, null);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9402 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9402__0.call(this);
            case 1:
              return G__9402__1.call(this, result);
            case 2:
              return G__9402__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9402.cljs$core$IFn$_invoke$arity$0 = G__9402__0;
        G__9402.cljs$core$IFn$_invoke$arity$1 = G__9402__1;
        G__9402.cljs$core$IFn$_invoke$arity$2 = G__9402__2;
        return G__9402;
      }();
    }(da);
  };
};
cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  var step = function(pred__$1, coll__$1) {
    while (true) {
      var s = cljs.core.seq(coll__$1);
      if (cljs.core.truth_(function() {
        var and__4765__auto__ = s;
        if (and__4765__auto__) {
          var G__9397 = cljs.core.first(s);
          return pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__9397) : pred__$1.call(null, G__9397);
        } else {
          return and__4765__auto__;
        }
      }())) {
        var G__9403 = pred__$1;
        var G__9404 = cljs.core.rest(s);
        pred__$1 = G__9403;
        coll__$1 = G__9404;
        continue;
      } else {
        return s;
      }
      break;
    }
  };
  return new cljs.core.LazySeq(null, function(step) {
    return function() {
      return step(pred, coll);
    };
  }(step), null, null);
};
cljs.core.drop_while.cljs$lang$maxFixedArity = 2;
cljs.core.cycle = function cljs$core$cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s, cljs$core$cycle(s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function cljs$core$split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, coll), cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, coll)], null);
};
cljs.core.repeat = function cljs$core$repeat(var_args) {
  var args9405 = [];
  var len__5835__auto___9408 = arguments.length;
  var i__5836__auto___9409 = 0;
  while (true) {
    if (i__5836__auto___9409 < len__5835__auto___9408) {
      args9405.push(arguments[i__5836__auto___9409]);
      var G__9410 = i__5836__auto___9409 + 1;
      i__5836__auto___9409 = G__9410;
      continue;
    } else {
    }
    break;
  }
  var G__9407 = args9405.length;
  switch(G__9407) {
    case 1:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9405.length)].join(""));;
  }
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(x, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
  }, null, null);
};
cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = function(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeat.cljs$lang$maxFixedArity = 2;
cljs.core.replicate = function cljs$core$replicate(n, x) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
};
cljs.core.repeatedly = function cljs$core$repeatedly(var_args) {
  var args9412 = [];
  var len__5835__auto___9415 = arguments.length;
  var i__5836__auto___9416 = 0;
  while (true) {
    if (i__5836__auto___9416 < len__5835__auto___9415) {
      args9412.push(arguments[i__5836__auto___9416]);
      var G__9417 = i__5836__auto___9416 + 1;
      i__5836__auto___9416 = G__9417;
      continue;
    } else {
    }
    break;
  }
  var G__9414 = args9412.length;
  switch(G__9414) {
    case 1:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9412.length)].join(""));;
  }
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return new cljs.core.LazySeq(null, function() {
    return cljs.core.cons(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
  }, null, null);
};
cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = function(n, f) {
  return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
};
cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;
cljs.core.iterate = function cljs$core$iterate(f, x) {
  return cljs.core.cons(x, new cljs.core.LazySeq(null, function() {
    return cljs$core$iterate(f, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function cljs$core$interleave(var_args) {
  var args9421 = [];
  var len__5835__auto___9427 = arguments.length;
  var i__5836__auto___9428 = 0;
  while (true) {
    if (i__5836__auto___9428 < len__5835__auto___9427) {
      args9421.push(arguments[i__5836__auto___9428]);
      var G__9429 = i__5836__auto___9428 + 1;
      i__5836__auto___9428 = G__9429;
      continue;
    } else {
    }
    break;
  }
  var G__9426 = args9421.length;
  switch(G__9426) {
    case 2:
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9421.slice(2), 0);
      return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5854__auto__);
  }
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = function(c1, c2) {
  return new cljs.core.LazySeq(null, function() {
    var s1 = cljs.core.seq(c1);
    var s2 = cljs.core.seq(c2);
    if (s1 && s2) {
      return cljs.core.cons(cljs.core.first(s1), cljs.core.cons(cljs.core.first(s2), cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1), cljs.core.rest(s2))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = function(c1, c2, colls) {
  return new cljs.core.LazySeq(null, function() {
    var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq, cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls, c2, cljs.core.array_seq([c1], 0)));
    if (cljs.core.every_QMARK_(cljs.core.identity, ss)) {
      return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first, ss), cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave, cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest, ss)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.interleave.cljs$lang$applyTo = function(seq9422) {
  var G__9423 = cljs.core.first(seq9422);
  var seq9422__$1 = cljs.core.next(seq9422);
  var G__9424 = cljs.core.first(seq9422__$1);
  var seq9422__$2 = cljs.core.next(seq9422__$1);
  return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__9423, G__9424, seq9422__$2);
};
cljs.core.interleave.cljs$lang$maxFixedArity = 2;
cljs.core.interpose = function cljs$core$interpose(var_args) {
  var args9431 = [];
  var len__5835__auto___9434 = arguments.length;
  var i__5836__auto___9435 = 0;
  while (true) {
    if (i__5836__auto___9435 < len__5835__auto___9434) {
      args9431.push(arguments[i__5836__auto___9435]);
      var G__9436 = i__5836__auto___9435 + 1;
      i__5836__auto___9435 = G__9436;
      continue;
    } else {
    }
    break;
  }
  var G__9433 = args9431.length;
  switch(G__9433) {
    case 1:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9431.length)].join(""));;
  }
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = function(sep) {
  return function(rf) {
    var started = cljs.core.volatile_BANG_(false);
    return function(started) {
      return function() {
        var G__9438 = null;
        var G__9438__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__9438__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__9438__2 = function(result, input) {
          if (cljs.core.truth_(cljs.core.deref(started))) {
            var sepr = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, sep) : rf.call(null, result, sep);
            if (cljs.core.reduced_QMARK_(sepr)) {
              return sepr;
            } else {
              return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr, input) : rf.call(null, sepr, input);
            }
          } else {
            cljs.core.vreset_BANG_(started, true);
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__9438 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__9438__0.call(this);
            case 1:
              return G__9438__1.call(this, result);
            case 2:
              return G__9438__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__9438.cljs$core$IFn$_invoke$arity$0 = G__9438__0;
        G__9438.cljs$core$IFn$_invoke$arity$1 = G__9438__1;
        G__9438.cljs$core$IFn$_invoke$arity$2 = G__9438__2;
        return G__9438;
      }();
    }(started);
  };
};
cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = function(sep, coll) {
  return cljs.core.drop.cljs$core$IFn$_invoke$arity$2(1, cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep), coll));
};
cljs.core.interpose.cljs$lang$maxFixedArity = 2;
cljs.core.flatten1 = function cljs$core$flatten1(colls) {
  var cat = function cljs$core$flatten1_$_cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4423__auto__ = cljs.core.seq(coll);
      if (temp__4423__auto__) {
        var coll__$1 = temp__4423__auto__;
        return cljs.core.cons(cljs.core.first(coll__$1), cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1), colls__$1));
      } else {
        if (cljs.core.seq(colls__$1)) {
          return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1), cljs.core.rest(colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat(null, colls);
};
cljs.core.cat;
cljs.core.mapcat = function cljs$core$mapcat(var_args) {
  var args9447 = [];
  var len__5835__auto___9452 = arguments.length;
  var i__5836__auto___9453 = 0;
  while (true) {
    if (i__5836__auto___9453 < len__5835__auto___9452) {
      args9447.push(arguments[i__5836__auto___9453]);
      var G__9454 = i__5836__auto___9453 + 1;
      i__5836__auto___9453 = G__9454;
      continue;
    } else {
    }
    break;
  }
  var G__9451 = args9447.length;
  switch(G__9451) {
    case 1:
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9447.slice(1), 0);
      return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5854__auto__);
  }
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f), cljs.core.cat);
};
cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = function(f, colls) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat, cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map, f, colls));
};
cljs.core.mapcat.cljs$lang$applyTo = function(seq9448) {
  var G__9449 = cljs.core.first(seq9448);
  var seq9448__$1 = cljs.core.next(seq9448);
  return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__9449, seq9448__$1);
};
cljs.core.mapcat.cljs$lang$maxFixedArity = 1;
cljs.core.filter = function cljs$core$filter(var_args) {
  var args9456 = [];
  var len__5835__auto___9460 = arguments.length;
  var i__5836__auto___9461 = 0;
  while (true) {
    if (i__5836__auto___9461 < len__5835__auto___9460) {
      args9456.push(arguments[i__5836__auto___9461]);
      var G__9462 = i__5836__auto___9461 + 1;
      i__5836__auto___9461 = G__9462;
      continue;
    } else {
    }
    break;
  }
  var G__9458 = args9456.length;
  switch(G__9458) {
    case 1:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9456.length)].join(""));;
  }
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__9464 = null;
      var G__9464__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__9464__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__9464__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return result;
        }
      };
      G__9464 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__9464__0.call(this);
          case 1:
            return G__9464__1.call(this, result);
          case 2:
            return G__9464__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__9464.cljs$core$IFn$_invoke$arity$0 = G__9464__0;
      G__9464.cljs$core$IFn$_invoke$arity$1 = G__9464__1;
      G__9464.cljs$core$IFn$_invoke$arity$2 = G__9464__2;
      return G__9464;
    }();
  };
};
cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.chunked_seq_QMARK_(s)) {
        var c = cljs.core.chunk_first(s);
        var size = cljs.core.count(c);
        var b = cljs.core.chunk_buffer(size);
        var n__5680__auto___9465 = size;
        var i_9466 = 0;
        while (true) {
          if (i_9466 < n__5680__auto___9465) {
            if (cljs.core.truth_(function() {
              var G__9459 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9466);
              return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__9459) : pred.call(null, G__9459);
            }())) {
              cljs.core.chunk_append(b, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c, i_9466));
            } else {
            }
            var G__9467 = i_9466 + 1;
            i_9466 = G__9467;
            continue;
          } else {
          }
          break;
        }
        return cljs.core.chunk_cons(cljs.core.chunk(b), cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.chunk_rest(s)));
      } else {
        var f = cljs.core.first(s);
        var r = cljs.core.rest(s);
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null, f))) {
          return cljs.core.cons(f, cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r));
        } else {
          return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred, r);
        }
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.filter.cljs$lang$maxFixedArity = 2;
cljs.core.remove = function cljs$core$remove(var_args) {
  var args9468 = [];
  var len__5835__auto___9471 = arguments.length;
  var i__5836__auto___9472 = 0;
  while (true) {
    if (i__5836__auto___9472 < len__5835__auto___9471) {
      args9468.push(arguments[i__5836__auto___9472]);
      var G__9473 = i__5836__auto___9472 + 1;
      i__5836__auto___9472 = G__9473;
      continue;
    } else {
    }
    break;
  }
  var G__9470 = args9468.length;
  switch(G__9470) {
    case 1:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.remove.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9468.length)].join(""));;
  }
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
};
cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred), coll);
};
cljs.core.remove.cljs$lang$maxFixedArity = 2;
cljs.core.tree_seq = function cljs$core$tree_seq(branch_QMARK_, children, root) {
  var walk = function cljs$core$tree_seq_$_walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons(node, cljs.core.truth_(branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null, node)) ? cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk, cljs.core.array_seq([children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null, node)], 0)) : null);
    }, null, null);
  };
  return walk(root);
};
cljs.core.flatten = function cljs$core$flatten(x) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(p1__9475_SHARP_) {
    return !cljs.core.sequential_QMARK_(p1__9475_SHARP_);
  }, cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function cljs$core$into(var_args) {
  var args9476 = [];
  var len__5835__auto___9481 = arguments.length;
  var i__5836__auto___9482 = 0;
  while (true) {
    if (i__5836__auto___9482 < len__5835__auto___9481) {
      args9476.push(arguments[i__5836__auto___9482]);
      var G__9483 = i__5836__auto___9482 + 1;
      i__5836__auto___9482 = G__9483;
      continue;
    } else {
    }
    break;
  }
  var G__9478 = args9476.length;
  switch(G__9478) {
    case 2:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.into.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9476.length)].join(""));;
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$2 = function(to, from) {
  if (!(to == null)) {
    if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
    } else {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, to, from);
    }
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.List.EMPTY, from);
  }
};
cljs.core.into.cljs$core$IFn$_invoke$arity$3 = function(to, xform, from) {
  if (!(to == null) ? to.cljs$lang$protocol_mask$partition1$ & 4 || to.cljs$core$IEditableCollection$ ? true : false : false) {
    return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj_BANG_, cljs.core.transient$(to), from)), cljs.core.meta(to));
  } else {
    return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform, cljs.core.conj, to, from);
  }
};
cljs.core.into.cljs$lang$maxFixedArity = 3;
cljs.core.mapv = function cljs$core$mapv(var_args) {
  var args9485 = [];
  var len__5835__auto___9493 = arguments.length;
  var i__5836__auto___9494 = 0;
  while (true) {
    if (i__5836__auto___9494 < len__5835__auto___9493) {
      args9485.push(arguments[i__5836__auto___9494]);
      var G__9495 = i__5836__auto___9494 + 1;
      i__5836__auto___9494 = G__9495;
      continue;
    } else {
    }
    break;
  }
  var G__9492 = args9485.length;
  switch(G__9492) {
    case 2:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9485.slice(4), 0);
      return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], argseq__5854__auto__);
  }
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null, o));
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = function(f, c1, c2) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$3(f, c1, c2));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = function(f, c1, c2, c3) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.map.cljs$core$IFn$_invoke$arity$4(f, c1, c2, c3));
};
cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = function(f, c1, c2, c3, colls) {
  return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map, f, c1, c2, c3, cljs.core.array_seq([colls], 0)));
};
cljs.core.mapv.cljs$lang$applyTo = function(seq9486) {
  var G__9487 = cljs.core.first(seq9486);
  var seq9486__$1 = cljs.core.next(seq9486);
  var G__9488 = cljs.core.first(seq9486__$1);
  var seq9486__$2 = cljs.core.next(seq9486__$1);
  var G__9489 = cljs.core.first(seq9486__$2);
  var seq9486__$3 = cljs.core.next(seq9486__$2);
  var G__9490 = cljs.core.first(seq9486__$3);
  var seq9486__$4 = cljs.core.next(seq9486__$3);
  return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__9487, G__9488, G__9489, G__9490, seq9486__$4);
};
cljs.core.mapv.cljs$lang$maxFixedArity = 4;
cljs.core.filterv = function cljs$core$filterv(pred, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(v, o) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null, o))) {
      return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$(cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function cljs$core$partition(var_args) {
  var args9497 = [];
  var len__5835__auto___9500 = arguments.length;
  var i__5836__auto___9501 = 0;
  while (true) {
    if (i__5836__auto___9501 < len__5835__auto___9500) {
      args9497.push(arguments[i__5836__auto___9501]);
      var G__9502 = i__5836__auto___9501 + 1;
      i__5836__auto___9501 = G__9502;
      continue;
    } else {
    }
    break;
  }
  var G__9499 = args9497.length;
  switch(G__9499) {
    case 2:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.partition.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9497.length)].join(""));;
  }
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = function(n, step, pad, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s);
      if (n === cljs.core.count(p)) {
        return cljs.core.cons(p, cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n, step, pad, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
      } else {
        return cljs.core._conj(cljs.core.List.EMPTY, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p, pad)));
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition.cljs$lang$maxFixedArity = 4;
cljs.core.get_in = function cljs$core$get_in(var_args) {
  var args9504 = [];
  var len__5835__auto___9508 = arguments.length;
  var i__5836__auto___9509 = 0;
  while (true) {
    if (i__5836__auto___9509 < len__5835__auto___9508) {
      args9504.push(arguments[i__5836__auto___9509]);
      var G__9510 = i__5836__auto___9509 + 1;
      i__5836__auto___9509 = G__9510;
      continue;
    } else {
    }
    break;
  }
  var G__9506 = args9504.length;
  switch(G__9506) {
    case 2:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9504.length)].join(""));;
  }
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = function(m, ks) {
  return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(m, ks, null);
};
cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = function(m, ks, not_found) {
  var sentinel = cljs.core.lookup_sentinel;
  var m__$1 = m;
  var ks__$1 = cljs.core.seq(ks);
  while (true) {
    if (ks__$1) {
      if (!(!(m__$1 == null) ? m__$1.cljs$lang$protocol_mask$partition0$ & 256 || m__$1.cljs$core$ILookup$ ? true : !m__$1.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.ILookup, m__$1))) {
        return not_found;
      } else {
        var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1, cljs.core.first(ks__$1), sentinel);
        if (sentinel === m__$2) {
          return not_found;
        } else {
          var G__9512 = sentinel;
          var G__9513 = m__$2;
          var G__9514 = cljs.core.next(ks__$1);
          sentinel = G__9512;
          m__$1 = G__9513;
          ks__$1 = G__9514;
          continue;
        }
      }
    } else {
      return m__$1;
    }
    break;
  }
};
cljs.core.get_in.cljs$lang$maxFixedArity = 3;
cljs.core.assoc_in = function cljs$core$assoc_in(m, p__9515, v) {
  var vec__9520 = p__9515;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9520, 0, null);
  var ks = cljs.core.nthnext(vec__9520, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs$core$assoc_in(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, v));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
  }
};
cljs.core.update_in = function cljs$core$update_in(var_args) {
  var args9521 = [];
  var len__5835__auto___9551 = arguments.length;
  var i__5836__auto___9552 = 0;
  while (true) {
    if (i__5836__auto___9552 < len__5835__auto___9551) {
      args9521.push(arguments[i__5836__auto___9552]);
      var G__9553 = i__5836__auto___9552 + 1;
      i__5836__auto___9552 = G__9553;
      continue;
    } else {
    }
    break;
  }
  var G__9530 = args9521.length;
  switch(G__9530) {
    case 3:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9521.slice(6), 0);
      return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5854__auto__);
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = function(m, p__9531, f) {
  var vec__9532 = p__9531;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9532, 0, null);
  var ks = cljs.core.nthnext(vec__9532, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9533 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9533) : f.call(null, G__9533);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = function(m, p__9534, f, a) {
  var vec__9535 = p__9534;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9535, 0, null);
  var ks = cljs.core.nthnext(vec__9535, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9536 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9537 = a;
      return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9536, G__9537) : f.call(null, G__9536, G__9537);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = function(m, p__9538, f, a, b) {
  var vec__9539 = p__9538;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9539, 0, null);
  var ks = cljs.core.nthnext(vec__9539, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9540 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9541 = a;
      var G__9542 = b;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9540, G__9541, G__9542) : f.call(null, G__9540, G__9541, G__9542);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = function(m, p__9543, f, a, b, c) {
  var vec__9544 = p__9543;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9544, 0, null);
  var ks = cljs.core.nthnext(vec__9544, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, b, c));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
      var G__9545 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
      var G__9546 = a;
      var G__9547 = b;
      var G__9548 = c;
      return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9545, G__9546, G__9547, G__9548) : f.call(null, G__9545, G__9546, G__9547, G__9548);
    }());
  }
};
cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = function(m, p__9549, f, a, b, c, args) {
  var vec__9550 = p__9549;
  var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9550, 0, null);
  var ks = cljs.core.nthnext(vec__9550, 1);
  if (cljs.core.truth_(ks)) {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), ks, f, a, cljs.core.array_seq([b, c, args], 0)));
  } else {
    return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), a, b, c, cljs.core.array_seq([args], 0)));
  }
};
cljs.core.update_in.cljs$lang$applyTo = function(seq9522) {
  var G__9523 = cljs.core.first(seq9522);
  var seq9522__$1 = cljs.core.next(seq9522);
  var G__9524 = cljs.core.first(seq9522__$1);
  var seq9522__$2 = cljs.core.next(seq9522__$1);
  var G__9525 = cljs.core.first(seq9522__$2);
  var seq9522__$3 = cljs.core.next(seq9522__$2);
  var G__9526 = cljs.core.first(seq9522__$3);
  var seq9522__$4 = cljs.core.next(seq9522__$3);
  var G__9527 = cljs.core.first(seq9522__$4);
  var seq9522__$5 = cljs.core.next(seq9522__$4);
  var G__9528 = cljs.core.first(seq9522__$5);
  var seq9522__$6 = cljs.core.next(seq9522__$5);
  return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__9523, G__9524, G__9525, G__9526, G__9527, G__9528, seq9522__$6);
};
cljs.core.update_in.cljs$lang$maxFixedArity = 6;
cljs.core.update = function cljs$core$update(var_args) {
  var args9555 = [];
  var len__5835__auto___9575 = arguments.length;
  var i__5836__auto___9576 = 0;
  while (true) {
    if (i__5836__auto___9576 < len__5835__auto___9575) {
      args9555.push(arguments[i__5836__auto___9576]);
      var G__9577 = i__5836__auto___9576 + 1;
      i__5836__auto___9576 = G__9577;
      continue;
    } else {
    }
    break;
  }
  var G__9564 = args9555.length;
  switch(G__9564) {
    case 3:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    case 6:
      return cljs.core.update.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args9555.slice(6), 0);
      return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], argseq__5854__auto__);
  }
};
cljs.core.update.cljs$core$IFn$_invoke$arity$3 = function(m, k, f) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9565 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    return f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__9565) : f.call(null, G__9565);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$4 = function(m, k, f, x) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9566 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9567 = x;
    return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9566, G__9567) : f.call(null, G__9566, G__9567);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$5 = function(m, k, f, x, y) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9568 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9569 = x;
    var G__9570 = y;
    return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9568, G__9569, G__9570) : f.call(null, G__9568, G__9569, G__9570);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$6 = function(m, k, f, x, y, z) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
    var G__9571 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
    var G__9572 = x;
    var G__9573 = y;
    var G__9574 = z;
    return f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__9571, G__9572, G__9573, G__9574) : f.call(null, G__9571, G__9572, G__9573, G__9574);
  }());
};
cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = function(m, k, f, x, y, z, more) {
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k), x, y, z, cljs.core.array_seq([more], 0)));
};
cljs.core.update.cljs$lang$applyTo = function(seq9556) {
  var G__9557 = cljs.core.first(seq9556);
  var seq9556__$1 = cljs.core.next(seq9556);
  var G__9558 = cljs.core.first(seq9556__$1);
  var seq9556__$2 = cljs.core.next(seq9556__$1);
  var G__9559 = cljs.core.first(seq9556__$2);
  var seq9556__$3 = cljs.core.next(seq9556__$2);
  var G__9560 = cljs.core.first(seq9556__$3);
  var seq9556__$4 = cljs.core.next(seq9556__$3);
  var G__9561 = cljs.core.first(seq9556__$4);
  var seq9556__$5 = cljs.core.next(seq9556__$4);
  var G__9562 = cljs.core.first(seq9556__$5);
  var seq9556__$6 = cljs.core.next(seq9556__$5);
  return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__9557, G__9558, G__9559, G__9560, G__9561, G__9562, seq9556__$6);
};
cljs.core.update.cljs$lang$maxFixedArity = 6;
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit, cljs.core.cst$sym$arr], null);
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function cljs$core$__GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function cljs$core$pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function cljs$core$pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function cljs$core$pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function cljs$core$pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone(node.arr));
};
cljs.core.tail_off = function cljs$core$tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function cljs$core$new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node(edit);
      var _ = cljs.core.pv_aset(r, 0, embed);
      var G__9579 = ll - 5;
      var G__9580 = r;
      ll = G__9579;
      ret = G__9580;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function cljs$core$push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node(parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset(ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget(parent, subidx);
    if (!(child == null)) {
      var node_to_insert = cljs$core$push_tail(pv, level - 5, child, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path(null, level - 5, tailnode);
      cljs.core.pv_aset(ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function cljs$core$vector_index_out_of_bounds(i, cnt) {
  throw new Error([cljs.core.str("No item "), cljs.core.str(i), cljs.core.str(" in vector of length "), cljs.core.str(cnt)].join(""));
};
cljs.core.first_array_for_longvec = function cljs$core$first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__9585 = cljs.core.pv_aget(node, 0);
      var G__9586 = level - 5;
      node = G__9585;
      level = G__9586;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function cljs$core$unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off(pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__9587 = cljs.core.pv_aget(node, i >>> level & 31);
        var G__9588 = level - 5;
        node = G__9587;
        level = G__9588;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function cljs$core$array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for(pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds(i, pv.cnt);
  }
};
cljs.core.do_assoc = function cljs$core$do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node(node);
  if (level === 0) {
    cljs.core.pv_aset(ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset(ret, subidx, cljs$core$do_assoc(pv, level - 5, cljs.core.pv_aget(node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function cljs$core$pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$pop_tail(pv, level - 5, cljs.core.pv_aget(node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node(node);
      cljs.core.pv_aset(ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.RangedIterator = function(i, base, arr, v, start, end) {
  this.i = i;
  this.base = base;
  this.arr = arr;
  this.v = v;
  this.start = start;
  this.end = end;
};
cljs.core.RangedIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  return self__.i < self__.end;
};
cljs.core.RangedIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (self__.i - self__.base === 32) {
    self__.arr = cljs.core.unchecked_array_for(self__.v, self__.i);
    self__.base = self__.base + 32;
  } else {
  }
  var ret = self__.arr[self__.i & 31];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.RangedIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$base, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.cst$sym$v, cljs.core.cst$sym$start, 
  cljs.core.cst$sym$end], null);
};
cljs.core.RangedIterator.cljs$lang$type = true;
cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";
cljs.core.RangedIterator.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/RangedIterator");
};
cljs.core.__GT_RangedIterator = function cljs$core$__GT_RangedIterator(i, base, arr, v, start, end) {
  return new cljs.core.RangedIterator(i, base, arr, v, start, end);
};
cljs.core.ranged_iterator = function cljs$core$ranged_iterator(v, start, end) {
  var i = start;
  return new cljs.core.RangedIterator(i, i - i % 32, start < cljs.core.count(v) ? cljs.core.unchecked_array_for(v, i) : null, v, start, end);
};
cljs.core.tv_editable_root;
cljs.core.tv_editable_tail;
cljs.core.TransientVector;
cljs.core.deref;
cljs.core.pr_sequential_writer;
cljs.core.pr_writer;
cljs.core.chunked_seq;
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9598 = init__$2;
              var G__9599 = j + i;
              var G__9600 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9598, G__9599, G__9600) : f.call(null, G__9598, G__9599, G__9600);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9607 = j + 1;
              var G__9608 = init__$3;
              j = G__9607;
              init__$2 = G__9608;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__9609 = i + len;
        var G__9610 = init__$2;
        i = G__9609;
        init__$1 = G__9610;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for(coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for(coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off(coll__$1) <= n) {
      var new_tail = cljs.core.aclone(self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc(coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj(coll__$1, val);
    } else {
      throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds  [0,"), cljs.core.str(self__.cnt), cljs.core.str("]")].join(""));
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.ranged_iterator(this$__$1, 0, self__.cnt);
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off(coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for(coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail(coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget(new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (other instanceof cljs.core.PersistentVector) {
    if (self__.cnt === cljs.core.count(other)) {
      var me_iter = cljs.core._iterator(coll__$1);
      var you_iter = cljs.core._iterator(other);
      while (true) {
        if (cljs.core.truth_(me_iter.hasNext())) {
          var x = me_iter.next();
          var y = you_iter.next();
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x, y)) {
            continue;
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_sequential(coll__$1, other);
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for(v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = function() {
              var G__9601 = init__$2;
              var G__9602 = arr[j];
              return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__9601, G__9602) : f.call(null, G__9601, G__9602);
            }();
            if (cljs.core.reduced_QMARK_(init__$3)) {
              return init__$3;
            } else {
              var G__9611 = j + 1;
              var G__9612 = init__$3;
              j = G__9611;
              init__$2 = G__9612;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__9613 = i + len;
        var G__9614 = init__$2;
        i = G__9613;
        init__$1 = G__9614;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n(coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      var G__9603 = coll__$1;
      var G__9604 = cljs.core.first_array_for_longvec(coll__$1);
      var G__9605 = 0;
      var G__9606 = 0;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9603, G__9604, G__9605, G__9606) : cljs.core.chunked_seq.call(null, G__9603, G__9604, G__9605, G__9606);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off(coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__5680__auto___9615 = len;
    var i_9616 = 0;
    while (true) {
      if (i_9616 < n__5680__auto___9615) {
        new_tail[i_9616] = self__.tail[i_9616];
        var G__9617 = i_9616 + 1;
        i_9616 = G__9617;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node(null);
      cljs.core.pv_aset(n_r, 0, self__.root);
      cljs.core.pv_aset(n_r, 1, cljs.core.new_path(null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail(coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__9618 = null;
  var G__9618__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9618__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9618 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9618__2.call(this, self__, k);
      case 3:
        return G__9618__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9618.cljs$core$IFn$_invoke$arity$2 = G__9618__2;
  G__9618.cljs$core$IFn$_invoke$arity$3 = G__9618__3;
  return G__9618;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args9597) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9597)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.PersistentVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$cnt, cljs.core.cst$sym$shift, cljs.core.cst$sym$root, cljs.core.cst$sym$tail, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentVector");
};
cljs.core.__GT_PersistentVector = function cljs$core$__GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], cljs.core.empty_ordered_hash);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone(xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
    while (true) {
      if (i < l) {
        var G__9619 = i + 1;
        var G__9620 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out, xs__$1[i]);
        i = G__9619;
        out = G__9620;
        continue;
      } else {
        return cljs.core.persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.vec = function cljs$core$vec(coll) {
  if (cljs.core.array_QMARK_(coll)) {
    return cljs.core.PersistentVector.fromArray(coll, true);
  } else {
    return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_, cljs.core._as_transient(cljs.core.PersistentVector.EMPTY), coll));
  }
};
cljs.core.vector = function cljs$core$vector(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___9622 = arguments.length;
  var i__5836__auto___9623 = 0;
  while (true) {
    if (i__5836__auto___9623 < len__5835__auto___9622) {
      args__5842__auto__.push(arguments[i__5836__auto___9623]);
      var G__9624 = i__5836__auto___9623 + 1;
      i__5836__auto___9623 = G__9624;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
    return cljs.core.PersistentVector.fromArray(args.arr, true);
  } else {
    return cljs.core.vec(args);
  }
};
cljs.core.vector.cljs$lang$maxFixedArity = 0;
cljs.core.vector.cljs$lang$applyTo = function(seq9621) {
  return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq9621));
};
cljs.core.subvec;
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9625 = self__.vec;
      var G__9626 = self__.node;
      var G__9627 = self__.i;
      var G__9628 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9625, G__9626, G__9627, G__9628) : cljs.core.chunked_seq.call(null, G__9625, G__9626, G__9627, G__9628);
    }();
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(function() {
    var G__9629 = self__.vec;
    var G__9630 = self__.i + self__.off;
    var G__9631 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9629, G__9630, G__9631) : cljs.core.subvec.call(null, G__9629, G__9630, G__9631);
  }(), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(function() {
    var G__9632 = self__.vec;
    var G__9633 = self__.i + self__.off;
    var G__9634 = cljs.core.count(self__.vec);
    return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__9632, G__9633, G__9634) : cljs.core.subvec.call(null, G__9632, G__9633, G__9634);
  }(), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = function() {
      var G__9635 = self__.vec;
      var G__9636 = self__.node;
      var G__9637 = self__.i;
      var G__9638 = self__.off + 1;
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9635, G__9636, G__9637, G__9638) : cljs.core.chunked_seq.call(null, G__9635, G__9636, G__9637, G__9638);
    }();
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest(coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9639 = self__.vec;
    var G__9640 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9641 = end;
    var G__9642 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9639, G__9640, G__9641, G__9642) : cljs.core.chunked_seq.call(null, G__9639, G__9640, G__9641, G__9642);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec, self__.node, self__.i, self__.off, m) : cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count(self__.vec)) {
    var G__9643 = self__.vec;
    var G__9644 = cljs.core.unchecked_array_for(self__.vec, end);
    var G__9645 = end;
    var G__9646 = 0;
    return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__9643, G__9644, G__9645, G__9646) : cljs.core.chunked_seq.call(null, G__9643, G__9644, G__9645, G__9646);
  } else {
    return null;
  }
};
cljs.core.ChunkedSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec, cljs.core.cst$sym$node, cljs.core.cst$sym$i, cljs.core.cst$sym$off, cljs.core.cst$sym$meta, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.__GT_ChunkedSeq = function cljs$core$__GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.chunked_seq = function cljs$core$chunked_seq(var_args) {
  var args9647 = [];
  var len__5835__auto___9650 = arguments.length;
  var i__5836__auto___9651 = 0;
  while (true) {
    if (i__5836__auto___9651 < len__5835__auto___9650) {
      args9647.push(arguments[i__5836__auto___9651]);
      var G__9652 = i__5836__auto___9651 + 1;
      i__5836__auto___9651 = G__9652;
      continue;
    } else {
    }
    break;
  }
  var G__9649 = args9647.length;
  switch(G__9649) {
    case 3:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 4:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 5:
      return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9647.length)].join(""));;
  }
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = function(vec, i, off) {
  return new cljs.core.ChunkedSeq(vec, cljs.core.array_for(vec, i), i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = function(vec, node, i, off) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
};
cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = function(vec, node, i, off, meta) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
};
cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;
cljs.core.build_subvec;
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167666463;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var i = self__.start;
  var j = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.end) {
      var init__$2 = function() {
        var G__9655 = init__$1;
        var G__9656 = j;
        var G__9657 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i);
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9655, G__9656, G__9657) : f.call(null, G__9655, G__9656, G__9657);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__9674 = i + 1;
        var G__9675 = j + 1;
        var G__9676 = init__$2;
        i = G__9674;
        j = G__9675;
        init__$1 = G__9676;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds(n, self__.end - self__.start);
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  var G__9658 = self__.meta;
  var G__9659 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v, v_pos, val);
  var G__9660 = self__.start;
  var G__9661 = function() {
    var x__5108__auto__ = self__.end;
    var y__5109__auto__ = v_pos + 1;
    return x__5108__auto__ > y__5109__auto__ ? x__5108__auto__ : y__5109__auto__;
  }();
  var G__9662 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9658, G__9659, G__9660, G__9661, G__9662) : cljs.core.build_subvec.call(null, G__9658, G__9659, G__9660, G__9661, G__9662);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    var G__9663 = self__.meta;
    var G__9664 = self__.v;
    var G__9665 = self__.start;
    var G__9666 = self__.end - 1;
    var G__9667 = null;
    return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9663, G__9664, G__9665, G__9666, G__9667) : cljs.core.build_subvec.call(null, G__9663, G__9664, G__9665, G__9666, G__9667);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n(coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function cljs$core$subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return cljs$core$subvec_seq(i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq(self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1, self__.v, self__.start, self__.end, self__.__hash) : cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  var G__9669 = self__.meta;
  var G__9670 = cljs.core._assoc_n(self__.v, self__.end, o);
  var G__9671 = self__.start;
  var G__9672 = self__.end + 1;
  var G__9673 = null;
  return cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__9669, G__9670, G__9671, G__9672, G__9673) : cljs.core.build_subvec.call(null, G__9669, G__9670, G__9671, G__9672, G__9673);
};
cljs.core.Subvec.prototype.call = function() {
  var G__9677 = null;
  var G__9677__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__9677__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__9677 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9677__2.call(this, self__, k);
      case 3:
        return G__9677__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9677.cljs$core$IFn$_invoke$arity$2 = G__9677__2;
  G__9677.cljs$core$IFn$_invoke$arity$3 = G__9677__3;
  return G__9677;
}();
cljs.core.Subvec.prototype.apply = function(self__, args9654) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9654)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.Subvec.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$v, cljs.core.cst$sym$start, cljs.core.cst$sym$end, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Subvec");
};
cljs.core.__GT_Subvec = function cljs$core$__GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.build_subvec = function cljs$core$build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__9678 = meta;
      var G__9679 = v.v;
      var G__9680 = v.start + start;
      var G__9681 = v.start + end;
      var G__9682 = __hash;
      meta = G__9678;
      v = G__9679;
      start = G__9680;
      end = G__9681;
      __hash = G__9682;
      continue;
    } else {
      var c = cljs.core.count(v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function cljs$core$subvec(var_args) {
  var args9683 = [];
  var len__5835__auto___9686 = arguments.length;
  var i__5836__auto___9687 = 0;
  while (true) {
    if (i__5836__auto___9687 < len__5835__auto___9686) {
      args9683.push(arguments[i__5836__auto___9687]);
      var G__9688 = i__5836__auto___9687 + 1;
      i__5836__auto___9687 = G__9688;
      continue;
    } else {
    }
    break;
  }
  var G__9685 = args9683.length;
  switch(G__9685) {
    case 2:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9683.length)].join(""));;
  }
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = function(v, start) {
  return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v, start, cljs.core.count(v));
};
cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = function(v, start, end) {
  return cljs.core.build_subvec(null, v, start, end, null);
};
cljs.core.subvec.cljs$lang$maxFixedArity = 3;
cljs.core.tv_ensure_editable = function cljs$core$tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone(node.arr));
  }
};
cljs.core.tv_editable_root = function cljs$core$tv_editable_root(node) {
  return new cljs.core.VectorNode({}, cljs.core.aclone(node.arr));
};
cljs.core.tv_editable_tail = function cljs$core$tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy(tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function cljs$core$tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable(tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset(ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget(ret, subidx);
    if (!(child == null)) {
      return cljs$core$tv_push_tail(tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path(tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function cljs$core$tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = cljs$core$tv_pop_tail(tv, level - 5, cljs.core.pv_aget(node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset(node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function cljs$core$unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off(tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__9701 = cljs.core.tv_ensure_editable(root.edit, cljs.core.pv_aget(node, i >>> level & 31));
        var G__9702 = level - 5;
        node = G__9701;
        level = G__9702;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition1$ = 88;
  this.cljs$lang$protocol_mask$partition0$ = 275;
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off(tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path(self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail(tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off(tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy(self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_(tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off(tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function cljs$core$go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset(node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset(node__$1, subidx, cljs$core$go(level - 5, cljs.core.pv_aget(node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_(tcoll__$1, val);
      } else {
        throw new Error([cljs.core.str("Index "), cljs.core.str(n), cljs.core.str(" out of bounds for TransientVector of length"), cljs.core.str(self__.cnt)].join(""));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail(tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget(new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit, cljs.core.pv_aget(new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for(coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.call = function() {
  var G__9706 = null;
  var G__9706__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9706__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9706 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9706__2.call(this, self__, k);
      case 3:
        return G__9706__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9706.cljs$core$IFn$_invoke$arity$2 = G__9706__2;
  G__9706.cljs$core$IFn$_invoke$arity$3 = G__9706__3;
  return G__9706;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args9703) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9703)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$shift, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$root, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$tail, 
  new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/TransientVector");
};
cljs.core.__GT_TransientVector = function cljs$core$__GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueIter = function(fseq, riter) {
  this.fseq = fseq;
  this.riter = riter;
};
cljs.core.PersistentQueueIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__4777__auto__ = cljs.core.some_QMARK_(self__.fseq) && cljs.core.seq(self__.fseq);
  if (or__4777__auto__) {
    return or__4777__auto__;
  } else {
    var and__4765__auto__ = cljs.core.some_QMARK_(self__.riter);
    if (and__4765__auto__) {
      return self__.riter.hasNext();
    } else {
      return and__4765__auto__;
    }
  }
};
cljs.core.PersistentQueueIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (cljs.core.some_QMARK_(self__.fseq)) {
    var ret = cljs.core.first(self__.fseq);
    self__.fseq = cljs.core.next(self__.fseq);
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.riter) && self__.riter.hasNext()) {
      return self__.riter.next();
    } else {
      throw new Error("No such element");
    }
  }
};
cljs.core.PersistentQueueIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.PersistentQueueIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.cst$sym$riter], null);
};
cljs.core.PersistentQueueIter.cljs$lang$type = true;
cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";
cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentQueueIter");
};
cljs.core.__GT_PersistentQueueIter = function cljs$core$__GT_PersistentQueueIter(fseq, riter) {
  return new cljs.core.PersistentQueueIter(fseq, riter);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4423__auto__ = cljs.core.next(self__.front);
  if (temp__4423__auto__) {
    var f1 = temp__4423__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty(coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentQueueSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$front, cljs.core.cst$sym$rear, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.__GT_PersistentQueueSeq = function cljs$core$__GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueIter(self__.front, cljs.core._iterator(self__.rear));
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4423__auto__ = cljs.core.next(self__.front);
    if (temp__4423__auto__) {
      var f1 = temp__4423__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq(self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY, self__.meta);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest(cljs.core.seq(coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq(self__.rear);
  if (cljs.core.truth_(function() {
    var or__4777__auto__ = self__.front;
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq(rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
      var or__4777__auto__ = self__.rear;
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.PersistentQueue.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$count, cljs.core.cst$sym$front, cljs.core.cst$sym$rear, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentQueue");
};
cljs.core.__GT_PersistentQueue = function cljs$core$__GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, cljs.core.empty_ordered_hash);
cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.getBasis = function() {
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/NeverEquiv");
};
cljs.core.__GT_NeverEquiv = function cljs$core$__GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function cljs$core$equiv_map(x, y) {
  return cljs.core.boolean$(cljs.core.map_QMARK_(y) ? cljs.core.count(x) === cljs.core.count(y) ? cljs.core.every_QMARK_(cljs.core.identity, cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(xkv) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y, cljs.core.first(xkv), cljs.core.never_equiv), cljs.core.second(xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function cljs$core$scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__9707 = i + incr;
        i = G__9707;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function cljs$core$obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash(a);
  var b__$1 = cljs.core.hash(b);
  if (a__$1 < b__$1) {
    return -1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function cljs$core$obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta(m);
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__9708 = i + 1;
      var G__9709 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k__$1, so[k__$1]);
      i = G__9708;
      out = G__9709;
      continue;
    } else {
      return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function cljs$core$obj_clone(obj, ks) {
  var new_obj = {};
  var l = ks.length;
  var i_9714 = 0;
  while (true) {
    if (i_9714 < l) {
      var k_9715 = ks[i_9714];
      new_obj[k_9715] = obj[k_9715];
      var G__9716 = i_9714 + 1;
      i_9714 = G__9716;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq(keys__$1)) {
      var k = cljs.core.first(keys__$1);
      var init__$2 = function() {
        var G__9719 = init__$1;
        var G__9720 = k;
        var G__9721 = self__.strobj[k];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9719, G__9720, G__9721) : f.call(null, G__9719, G__9720, G__9721);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__9722 = cljs.core.rest(keys__$1);
        var G__9723 = init__$2;
        keys__$1 = G__9722;
        init__$1 = G__9723;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone(self__.keys);
    var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array(1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array(1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone(self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone(self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map(coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array(1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(coll__$1) {
      return function(p1__9717_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__9717_SHARP_, self__.strobj[p1__9717_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__9724 = null;
  var G__9724__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9724__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9724 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9724__2.call(this, self__, k);
      case 3:
        return G__9724__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9724.cljs$core$IFn$_invoke$arity$2 = G__9724__2;
  G__9724.cljs$core$IFn$_invoke$arity$3 = G__9724__3;
  return G__9724;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args9718) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9718)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.ObjMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$keys, cljs.core.cst$sym$strobj, cljs.core.cst$sym$update_DASH_count, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ObjMap");
};
cljs.core.__GT_ObjMap = function cljs$core$__GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], {}, 0, cljs.core.empty_unordered_hash);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.RecordIter = function(i, record, base_count, fields, ext_map_iter) {
  this.i = i;
  this.record = record;
  this.base_count = base_count;
  this.fields = fields;
  this.ext_map_iter = ext_map_iter;
};
cljs.core.RecordIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var or__4777__auto__ = self__.i < self__.base_count;
  if (or__4777__auto__) {
    return or__4777__auto__;
  } else {
    return self__.ext_map_iter.hasNext();
  }
};
cljs.core.RecordIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.i < self__.base_count) {
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields, self__.i);
    self__.i = self__.i + 1;
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record, k)], null);
  } else {
    return self__.ext_map_iter.next();
  }
};
cljs.core.RecordIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.RecordIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.cst$sym$record, cljs.core.cst$sym$base_DASH_count, cljs.core.cst$sym$fields, cljs.core.cst$sym$ext_DASH_map_DASH_iter], null);
};
cljs.core.RecordIter.cljs$lang$type = true;
cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";
cljs.core.RecordIter.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/RecordIter");
};
cljs.core.__GT_RecordIter = function cljs$core$__GT_RecordIter(i, record, base_count, fields, ext_map_iter) {
  return new cljs.core.RecordIter(i, record, base_count, fields, ext_map_iter);
};
cljs.core.ES6EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__9727 = cljs.core.first(self__.s);
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9727, 0, null);
    var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9727, 1, null);
    self__.s = cljs.core.next(self__.s);
    return {"value":[k, v], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6EntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ES6EntriesIterator.cljs$lang$type = true;
cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";
cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ES6EntriesIterator");
};
cljs.core.__GT_ES6EntriesIterator = function cljs$core$__GT_ES6EntriesIterator(s) {
  return new cljs.core.ES6EntriesIterator(s);
};
cljs.core.es6_entries_iterator = function cljs$core$es6_entries_iterator(coll) {
  return new cljs.core.ES6EntriesIterator(cljs.core.seq(coll));
};
cljs.core.ES6SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.ES6SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first(self__.s);
    self__.s = cljs.core.next(self__.s);
    return {"value":[x, x], "done":false};
  } else {
    return {"value":null, "done":true};
  }
};
cljs.core.ES6SetEntriesIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";
cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ES6SetEntriesIterator");
};
cljs.core.__GT_ES6SetEntriesIterator = function cljs$core$__GT_ES6SetEntriesIterator(s) {
  return new cljs.core.ES6SetEntriesIterator(s);
};
cljs.core.es6_set_entries_iterator = function cljs$core$es6_set_entries_iterator(coll) {
  return new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll));
};
cljs.core.array_index_of_nil_QMARK_ = function cljs$core$array_index_of_nil_QMARK_(arr) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__9728 = i + 2;
        i = G__9728;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_keyword_QMARK_ = function cljs$core$array_index_of_keyword_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Keyword && kstr === arr[i].fqn) {
        return i;
      } else {
        var G__9729 = i + 2;
        i = G__9729;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_symbol_QMARK_ = function cljs$core$array_index_of_symbol_QMARK_(arr, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (arr[i] instanceof cljs.core.Symbol && kstr === arr[i].str) {
        return i;
      } else {
        var G__9730 = i + 2;
        i = G__9730;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_identical_QMARK_ = function cljs$core$array_index_of_identical_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__9731 = i + 2;
        i = G__9731;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of_equiv_QMARK_ = function cljs$core$array_index_of_equiv_QMARK_(arr, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return -1;
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, arr[i])) {
        return i;
      } else {
        var G__9732 = i + 2;
        i = G__9732;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_index_of = function cljs$core$array_index_of(arr, k) {
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_index_of_keyword_QMARK_(arr, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_index_of_identical_QMARK_(arr, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_index_of_symbol_QMARK_(arr, k);
      } else {
        if (k == null) {
          return cljs.core.array_index_of_nil_QMARK_(arr);
        } else {
          return cljs.core.array_index_of_equiv_QMARK_(arr, k);
        }
      }
    }
  }
};
cljs.core.array_map_index_of = function cljs$core$array_map_index_of(m, k) {
  return cljs.core.array_index_of(m.arr, k);
};
cljs.core.array_extend_kv = function cljs$core$array_extend_kv(arr, k, v) {
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_9733 = 0;
  while (true) {
    if (i_9733 < l) {
      narr[i_9733] = arr[i_9733];
      var G__9734 = i_9733 + 1;
      i_9733 = G__9734;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.array_map_extend_kv = function cljs$core$array_map_extend_kv(m, k, v) {
  return cljs.core.array_extend_kv(m.arr, k, v);
};
cljs.core.TransientArrayMap;
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return (self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentArrayMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr, cljs.core.cst$sym$i, cljs.core.cst$sym$_meta], null);
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.__GT_PersistentArrayMapSeq = function cljs$core$__GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.persistent_array_map_seq = function cljs$core$persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.keys;
cljs.core.vals;
cljs.core.PersistentArrayMapIterator = function(arr, i, cnt) {
  this.arr = arr;
  this.i = i;
  this.cnt = cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.cnt;
};
cljs.core.PersistentArrayMapIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
  self__.i = self__.i + 2;
  return ret;
};
cljs.core.PersistentArrayMapIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr, cljs.core.with_meta(cljs.core.cst$sym$i, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.cst$sym$cnt], null);
};
cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";
cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentArrayMapIterator");
};
cljs.core.__GT_PersistentArrayMapIterator = function cljs$core$__GT_PersistentArrayMapIterator(arr, i, cnt) {
  return new cljs.core.PersistentArrayMapIterator(arr, i, cnt);
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9736 = cljs.core.seq(coll);
  var chunk__9737 = null;
  var count__9738 = 0;
  var i__9739 = 0;
  while (true) {
    if (i__9739 < count__9738) {
      var vec__9740 = chunk__9737.cljs$core$IIndexed$_nth$arity$2(null, i__9739);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9740, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9740, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__9749 = seq__9736;
      var G__9750 = chunk__9737;
      var G__9751 = count__9738;
      var G__9752 = i__9739 + 1;
      seq__9736 = G__9749;
      chunk__9737 = G__9750;
      count__9738 = G__9751;
      i__9739 = G__9752;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__9736);
      if (temp__4425__auto__) {
        var seq__9736__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9736__$1)) {
          var c__5580__auto__ = cljs.core.chunk_first(seq__9736__$1);
          var G__9753 = cljs.core.chunk_rest(seq__9736__$1);
          var G__9754 = c__5580__auto__;
          var G__9755 = cljs.core.count(c__5580__auto__);
          var G__9756 = 0;
          seq__9736 = G__9753;
          chunk__9737 = G__9754;
          count__9738 = G__9755;
          i__9739 = G__9756;
          continue;
        } else {
          var vec__9741 = cljs.core.first(seq__9736__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9741, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9741, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__9757 = cljs.core.next(seq__9736__$1);
          var G__9758 = null;
          var G__9759 = 0;
          var G__9760 = 0;
          seq__9736 = G__9757;
          chunk__9737 = G__9758;
          count__9738 = G__9759;
          i__9739 = G__9760;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var G__9742 = init__$1;
        var G__9743 = self__.arr[i];
        var G__9744 = self__.arr[i + 1];
        return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9742, G__9743, G__9744) : f.call(null, G__9742, G__9743, G__9744);
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__9761 = i + 2;
        var G__9762 = init__$2;
        i = G__9761;
        init__$1 = G__9762;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.PersistentArrayMapIterator(self__.arr, 0, self__.cnt * 2);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  if (!(other == null) ? other.cljs$lang$protocol_mask$partition0$ & 1024 || other.cljs$core$IMap$ ? true : false : false) {
    var alen = self__.arr.length;
    var other__$1 = other;
    if (self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null)) {
      var i = 0;
      while (true) {
        if (i < alen) {
          var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null, self__.arr[i], cljs.core.lookup_sentinel);
          if (!(v === cljs.core.lookup_sentinel)) {
            if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[i + 1], v)) {
              var G__9763 = i + 2;
              i = G__9763;
              continue;
            } else {
              return false;
            }
          } else {
            return false;
          }
        } else {
          return true;
        }
        break;
      }
    } else {
      return false;
    }
  } else {
    return cljs.core.equiv_map(coll__$1, other);
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap({}, self__.arr.length, cljs.core.aclone(self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty(coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k, self__.arr[s])) {
            var G__9764 = s + 2;
            var G__9765 = d;
            s = G__9764;
            d = G__9765;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__9766 = s + 2;
            var G__9767 = d + 2;
            s = G__9766;
            d = G__9767;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of(coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv(coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__9748 = cljs.core.aclone(self__.arr);
        G__9748[idx + 1] = v;
        return G__9748;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(cljs.core.array_map_index_of(coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq(self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9768 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9769 = cljs.core.next(es);
          ret = G__9768;
          es = G__9769;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__9770 = null;
  var G__9770__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9770__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9770 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9770__2.call(this, self__, k);
      case 3:
        return G__9770__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9770.cljs$core$IFn$_invoke$arity$2 = G__9770__2;
  G__9770.cljs$core$IFn$_invoke$arity$3 = G__9770__3;
  return G__9770;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args9735) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9735)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$cnt, cljs.core.cst$sym$arr, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.__GT_PersistentArrayMap = function cljs$core$__GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], cljs.core.empty_unordered_hash);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var arr__$2 = no_check ? arr__$1 : function() {
    var ret = [];
    var i_9771 = 0;
    while (true) {
      if (i_9771 < arr__$1.length) {
        var k_9772 = arr__$1[i_9771];
        var v_9773 = arr__$1[i_9771 + 1];
        var idx_9774 = cljs.core.array_index_of(ret, k_9772);
        if (idx_9774 === -1) {
          ret.push(k_9772);
          ret.push(v_9773);
        } else {
        }
        var G__9775 = i_9771 + 2;
        i_9771 = G__9775;
        continue;
      } else {
      }
      break;
    }
    return ret;
  }();
  var arr__$3 = function() {
    var cnt = arr__$2.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$2, null);
  }();
  return arr__$3;
};
cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.array__GT_transient_hash_map;
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot(self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return cljs.core._assoc_BANG_(tcoll__$1, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__9778 = cljs.core.next(es);
          var G__9779 = cljs.core._assoc_BANG_(tcoll__$2, cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__9778;
          tcoll__$2 = G__9779;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot(self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len, self__.arr) : cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of(tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__9777_9780 = self__.arr;
      G__9777_9780.pop();
      G__9777_9780.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$len, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.cst$sym$arr], null);
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.__GT_TransientArrayMap = function cljs$core$__GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.TransientHashMap;
cljs.core.PersistentHashMap;
cljs.core.array__GT_transient_hash_map = function cljs$core$array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__9781 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, arr[i], arr[i + 1]);
      var G__9782 = i + 2;
      out = G__9781;
      i = G__9782;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function cljs$core$__GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.create_inode_seq;
cljs.core.create_array_node_seq;
cljs.core.reset_BANG_;
cljs.core.create_node;
cljs.core.atom;
cljs.core.deref;
cljs.core.key_test = function cljs$core$key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_(key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key, other);
    }
  }
};
cljs.core.mask = function cljs$core$mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function cljs$core$clone_and_set(var_args) {
  var args9783 = [];
  var len__5835__auto___9788 = arguments.length;
  var i__5836__auto___9789 = 0;
  while (true) {
    if (i__5836__auto___9789 < len__5835__auto___9788) {
      args9783.push(arguments[i__5836__auto___9789]);
      var G__9790 = i__5836__auto___9789 + 1;
      i__5836__auto___9789 = G__9790;
      continue;
    } else {
    }
    break;
  }
  var G__9785 = args9783.length;
  switch(G__9785) {
    case 3:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9783.length)].join(""));;
  }
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = function(arr, i, a) {
  var G__9786 = cljs.core.aclone(arr);
  G__9786[i] = a;
  return G__9786;
};
cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = function(arr, i, a, j, b) {
  var G__9787 = cljs.core.aclone(arr);
  G__9787[i] = a;
  G__9787[j] = b;
  return G__9787;
};
cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;
cljs.core.remove_pair = function cljs$core$remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy(arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy(arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function cljs$core$bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count(bitmap & bit - 1);
};
cljs.core.bitpos = function cljs$core$bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function cljs$core$edit_and_set(var_args) {
  var args9792 = [];
  var len__5835__auto___9795 = arguments.length;
  var i__5836__auto___9796 = 0;
  while (true) {
    if (i__5836__auto___9796 < len__5835__auto___9795) {
      args9792.push(arguments[i__5836__auto___9796]);
      var G__9797 = i__5836__auto___9796 + 1;
      i__5836__auto___9796 = G__9797;
      continue;
    } else {
    }
    break;
  }
  var G__9794 = args9792.length;
  switch(G__9794) {
    case 4:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    case 6:
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9792.length)].join(""));;
  }
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = function(inode, edit, i, a) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  return editable;
};
cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = function(inode, edit, i, a, j, b) {
  var editable = inode.ensure_editable(edit);
  editable.arr[i] = a;
  editable.arr[j] = b;
  return editable;
};
cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;
cljs.core.inode_kv_reduce = function cljs$core$inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          var G__9802 = init__$1;
          var G__9803 = k;
          var G__9804 = arr[i + 1];
          return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9802, G__9803, G__9804) : f.call(null, G__9802, G__9803, G__9804);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_(init__$2)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
      } else {
        var G__9805 = i + 2;
        var G__9806 = init__$2;
        i = G__9805;
        init__$1 = G__9806;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode;
cljs.core.NodeIterator = function(arr, i, next_entry, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_entry = next_entry;
  this.next_iter = next_iter;
};
cljs.core.NodeIterator.prototype.advance = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (self__.i < len) {
      var key = self__.arr[self__.i];
      var node_or_val = self__.arr[self__.i + 1];
      var found = cljs.core.some_QMARK_(key) ? self__.next_entry = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key, node_or_val], null) : cljs.core.some_QMARK_(node_or_val) ? function() {
        var new_iter = cljs.core._iterator(node_or_val);
        if (new_iter.hasNext()) {
          return self__.next_iter = new_iter;
        } else {
          return false;
        }
      }() : false;
      self__.i = self__.i + 2;
      if (found) {
        return true;
      } else {
        continue;
      }
    } else {
      return false;
    }
    break;
  }
};
cljs.core.NodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var or__4777__auto__ = cljs.core.some_QMARK_(self__.next_entry);
  if (or__4777__auto__) {
    return or__4777__auto__;
  } else {
    var or__4777__auto____$1 = cljs.core.some_QMARK_(self__.next_iter);
    if (or__4777__auto____$1) {
      return or__4777__auto____$1;
    } else {
      return this$.advance();
    }
  }
};
cljs.core.NodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.some_QMARK_(self__.next_entry)) {
    var ret = self__.next_entry;
    self__.next_entry = null;
    return ret;
  } else {
    if (cljs.core.some_QMARK_(self__.next_iter)) {
      var ret = self__.next_iter.next();
      if (self__.next_iter.hasNext()) {
      } else {
        self__.next_iter = null;
      }
      return ret;
    } else {
      if (this$.advance()) {
        return this$.next();
      } else {
        throw new Error("No such element");
      }
    }
  }
};
cljs.core.NodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.NodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr, cljs.core.with_meta(cljs.core.cst$sym$i, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, 
  true], null))], null);
};
cljs.core.NodeIterator.cljs$lang$type = true;
cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";
cljs.core.NodeIterator.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/NodeIterator");
};
cljs.core.__GT_NodeIterator = function cljs$core$__GT_NodeIterator(arr, i, next_entry, next_iter) {
  return new cljs.core.NodeIterator(arr, i, next_entry, next_iter);
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count(self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy(earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward(earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_9820 = 0;
        var j_9821 = 0;
        while (true) {
          if (i_9820 < 32) {
            if ((self__.bitmap >>> i_9820 & 1) === 0) {
              var G__9822 = i_9820 + 1;
              var G__9823 = j_9821;
              i_9820 = G__9822;
              j_9821 = G__9823;
              continue;
            } else {
              nodes[i_9820] = !(self__.arr[j_9821] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash(self__.arr[j_9821]), self__.arr[j_9821], self__.arr[j_9821 + 1], added_leaf_QMARK_) : self__.arr[j_9821 + 1];
              var G__9824 = i_9820 + 1;
              var G__9825 = j_9821 + 2;
              i_9820 = G__9824;
              j_9821 = G__9825;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * idx, null, 2 * idx + 1, function() {
          var G__9807 = edit__$1;
          var G__9808 = shift + 5;
          var G__9809 = key_or_nil;
          var G__9810 = val_or_node;
          var G__9811 = hash;
          var G__9812 = key;
          var G__9813 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__9807, G__9808, G__9809, G__9810, G__9811, G__9812, G__9813) : cljs.core.create_node.call(null, G__9807, G__9808, G__9809, G__9810, G__9811, G__9812, G__9813);
        }());
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count(self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_9826 = 0;
      var j_9827 = 0;
      while (true) {
        if (i_9826 < 32) {
          if ((self__.bitmap >>> i_9826 & 1) === 0) {
            var G__9828 = i_9826 + 1;
            var G__9829 = j_9827;
            i_9826 = G__9828;
            j_9827 = G__9829;
            continue;
          } else {
            nodes[i_9826] = !(self__.arr[j_9827] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash(self__.arr[j_9827]), self__.arr[j_9827], self__.arr[j_9827 + 1], added_leaf_QMARK_) : self__.arr[j_9827 + 1];
            var G__9830 = i_9826 + 1;
            var G__9831 = j_9827 + 2;
            i_9826 = G__9830;
            j_9827 = G__9831;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy(self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr, 2 * idx, null, 2 * idx + 1, function() {
          var G__9814 = shift + 5;
          var G__9815 = key_or_nil;
          var G__9816 = val_or_node;
          var G__9817 = hash;
          var G__9818 = key;
          var G__9819 = val;
          return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__9814, G__9815, G__9816, G__9817, G__9818, G__9819) : cljs.core.create_node.call(null, G__9814, G__9815, G__9816, G__9817, G__9818, G__9819);
        }()));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test(key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair(self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$ = true;
cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.BitmapIndexedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit, cljs.core.with_meta(cljs.core.cst$sym$bitmap, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.__GT_BitmapIndexedNode = function cljs$core$__GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function cljs$core$pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__9832 = i + 1;
        var G__9833 = j + 2;
        var G__9834 = bitmap | 1 << i;
        i = G__9832;
        j = G__9833;
        bitmap = G__9834;
        continue;
      } else {
        var G__9835 = i + 1;
        var G__9836 = j;
        var G__9837 = bitmap;
        i = G__9835;
        j = G__9836;
        bitmap = G__9837;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNodeIterator = function(arr, i, next_iter) {
  this.arr = arr;
  this.i = i;
  this.next_iter = next_iter;
};
cljs.core.ArrayNodeIterator.prototype.hasNext = function() {
  var self__ = this;
  var this$ = this;
  var len = self__.arr.length;
  while (true) {
    if (!(cljs.core.some_QMARK_(self__.next_iter) && self__.next_iter.hasNext())) {
      if (self__.i < len) {
        var node = self__.arr[self__.i];
        self__.i = self__.i + 1;
        if (cljs.core.some_QMARK_(node)) {
          self__.next_iter = cljs.core._iterator(node);
        } else {
        }
        continue;
      } else {
        return false;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.ArrayNodeIterator.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (this$.hasNext()) {
    return self__.next_iter.next();
  } else {
    throw new Error("No such element");
  }
};
cljs.core.ArrayNodeIterator.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.ArrayNodeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr, cljs.core.with_meta(cljs.core.cst$sym$i, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ArrayNodeIterator.cljs$lang$type = true;
cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";
cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ArrayNodeIterator");
};
cljs.core.__GT_ArrayNodeIterator = function cljs$core$__GT_ArrayNodeIterator(arr, i, next_iter) {
  return new cljs.core.ArrayNodeIterator(arr, i, next_iter);
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone(self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_(init__$2)) {
          return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
        } else {
          var G__9838 = i + 1;
          var G__9839 = init__$2;
          i = G__9838;
          init__$1 = G__9839;
          continue;
        }
      } else {
        var G__9840 = i + 1;
        var G__9841 = init__$1;
        i = G__9840;
        init__$1 = G__9841;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node(inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.ArrayNode.prototype.cljs$core$IIterable$ = true;
cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeIterator(self__.arr, 0, null);
};
cljs.core.ArrayNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit, cljs.core.with_meta(cljs.core.cst$sym$cnt, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ArrayNode");
};
cljs.core.__GT_ArrayNode = function cljs$core$__GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function cljs$core$hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test(key, arr[i])) {
        return i;
      } else {
        var G__9842 = i + 2;
        i = G__9842;
        continue;
      }
    } else {
      return -1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy(self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce(self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy(self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr, idx + 1, val));
      }
    }
  } else {
    return (new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test(key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index(self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair(self__.arr, cljs.core.quot(idx, 2)));
    }
  }
};
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$ = true;
cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeIterator(self__.arr, 0, null, null);
};
cljs.core.HashCollisionNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit, cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$cnt, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], 
  null))], null);
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.__GT_HashCollisionNode = function cljs$core$__GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function cljs$core$create_node(var_args) {
  var args9843 = [];
  var len__5835__auto___9846 = arguments.length;
  var i__5836__auto___9847 = 0;
  while (true) {
    if (i__5836__auto___9847 < len__5835__auto___9846) {
      args9843.push(arguments[i__5836__auto___9847]);
      var G__9848 = i__5836__auto___9847 + 1;
      i__5836__auto___9847 = G__9848;
      continue;
    } else {
    }
    break;
  }
  var G__9845 = args9843.length;
  switch(G__9845) {
    case 6:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);
      break;
    case 7:
      return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9843.length)].join(""));;
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = function(shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
  var key1hash = cljs.core.hash(key1);
  if (key1hash === key2hash) {
    return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
  }
};
cljs.core.create_node.cljs$lang$maxFixedArity = 7;
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first(self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    var G__9850 = self__.nodes;
    var G__9851 = self__.i + 2;
    var G__9852 = null;
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9850, G__9851, G__9852) : cljs.core.create_inode_seq.call(null, G__9850, G__9851, G__9852);
  } else {
    var G__9853 = self__.nodes;
    var G__9854 = self__.i;
    var G__9855 = cljs.core.next(self__.s);
    return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__9853, G__9854, G__9855) : cljs.core.create_inode_seq.call(null, G__9853, G__9854, G__9855);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.NodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$nodes, cljs.core.cst$sym$i, cljs.core.cst$sym$s, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/NodeSeq");
};
cljs.core.__GT_NodeSeq = function cljs$core$__GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.create_inode_seq = function cljs$core$create_inode_seq(var_args) {
  var args9856 = [];
  var len__5835__auto___9859 = arguments.length;
  var i__5836__auto___9860 = 0;
  while (true) {
    if (i__5836__auto___9860 < len__5835__auto___9859) {
      args9856.push(arguments[i__5836__auto___9860]);
      var G__9861 = i__5836__auto___9860 + 1;
      i__5836__auto___9860 = G__9861;
      continue;
    } else {
    }
    break;
  }
  var G__9858 = args9856.length;
  switch(G__9858) {
    case 1:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 3:
      return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9856.length)].join(""));;
  }
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes, 0, null);
};
cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = function(nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        if (!(nodes[j] == null)) {
          return new cljs.core.NodeSeq(null, nodes, j, null, null);
        } else {
          var temp__4423__auto__ = nodes[j + 1];
          if (cljs.core.truth_(temp__4423__auto__)) {
            var node = temp__4423__auto__;
            var temp__4423__auto____$1 = node.inode_seq();
            if (cljs.core.truth_(temp__4423__auto____$1)) {
              var node_seq = temp__4423__auto____$1;
              return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
            } else {
              var G__9863 = j + 2;
              j = G__9863;
              continue;
            }
          } else {
            var G__9864 = j + 2;
            j = G__9864;
            continue;
          }
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.NodeSeq(null, nodes, i, s, null);
  }
};
cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first(self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var G__9865 = null;
  var G__9866 = self__.nodes;
  var G__9867 = self__.i;
  var G__9868 = cljs.core.next(self__.s);
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__9865, G__9866, G__9867, G__9868) : cljs.core.create_array_node_seq.call(null, G__9865, G__9866, G__9867, G__9868);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ArrayNodeSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$nodes, cljs.core.cst$sym$i, cljs.core.cst$sym$s, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.__GT_ArrayNodeSeq = function cljs$core$__GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.create_array_node_seq = function cljs$core$create_array_node_seq(var_args) {
  var args9869 = [];
  var len__5835__auto___9872 = arguments.length;
  var i__5836__auto___9873 = 0;
  while (true) {
    if (i__5836__auto___9873 < len__5835__auto___9872) {
      args9869.push(arguments[i__5836__auto___9873]);
      var G__9874 = i__5836__auto___9873 + 1;
      i__5836__auto___9873 = G__9874;
      continue;
    } else {
    }
    break;
  }
  var G__9871 = args9869.length;
  switch(G__9871) {
    case 1:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 4:
      return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(arguments[0], arguments[1], arguments[2], arguments[3]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args9869.length)].join(""));;
  }
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = function(nodes) {
  return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null, nodes, 0, null);
};
cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = function(meta, nodes, i, s) {
  if (s == null) {
    var len = nodes.length;
    var j = i;
    while (true) {
      if (j < len) {
        var temp__4423__auto__ = nodes[j];
        if (cljs.core.truth_(temp__4423__auto__)) {
          var nj = temp__4423__auto__;
          var temp__4423__auto____$1 = nj.inode_seq();
          if (cljs.core.truth_(temp__4423__auto____$1)) {
            var ns = temp__4423__auto____$1;
            return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
          } else {
            var G__9876 = j + 1;
            j = G__9876;
            continue;
          }
        } else {
          var G__9877 = j + 1;
          j = G__9877;
          continue;
        }
      } else {
        return null;
      }
      break;
    }
  } else {
    return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
  }
};
cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;
cljs.core.TransientHashMap;
cljs.core.HashMapIter = function(nil_val, root_iter, seen) {
  this.nil_val = nil_val;
  this.root_iter = root_iter;
  this.seen = seen;
};
cljs.core.HashMapIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.seen && self__.root_iter.hasNext();
};
cljs.core.HashMapIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!self__.seen) {
    self__.seen = true;
    return self__.nil_val;
  } else {
    return self__.root_iter.next();
  }
};
cljs.core.HashMapIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashMapIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val, cljs.core.cst$sym$root_DASH_iter, cljs.core.with_meta(cljs.core.cst$sym$seen, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.HashMapIter.cljs$lang$type = true;
cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";
cljs.core.HashMapIter.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/HashMapIter");
};
cljs.core.__GT_HashMapIter = function cljs$core$__GT_HashMapIter(nil_val, root_iter, seen) {
  return new cljs.core.HashMapIter(nil_val, root_iter, seen);
};
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9879 = cljs.core.seq(coll);
  var chunk__9880 = null;
  var count__9881 = 0;
  var i__9882 = 0;
  while (true) {
    if (i__9882 < count__9881) {
      var vec__9883 = chunk__9880.cljs$core$IIndexed$_nth$arity$2(null, i__9882);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9883, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9883, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__9887 = seq__9879;
      var G__9888 = chunk__9880;
      var G__9889 = count__9881;
      var G__9890 = i__9882 + 1;
      seq__9879 = G__9887;
      chunk__9880 = G__9888;
      count__9881 = G__9889;
      i__9882 = G__9890;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__9879);
      if (temp__4425__auto__) {
        var seq__9879__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9879__$1)) {
          var c__5580__auto__ = cljs.core.chunk_first(seq__9879__$1);
          var G__9891 = cljs.core.chunk_rest(seq__9879__$1);
          var G__9892 = c__5580__auto__;
          var G__9893 = cljs.core.count(c__5580__auto__);
          var G__9894 = 0;
          seq__9879 = G__9891;
          chunk__9880 = G__9892;
          count__9881 = G__9893;
          i__9882 = G__9894;
          continue;
        } else {
          var vec__9884 = cljs.core.first(seq__9879__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9884, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9884, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__9895 = cljs.core.next(seq__9879__$1);
          var G__9896 = null;
          var G__9897 = 0;
          var G__9898 = 0;
          seq__9879 = G__9895;
          chunk__9880 = G__9896;
          count__9881 = G__9897;
          i__9882 = G__9898;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init, null, self__.nil_val) : f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var root_iter = self__.root ? cljs.core._iterator(self__.root) : cljs.core.nil_iter;
  if (self__.has_nil_QMARK_) {
    return new cljs.core.HashMapIter(self__.nil_val, root_iter, false);
  } else {
    return root_iter;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap({}, self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash(k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return !(self__.root.inode_lookup(0, cljs.core.hash(k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9899 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9900 = cljs.core.next(es);
          ret = G__9899;
          es = G__9900;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__9901 = null;
  var G__9901__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9901__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9901 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9901__2.call(this, self__, k);
      case 3:
        return G__9901__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9901.cljs$core$IFn$_invoke$arity$2 = G__9901__2;
  G__9901.cljs$core$IFn$_invoke$arity$3 = G__9901__3;
  return G__9901;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args9878) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9878)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$cnt, cljs.core.cst$sym$root, cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag, cljs.core.cst$sym$boolean], null)), cljs.core.cst$sym$nil_DASH_val, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.__GT_PersistentHashMap = function cljs$core$__GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashMap.fromArray = function(arr, no_clone) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone(arr);
  var len = arr__$1.length;
  var i = 0;
  var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9902 = i + 2;
      var G__9903 = cljs.core._assoc_BANG_(ret, arr__$1[i], arr__$1[i + 1]);
      i = G__9902;
      ret = G__9903;
      continue;
    } else {
      return cljs.core._persistent_BANG_(ret);
    }
    break;
  }
};
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__9904 = i + 1;
      var G__9905 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null, ks[i], vs[i]);
      i = G__9904;
      out = G__9905;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition0$ = 258;
  this.cljs$lang$protocol_mask$partition1$ = 56;
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (!(o == null) ? o.cljs$lang$protocol_mask$partition0$ & 2048 || o.cljs$core$IMapEntry$ ? true : !o.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry, o)) {
      return tcoll.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null, o), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq(o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4423__auto__ = cljs.core.first(es);
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          var G__9907 = cljs.core.next(es);
          var G__9908 = tcoll__$1.assoc_BANG_(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null, e), cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null, e));
          es = G__9907;
          tcoll__$1 = G__9908;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash(k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash(k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash(k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag, cljs.core.cst$sym$boolean, cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$root, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$count, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, 
  true], null)), cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_, new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag, cljs.core.cst$sym$boolean, cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/TransientHashMap");
};
cljs.core.__GT_TransientHashMap = function cljs$core$__GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function cljs$core$tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__9909 = ascending_QMARK_ ? t.left : t.right;
      var G__9910 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1, t);
      t = G__9909;
      stack__$1 = G__9910;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count(cljs.core.next(coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek(self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first(self__.stack);
  var next_stack = cljs.core.tree_map_seq_push(self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next(self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.PersistentTreeMapSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$stack, cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag, cljs.core.cst$sym$boolean], null)), cljs.core.cst$sym$cnt, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.__GT_PersistentTreeMapSeq = function cljs$core$__GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.create_tree_map_seq = function cljs$core$create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push(tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.RedNode;
cljs.core.BlackNode;
cljs.core.balance_left = function cljs$core$balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function cljs$core$balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function cljs$core$balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right(key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right(right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function cljs$core$balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left(key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left(left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function cljs$core$tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? cljs$core$tree_map_kv_reduce(node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_(init__$1)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = function() {
      var G__9920 = init__$1;
      var G__9921 = node.key;
      var G__9922 = node.val;
      return f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__9920, G__9921, G__9922) : f.call(null, G__9920, G__9921, G__9922);
    }();
    if (cljs.core.reduced_QMARK_(init__$2)) {
      return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? cljs$core$tree_map_kv_reduce(node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_(init__$3)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del(self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del(self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__9924 = null;
  var G__9924__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9924__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9924 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9924__2.call(this, self__, k);
      case 3:
        return G__9924__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9924.cljs$core$IFn$_invoke$arity$2 = G__9924__2;
  G__9924.cljs$core$IFn$_invoke$arity$3 = G__9924__3;
  return G__9924;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args9923) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9923)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.BlackNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key, cljs.core.cst$sym$val, cljs.core.cst$sym$left, cljs.core.cst$sym$right, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/BlackNode");
};
cljs.core.__GT_BlackNode = function cljs$core$__GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce(node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return (new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj(cljs.core._conj(cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__9926 = null;
  var G__9926__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9926__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9926 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9926__2.call(this, self__, k);
      case 3:
        return G__9926__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9926.cljs$core$IFn$_invoke$arity$2 = G__9926__2;
  G__9926.cljs$core$IFn$_invoke$arity$3 = G__9926__3;
  return G__9926;
}();
cljs.core.RedNode.prototype.apply = function(self__, args9925) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9925)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.RedNode.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key, cljs.core.cst$sym$val, cljs.core.cst$sym$left, cljs.core.cst$sym$right, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/RedNode");
};
cljs.core.__GT_RedNode = function cljs$core$__GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.tree_map_add = function cljs$core$tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = function() {
      var G__9939 = k;
      var G__9940 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9939, G__9940) : comp.call(null, G__9939, G__9940);
    }();
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = cljs$core$tree_map_add(comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = cljs$core$tree_map_add(comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function cljs$core$tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, cljs$core$tree_map_append(left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, cljs$core$tree_map_append(left, right.left), right.right, null);
        } else {
          var app = cljs$core$tree_map_append(left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del(left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function cljs$core$tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = function() {
      var G__9959 = k;
      var G__9960 = tree.key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__9959, G__9960) : comp.call(null, G__9959, G__9960);
    }();
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append(tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = cljs$core$tree_map_remove(comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del(tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = cljs$core$tree_map_remove(comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del(tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function cljs$core$tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k, tk) : comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, cljs$core$tree_map_replace(comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, cljs$core$tree_map_replace(comp, tree.right, k, v));
    }
  }
};
cljs.core.key;
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__9970 = cljs.core.seq(coll);
  var chunk__9971 = null;
  var count__9972 = 0;
  var i__9973 = 0;
  while (true) {
    if (i__9973 < count__9972) {
      var vec__9974 = chunk__9971.cljs$core$IIndexed$_nth$arity$2(null, i__9973);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9974, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9974, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__9980 = seq__9970;
      var G__9981 = chunk__9971;
      var G__9982 = count__9972;
      var G__9983 = i__9973 + 1;
      seq__9970 = G__9980;
      chunk__9971 = G__9981;
      count__9972 = G__9982;
      i__9973 = G__9983;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__9970);
      if (temp__4425__auto__) {
        var seq__9970__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__9970__$1)) {
          var c__5580__auto__ = cljs.core.chunk_first(seq__9970__$1);
          var G__9984 = cljs.core.chunk_rest(seq__9970__$1);
          var G__9985 = c__5580__auto__;
          var G__9986 = cljs.core.count(c__5580__auto__);
          var G__9987 = 0;
          seq__9970 = G__9984;
          chunk__9971 = G__9985;
          count__9972 = G__9986;
          i__9973 = G__9987;
          continue;
        } else {
          var vec__9975 = cljs.core.first(seq__9970__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9975, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__9975, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__9988 = cljs.core.next(seq__9970__$1);
          var G__9989 = null;
          var G__9990 = 0;
          var G__9991 = 0;
          seq__9970 = G__9988;
          chunk__9971 = G__9989;
          count__9972 = G__9990;
          i__9973 = G__9991;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = function() {
        var G__9976 = k;
        var G__9977 = t.key;
        return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9976, G__9977) : self__.comp.call(null, G__9976, G__9977);
      }();
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__9992 = t.left;
          t = G__9992;
          continue;
        } else {
          var G__9993 = t.right;
          t = G__9993;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce(self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map(coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, 0);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove(self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add(self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found, 0);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace(self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return !(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_(entry)) {
    return cljs.core._assoc(coll__$1, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq(entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first(es);
        if (cljs.core.vector_QMARK_(e)) {
          var G__9994 = cljs.core._assoc(ret, cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 0), cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e, 1));
          var G__9995 = cljs.core.next(es);
          ret = G__9994;
          es = G__9995;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__9996 = null;
  var G__9996__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__9996__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__9996 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__9996__2.call(this, self__, k);
      case 3:
        return G__9996__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__9996.cljs$core$IFn$_invoke$arity$2 = G__9996__2;
  G__9996.cljs$core$IFn$_invoke$arity$3 = G__9996__3;
  return G__9996;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args9969) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args9969)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq(self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = function() {
          var G__9978 = k;
          var G__9979 = t.key;
          return self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__9978, G__9979) : self__.comp.call(null, G__9978, G__9979);
        }();
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__9997 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__9998 = t.left;
              stack = G__9997;
              t = G__9998;
              continue;
            } else {
              var G__9999 = stack;
              var G__10000 = t.right;
              stack = G__9999;
              t = G__10000;
              continue;
            }
          } else {
            if (c > 0) {
              var G__10001 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack, t);
              var G__10002 = t.right;
              stack = G__10001;
              t = G__10002;
              continue;
            } else {
              var G__10003 = stack;
              var G__10004 = t.left;
              stack = G__10003;
              t = G__10004;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.PersistentTreeMap.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp, cljs.core.cst$sym$tree, cljs.core.cst$sym$cnt, cljs.core.cst$sym$meta, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.__GT_PersistentTreeMap = function cljs$core$__GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.hash_map = function cljs$core$hash_map(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10006 = arguments.length;
  var i__5836__auto___10007 = 0;
  while (true) {
    if (i__5836__auto___10007 < len__5835__auto___10006) {
      args__5842__auto__.push(arguments[i__5836__auto___10007]);
      var G__10008 = i__5836__auto___10007 + 1;
      i__5836__auto___10007 = G__10008;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (in$) {
      var G__10009 = cljs.core.nnext(in$);
      var G__10010 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10009;
      out = G__10010;
      continue;
    } else {
      return cljs.core.persistent_BANG_(out);
    }
    break;
  }
};
cljs.core.hash_map.cljs$lang$maxFixedArity = 0;
cljs.core.hash_map.cljs$lang$applyTo = function(seq10005) {
  return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10005));
};
cljs.core.array_map = function cljs$core$array_map(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10012 = arguments.length;
  var i__5836__auto___10013 = 0;
  while (true) {
    if (i__5836__auto___10013 < len__5835__auto___10012) {
      args__5842__auto__.push(arguments[i__5836__auto___10013]);
      var G__10014 = i__5836__auto___10013 + 1;
      i__5836__auto___10013 = G__10014;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var arr = keyvals instanceof cljs.core.IndexedSeq && keyvals.i === 0 ? keyvals.arr : cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals);
  return cljs.core.PersistentArrayMap.fromArray(arr, true, false);
};
cljs.core.array_map.cljs$lang$maxFixedArity = 0;
cljs.core.array_map.cljs$lang$applyTo = function(seq10011) {
  return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10011));
};
cljs.core.obj_map = function cljs$core$obj_map(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10018 = arguments.length;
  var i__5836__auto___10019 = 0;
  while (true) {
    if (i__5836__auto___10019 < len__5835__auto___10018) {
      args__5842__auto__.push(arguments[i__5836__auto___10019]);
      var G__10020 = i__5836__auto___10019 + 1;
      i__5836__auto___10019 = G__10020;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var ks = [];
  var obj = {};
  var kvs = cljs.core.seq(keyvals);
  while (true) {
    if (kvs) {
      ks.push(cljs.core.first(kvs));
      obj[cljs.core.first(kvs)] = cljs.core.second(kvs);
      var G__10021 = cljs.core.nnext(kvs);
      kvs = G__10021;
      continue;
    } else {
      return cljs.core.ObjMap.fromObject(ks, obj);
    }
    break;
  }
};
cljs.core.obj_map.cljs$lang$maxFixedArity = 0;
cljs.core.obj_map.cljs$lang$applyTo = function(seq10015) {
  return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10015));
};
cljs.core.sorted_map = function cljs$core$sorted_map(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10023 = arguments.length;
  var i__5836__auto___10024 = 0;
  while (true) {
    if (i__5836__auto___10024 < len__5835__auto___10023) {
      args__5842__auto__.push(arguments[i__5836__auto___10024]);
      var G__10025 = i__5836__auto___10024 + 1;
      i__5836__auto___10024 = G__10025;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = function(keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = cljs.core.PersistentTreeMap.EMPTY;
  while (true) {
    if (in$) {
      var G__10026 = cljs.core.nnext(in$);
      var G__10027 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10026;
      out = G__10027;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_map.cljs$lang$applyTo = function(seq10022) {
  return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10022));
};
cljs.core.sorted_map_by = function cljs$core$sorted_map_by(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10030 = arguments.length;
  var i__5836__auto___10031 = 0;
  while (true) {
    if (i__5836__auto___10031 < len__5835__auto___10030) {
      args__5842__auto__.push(arguments[i__5836__auto___10031]);
      var G__10032 = i__5836__auto___10031 + 1;
      i__5836__auto___10031 = G__10032;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 1 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(1), 0) : null;
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5843__auto__);
};
cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keyvals) {
  var in$ = cljs.core.seq(keyvals);
  var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator), null, 0, null, 0);
  while (true) {
    if (in$) {
      var G__10033 = cljs.core.nnext(in$);
      var G__10034 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out, cljs.core.first(in$), cljs.core.second(in$));
      in$ = G__10033;
      out = G__10034;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.sorted_map_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_map_by.cljs$lang$applyTo = function(seq10028) {
  var G__10029 = cljs.core.first(seq10028);
  var seq10028__$1 = cljs.core.next(seq10028);
  return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__10029, seq10028__$1);
};
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_key$arity$1(null);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.KeySeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag, cljs.core.cst$sym$not_DASH_native], null)), cljs.core.cst$sym$_meta], null);
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/KeySeq");
};
cljs.core.__GT_KeySeq = function cljs$core$__GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.keys = function cljs$core$keys(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function cljs$core$key(map_entry) {
  return cljs.core._key(map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll(coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential(coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
  return me.cljs$core$IMapEntry$_val$arity$1(null);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = (!(self__.mseq == null) ? self__.mseq.cljs$lang$protocol_mask$partition0$ & 128 || self__.mseq.cljs$core$INext$ ? true : !self__.mseq.cljs$lang$protocol_mask$partition0$ ? cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq) : false : cljs.core.native_satisfies_QMARK_(cljs.core.INext, self__.mseq)) ? self__.mseq.cljs$core$INext$_next$arity$1(null) : cljs.core.next(self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons(o, coll__$1);
};
cljs.core.ValSeq.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag, cljs.core.cst$sym$not_DASH_native], null)), cljs.core.cst$sym$_meta], null);
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ValSeq");
};
cljs.core.__GT_ValSeq = function cljs$core$__GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.vals = function cljs$core$vals(hash_map) {
  var temp__4425__auto__ = cljs.core.seq(hash_map);
  if (temp__4425__auto__) {
    var mseq = temp__4425__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function cljs$core$val(map_entry) {
  return cljs.core._val(map_entry);
};
cljs.core.merge = function cljs$core$merge(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10042 = arguments.length;
  var i__5836__auto___10043 = 0;
  while (true) {
    if (i__5836__auto___10043 < len__5835__auto___10042) {
      args__5842__auto__.push(arguments[i__5836__auto___10043]);
      var G__10044 = i__5836__auto___10043 + 1;
      i__5836__auto___10043 = G__10044;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = function(maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(function(p1__10039_SHARP_, p2__10040_SHARP_) {
      return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(function() {
        var or__4777__auto__ = p1__10039_SHARP_;
        if (cljs.core.truth_(or__4777__auto__)) {
          return or__4777__auto__;
        } else {
          return cljs.core.PersistentArrayMap.EMPTY;
        }
      }(), p2__10040_SHARP_);
    }, maps);
  } else {
    return null;
  }
};
cljs.core.merge.cljs$lang$maxFixedArity = 0;
cljs.core.merge.cljs$lang$applyTo = function(seq10041) {
  return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10041));
};
cljs.core.merge_with = function cljs$core$merge_with(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10049 = arguments.length;
  var i__5836__auto___10050 = 0;
  while (true) {
    if (i__5836__auto___10050 < len__5835__auto___10049) {
      args__5842__auto__.push(arguments[i__5836__auto___10050]);
      var G__10051 = i__5836__auto___10050 + 1;
      i__5836__auto___10050 = G__10051;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 1 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(1), 0) : null;
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5843__auto__);
};
cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = function(f, maps) {
  if (cljs.core.truth_(cljs.core.some(cljs.core.identity, maps))) {
    var merge_entry = function(m, e) {
      var k = cljs.core.first(e);
      var v = cljs.core.second(e);
      if (cljs.core.contains_QMARK_(m, k)) {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, function() {
          var G__10047 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m, k);
          var G__10048 = v;
          return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10047, G__10048) : f.call(null, G__10047, G__10048);
        }());
      } else {
        return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m, k, v);
      }
    };
    var merge2 = function(merge_entry) {
      return function(m1, m2) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry, function() {
          var or__4777__auto__ = m1;
          if (cljs.core.truth_(or__4777__auto__)) {
            return or__4777__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), cljs.core.seq(m2));
      };
    }(merge_entry);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2, maps);
  } else {
    return null;
  }
};
cljs.core.merge_with.cljs$lang$maxFixedArity = 1;
cljs.core.merge_with.cljs$lang$applyTo = function(seq10045) {
  var G__10046 = cljs.core.first(seq10045);
  var seq10045__$1 = cljs.core.next(seq10045);
  return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__10046, seq10045__$1);
};
cljs.core.select_keys = function cljs$core$select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq(keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first(keys);
      var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map, key, cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found);
      var G__10052 = cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry, cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, key, entry) : ret;
      var G__10053 = cljs.core.next(keys);
      ret = G__10052;
      keys = G__10053;
      continue;
    } else {
      return cljs.core.with_meta(ret, cljs.core.meta(map));
    }
    break;
  }
};
cljs.core.TransientHashSet;
cljs.core.HashSetIter = function(iter) {
  this.iter = iter;
};
cljs.core.HashSetIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.iter.hasNext();
};
cljs.core.HashSetIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (self__.iter.hasNext()) {
    return self__.iter.next().tail[0];
  } else {
    throw new Error("No such element");
  }
};
cljs.core.HashSetIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.HashSetIter.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null);
};
cljs.core.HashSetIter.cljs$lang$type = true;
cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";
cljs.core.HashSetIter.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/HashSetIter");
};
cljs.core.__GT_HashSetIter = function cljs$core$__GT_HashSetIter(iter) {
  return new cljs.core.HashSetIter(iter);
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10056 = cljs.core.seq(coll);
  var chunk__10057 = null;
  var count__10058 = 0;
  var i__10059 = 0;
  while (true) {
    if (i__10059 < count__10058) {
      var vec__10060 = chunk__10057.cljs$core$IIndexed$_nth$arity$2(null, i__10059);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10060, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10060, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10062 = seq__10056;
      var G__10063 = chunk__10057;
      var G__10064 = count__10058;
      var G__10065 = i__10059 + 1;
      seq__10056 = G__10062;
      chunk__10057 = G__10063;
      count__10058 = G__10064;
      i__10059 = G__10065;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10056);
      if (temp__4425__auto__) {
        var seq__10056__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10056__$1)) {
          var c__5580__auto__ = cljs.core.chunk_first(seq__10056__$1);
          var G__10066 = cljs.core.chunk_rest(seq__10056__$1);
          var G__10067 = c__5580__auto__;
          var G__10068 = cljs.core.count(c__5580__auto__);
          var G__10069 = 0;
          seq__10056 = G__10066;
          chunk__10057 = G__10067;
          count__10058 = G__10068;
          i__10059 = G__10069;
          continue;
        } else {
          var vec__10061 = cljs.core.first(seq__10056__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10061, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10061, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10070 = cljs.core.next(seq__10056__$1);
          var G__10071 = null;
          var G__10072 = 0;
          var G__10073 = 0;
          seq__10056 = G__10070;
          chunk__10057 = G__10071;
          count__10058 = G__10072;
          i__10059 = G__10073;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_(self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10054_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10054_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc(self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__10074 = null;
  var G__10074__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10074__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10074 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10074__2.call(this, self__, k);
      case 3:
        return G__10074__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10074.cljs$core$IFn$_invoke$arity$2 = G__10074__2;
  G__10074.cljs$core$IFn$_invoke$arity$3 = G__10074__3;
  return G__10074;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args10055) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10055)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$hash_DASH_map, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.__GT_PersistentHashSet = function cljs$core$__GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone(items);
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__10075 = i + 1;
        var G__10076 = cljs.core._assoc_BANG_(out, items[i], null);
        i = G__10075;
        out = G__10076;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_(out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__10077 = i + 1;
        var G__10078 = cljs.core._conj_BANG_(out, items[i]);
        i = G__10077;
        out = G__10078;
        continue;
      } else {
        return cljs.core._persistent_BANG_(out);
      }
      break;
    }
  }
};
cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition1$ = 136;
  this.cljs$lang$protocol_mask$partition0$ = 259;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_(self__.transient_map), null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count(self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__10080 = null;
  var G__10080__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__10080__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__10080 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10080__2.call(this, self__, k);
      case 3:
        return G__10080__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10080.cljs$core$IFn$_invoke$arity$2 = G__10080__2;
  G__10080.cljs$core$IFn$_invoke$arity$3 = G__10080__3;
  return G__10080;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args10079) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10079)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/TransientHashSet");
};
cljs.core.__GT_TransientHashSet = function cljs$core$__GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.es6_iterator(cljs.core.seq(coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_(coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__10083 = cljs.core.seq(coll);
  var chunk__10084 = null;
  var count__10085 = 0;
  var i__10086 = 0;
  while (true) {
    if (i__10086 < count__10085) {
      var vec__10087 = chunk__10084.cljs$core$IIndexed$_nth$arity$2(null, i__10086);
      var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10087, 0, null);
      var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10087, 1, null);
      f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
      var G__10089 = seq__10083;
      var G__10090 = chunk__10084;
      var G__10091 = count__10085;
      var G__10092 = i__10086 + 1;
      seq__10083 = G__10089;
      chunk__10084 = G__10090;
      count__10085 = G__10091;
      i__10086 = G__10092;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10083);
      if (temp__4425__auto__) {
        var seq__10083__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10083__$1)) {
          var c__5580__auto__ = cljs.core.chunk_first(seq__10083__$1);
          var G__10093 = cljs.core.chunk_rest(seq__10083__$1);
          var G__10094 = c__5580__auto__;
          var G__10095 = cljs.core.count(c__5580__auto__);
          var G__10096 = 0;
          seq__10083 = G__10093;
          chunk__10084 = G__10094;
          count__10085 = G__10095;
          i__10086 = G__10096;
          continue;
        } else {
          var vec__10088 = cljs.core.first(seq__10083__$1);
          var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10088, 0, null);
          var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10088, 1, null);
          f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v, k) : f.call(null, v, k);
          var G__10097 = cljs.core.next(seq__10083__$1);
          var G__10098 = null;
          var G__10099 = 0;
          var G__10100 = 0;
          seq__10083 = G__10097;
          chunk__10084 = G__10098;
          count__10085 = G__10099;
          i__10086 = G__10100;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count(self__.tree_map) > 0) {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core.rseq(self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_(other) && cljs.core.count(coll__$1) === cljs.core.count(other) && cljs.core.every_QMARK_(function(coll__$1) {
    return function(p1__10081_SHARP_) {
      return cljs.core.contains_QMARK_(coll__$1, p1__10081_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core._empty(self__.tree_map), 0);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys(self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__10101 = null;
  var G__10101__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__10101__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__10101 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__10101__2.call(this, self__, k);
      case 3:
        return G__10101__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10101.cljs$core$IFn$_invoke$arity$2 = G__10101__2;
  G__10101.cljs$core$IFn$_invoke$arity$3 = G__10101__3;
  return G__10101;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args10082) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10082)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq(self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key, cljs.core._sorted_seq_from(self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator(self__.tree_map);
};
cljs.core.PersistentTreeSet.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$tree_DASH_map, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.__GT_PersistentTreeSet = function cljs$core$__GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, cljs.core.empty_unordered_hash);
cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.set_from_indexed_seq = function cljs$core$set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__5674__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__5674__auto__.length) {
        var G__10102 = i + 1;
        var G__10103 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, arr[i]);
        i = G__10102;
        res = G__10103;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
};
cljs.core.set = function cljs$core$set(coll) {
  var in$ = cljs.core.seq(coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq(in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__10104 = cljs.core.next(in$__$1);
          var G__10105 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null, in$__$1.cljs$core$ISeq$_first$arity$1(null));
          in$__$1 = G__10104;
          out = G__10105;
          continue;
        } else {
          return cljs.core.persistent_BANG_(out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function cljs$core$hash_set(var_args) {
  var args10106 = [];
  var len__5835__auto___10110 = arguments.length;
  var i__5836__auto___10111 = 0;
  while (true) {
    if (i__5836__auto___10111 < len__5835__auto___10110) {
      args10106.push(arguments[i__5836__auto___10111]);
      var G__10112 = i__5836__auto___10111 + 1;
      i__5836__auto___10111 = G__10112;
      continue;
    } else {
    }
    break;
  }
  var G__10109 = args10106.length;
  switch(G__10109) {
    case 0:
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args10106.slice(0), 0);
      return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5854__auto__);
  }
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.PersistentHashSet.EMPTY;
};
cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.set(keys);
};
cljs.core.hash_set.cljs$lang$applyTo = function(seq10107) {
  return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10107));
};
cljs.core.hash_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set = function cljs$core$sorted_set(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10115 = arguments.length;
  var i__5836__auto___10116 = 0;
  while (true) {
    if (i__5836__auto___10116 < len__5835__auto___10115) {
      args__5842__auto__.push(arguments[i__5836__auto___10116]);
      var G__10117 = i__5836__auto___10116 + 1;
      i__5836__auto___10116 = G__10117;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = function(keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
};
cljs.core.sorted_set.cljs$lang$maxFixedArity = 0;
cljs.core.sorted_set.cljs$lang$applyTo = function(seq10114) {
  return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10114));
};
cljs.core.sorted_set_by = function cljs$core$sorted_set_by(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10120 = arguments.length;
  var i__5836__auto___10121 = 0;
  while (true) {
    if (i__5836__auto___10121 < len__5835__auto___10120) {
      args__5842__auto__.push(arguments[i__5836__auto___10121]);
      var G__10122 = i__5836__auto___10121 + 1;
      i__5836__auto___10121 = G__10122;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 1 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(1), 0) : null;
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5843__auto__);
};
cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = function(comparator, keys) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by(comparator), 0), keys);
};
cljs.core.sorted_set_by.cljs$lang$maxFixedArity = 1;
cljs.core.sorted_set_by.cljs$lang$applyTo = function(seq10118) {
  var G__10119 = cljs.core.first(seq10118);
  var seq10118__$1 = cljs.core.next(seq10118);
  return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__10119, seq10118__$1);
};
cljs.core.replace = function cljs$core$replace(var_args) {
  var args10125 = [];
  var len__5835__auto___10128 = arguments.length;
  var i__5836__auto___10129 = 0;
  while (true) {
    if (i__5836__auto___10129 < len__5835__auto___10128) {
      args10125.push(arguments[i__5836__auto___10129]);
      var G__10130 = i__5836__auto___10129 + 1;
      i__5836__auto___10129 = G__10130;
      continue;
    } else {
    }
    break;
  }
  var G__10127 = args10125.length;
  switch(G__10127) {
    case 1:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.replace.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10125.length)].join(""));;
  }
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = function(smap) {
  return cljs.core.map.cljs$core$IFn$_invoke$arity$1(function(p1__10123_SHARP_) {
    var temp__4423__auto__ = cljs.core.find(smap, p1__10123_SHARP_);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var e = temp__4423__auto__;
      return cljs.core.val(e);
    } else {
      return p1__10123_SHARP_;
    }
  });
};
cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = function(smap, coll) {
  if (cljs.core.vector_QMARK_(coll)) {
    var n = cljs.core.count(coll);
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(n) {
      return function(v, i) {
        var temp__4423__auto__ = cljs.core.find(smap, cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v, i));
        if (cljs.core.truth_(temp__4423__auto__)) {
          var e = temp__4423__auto__;
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v, i, cljs.core.second(e));
        } else {
          return v;
        }
      };
    }(n), coll, cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, cljs.core.iterate(cljs.core.inc, 0)));
  } else {
    return cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(p1__10124_SHARP_) {
      var temp__4423__auto__ = cljs.core.find(smap, p1__10124_SHARP_);
      if (cljs.core.truth_(temp__4423__auto__)) {
        var e = temp__4423__auto__;
        return cljs.core.second(e);
      } else {
        return p1__10124_SHARP_;
      }
    }, coll);
  }
};
cljs.core.replace.cljs$lang$maxFixedArity = 2;
cljs.core.distinct = function cljs$core$distinct(var_args) {
  var args10132 = [];
  var len__5835__auto___10141 = arguments.length;
  var i__5836__auto___10142 = 0;
  while (true) {
    if (i__5836__auto___10142 < len__5835__auto___10141) {
      args10132.push(arguments[i__5836__auto___10142]);
      var G__10143 = i__5836__auto___10142 + 1;
      i__5836__auto___10142 = G__10143;
      continue;
    } else {
    }
    break;
  }
  var G__10134 = args10132.length;
  switch(G__10134) {
    case 0:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10132.length)].join(""));;
  }
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
    return function(seen) {
      return function() {
        var G__10145 = null;
        var G__10145__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10145__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__10145__2 = function(result, input) {
          if (cljs.core.contains_QMARK_(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null, seen), input)) {
            return result;
          } else {
            cljs.core._vreset_BANG_(seen, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen), input));
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__10145 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10145__0.call(this);
            case 1:
              return G__10145__1.call(this, result);
            case 2:
              return G__10145__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10145.cljs$core$IFn$_invoke$arity$0 = G__10145__0;
        G__10145.cljs$core$IFn$_invoke$arity$1 = G__10145__1;
        G__10145.cljs$core$IFn$_invoke$arity$2 = G__10145__2;
        return G__10145;
      }();
    }(seen);
  };
};
cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var step = function cljs$core$step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__10139, seen__$1) {
        while (true) {
          var vec__10140 = p__10139;
          var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10140, 0, null);
          var xs__$1 = vec__10140;
          var temp__4425__auto__ = cljs.core.seq(xs__$1);
          if (temp__4425__auto__) {
            var s = temp__4425__auto__;
            if (cljs.core.contains_QMARK_(seen__$1, f)) {
              var G__10146 = cljs.core.rest(s);
              var G__10147 = seen__$1;
              p__10139 = G__10146;
              seen__$1 = G__10147;
              continue;
            } else {
              return cljs.core.cons(f, cljs$core$step(cljs.core.rest(s), cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step(coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.distinct.cljs$lang$maxFixedArity = 1;
cljs.core.butlast = function cljs$core$butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next(s__$1)) {
      var G__10148 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret, cljs.core.first(s__$1));
      var G__10149 = cljs.core.next(s__$1);
      ret = G__10148;
      s__$1 = G__10149;
      continue;
    } else {
      return cljs.core.seq(ret);
    }
    break;
  }
};
cljs.core.name = function cljs$core$name(x) {
  if (!(x == null) ? x.cljs$lang$protocol_mask$partition1$ & 4096 || x.cljs$core$INamed$ ? true : false : false) {
    return x.cljs$core$INamed$_name$arity$1(null);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error([cljs.core.str("Doesn't support name: "), cljs.core.str(x)].join(""));
    }
  }
};
cljs.core.zipmap = function cljs$core$zipmap(keys, vals) {
  var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq(keys);
  var vs = cljs.core.seq(vals);
  while (true) {
    if (ks && vs) {
      var G__10152 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map, cljs.core.first(ks), cljs.core.first(vs));
      var G__10153 = cljs.core.next(ks);
      var G__10154 = cljs.core.next(vs);
      map = G__10152;
      ks = G__10153;
      vs = G__10154;
      continue;
    } else {
      return cljs.core.persistent_BANG_(map);
    }
    break;
  }
};
cljs.core.max_key = function cljs$core$max_key(var_args) {
  var args10157 = [];
  var len__5835__auto___10164 = arguments.length;
  var i__5836__auto___10165 = 0;
  while (true) {
    if (i__5836__auto___10165 < len__5835__auto___10164) {
      args10157.push(arguments[i__5836__auto___10165]);
      var G__10166 = i__5836__auto___10165 + 1;
      i__5836__auto___10165 = G__10166;
      continue;
    } else {
    }
    break;
  }
  var G__10163 = args10157.length;
  switch(G__10163) {
    case 2:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args10157.slice(3), 0);
      return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5854__auto__);
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10155_SHARP_, p2__10156_SHARP_) {
    return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, p1__10155_SHARP_, p2__10156_SHARP_);
  }, cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.max_key.cljs$lang$applyTo = function(seq10158) {
  var G__10159 = cljs.core.first(seq10158);
  var seq10158__$1 = cljs.core.next(seq10158);
  var G__10160 = cljs.core.first(seq10158__$1);
  var seq10158__$2 = cljs.core.next(seq10158__$1);
  var G__10161 = cljs.core.first(seq10158__$2);
  var seq10158__$3 = cljs.core.next(seq10158__$2);
  return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__10159, G__10160, G__10161, seq10158__$3);
};
cljs.core.max_key.cljs$lang$maxFixedArity = 3;
cljs.core.min_key = function cljs$core$min_key(var_args) {
  var args10170 = [];
  var len__5835__auto___10177 = arguments.length;
  var i__5836__auto___10178 = 0;
  while (true) {
    if (i__5836__auto___10178 < len__5835__auto___10177) {
      args10170.push(arguments[i__5836__auto___10178]);
      var G__10179 = i__5836__auto___10178 + 1;
      i__5836__auto___10178 = G__10179;
      continue;
    } else {
    }
    break;
  }
  var G__10176 = args10170.length;
  switch(G__10176) {
    case 2:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args10170.slice(3), 0);
      return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5854__auto__);
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = function(k, x) {
  return x;
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = function(k, x, y) {
  if ((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null, x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null, y))) {
    return x;
  } else {
    return y;
  }
};
cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = function(k, x, y, more) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10168_SHARP_, p2__10169_SHARP_) {
    return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, p1__10168_SHARP_, p2__10169_SHARP_);
  }, cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k, x, y), more);
};
cljs.core.min_key.cljs$lang$applyTo = function(seq10171) {
  var G__10172 = cljs.core.first(seq10171);
  var seq10171__$1 = cljs.core.next(seq10171);
  var G__10173 = cljs.core.first(seq10171__$1);
  var seq10171__$2 = cljs.core.next(seq10171__$1);
  var G__10174 = cljs.core.first(seq10171__$2);
  var seq10171__$3 = cljs.core.next(seq10171__$2);
  return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__10172, G__10173, G__10174, seq10171__$3);
};
cljs.core.min_key.cljs$lang$maxFixedArity = 3;
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.ArrayList.getBasis = function() {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/ArrayList");
};
cljs.core.__GT_ArrayList = function cljs$core$__GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function cljs$core$array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function cljs$core$partition_all(var_args) {
  var args10181 = [];
  var len__5835__auto___10184 = arguments.length;
  var i__5836__auto___10185 = 0;
  while (true) {
    if (i__5836__auto___10185 < len__5835__auto___10184) {
      args10181.push(arguments[i__5836__auto___10185]);
      var G__10186 = i__5836__auto___10185 + 1;
      i__5836__auto___10185 = G__10186;
      continue;
    } else {
    }
    break;
  }
  var G__10183 = args10181.length;
  switch(G__10183) {
    case 1:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10181.length)].join(""));;
  }
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return function(rf) {
    var a = cljs.core.array_list();
    return function(a) {
      return function() {
        var G__10188 = null;
        var G__10188__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10188__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__10188__2 = function(result, input) {
          a.add(input);
          if (n === a.size()) {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
          } else {
            return result;
          }
        };
        G__10188 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10188__0.call(this);
            case 1:
              return G__10188__1.call(this, result);
            case 2:
              return G__10188__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10188.cljs$core$IFn$_invoke$arity$0 = G__10188__0;
        G__10188.cljs$core$IFn$_invoke$arity$1 = G__10188__1;
        G__10188.cljs$core$IFn$_invoke$arity$2 = G__10188__2;
        return G__10188;
      }();
    }(a);
  };
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, n, coll);
};
cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = function(n, step, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n, s), cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n, step, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_all.cljs$lang$maxFixedArity = 3;
cljs.core.take_while = function cljs$core$take_while(var_args) {
  var args10189 = [];
  var len__5835__auto___10193 = arguments.length;
  var i__5836__auto___10194 = 0;
  while (true) {
    if (i__5836__auto___10194 < len__5835__auto___10193) {
      args10189.push(arguments[i__5836__auto___10194]);
      var G__10195 = i__5836__auto___10194 + 1;
      i__5836__auto___10194 = G__10195;
      continue;
    } else {
    }
    break;
  }
  var G__10191 = args10189.length;
  switch(G__10191) {
    case 1:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10189.length)].join(""));;
  }
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = function(pred) {
  return function(rf) {
    return function() {
      var G__10197 = null;
      var G__10197__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10197__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__10197__2 = function(result, input) {
        if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null, input))) {
          return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
        } else {
          return cljs.core.reduced(result);
        }
      };
      G__10197 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10197__0.call(this);
          case 1:
            return G__10197__1.call(this, result);
          case 2:
            return G__10197__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10197.cljs$core$IFn$_invoke$arity$0 = G__10197__0;
      G__10197.cljs$core$IFn$_invoke$arity$1 = G__10197__1;
      G__10197.cljs$core$IFn$_invoke$arity$2 = G__10197__2;
      return G__10197;
    }();
  };
};
cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = function(pred, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      if (cljs.core.truth_(function() {
        var G__10192 = cljs.core.first(s);
        return pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__10192) : pred.call(null, G__10192);
      }())) {
        return cljs.core.cons(cljs.core.first(s), cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, cljs.core.rest(s)));
      } else {
        return null;
      }
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_while.cljs$lang$maxFixedArity = 2;
cljs.core.mk_bound_fn = function cljs$core$mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator(sc);
    var G__10206 = function() {
      var G__10208 = cljs.core._entry_key(sc, e);
      var G__10209 = key;
      return comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__10208, G__10209) : comp.call(null, G__10208, G__10209);
    }();
    var G__10207 = 0;
    return test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__10206, G__10207) : test.call(null, G__10206, G__10207);
  };
};
cljs.core.subseq = function cljs$core$subseq(var_args) {
  var args10210 = [];
  var len__5835__auto___10215 = arguments.length;
  var i__5836__auto___10216 = 0;
  while (true) {
    if (i__5836__auto___10216 < len__5835__auto___10215) {
      args10210.push(arguments[i__5836__auto___10216]);
      var G__10217 = i__5836__auto___10216 + 1;
      i__5836__auto___10216 = G__10217;
      continue;
    } else {
    }
    break;
  }
  var G__10212 = args10210.length;
  switch(G__10212) {
    case 3:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10210.length)].join(""));;
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, true);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__10213 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10213, 0, null);
      var s = vec__10213;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, true));
  }
};
cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, start_key, true);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__10214 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10214, 0, null);
    var s = vec__10214;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, start_test, start_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.subseq.cljs$lang$maxFixedArity = 5;
cljs.core.rsubseq = function cljs$core$rsubseq(var_args) {
  var args10219 = [];
  var len__5835__auto___10224 = arguments.length;
  var i__5836__auto___10225 = 0;
  while (true) {
    if (i__5836__auto___10225 < len__5835__auto___10224) {
      args10219.push(arguments[i__5836__auto___10225]);
      var G__10226 = i__5836__auto___10225 + 1;
      i__5836__auto___10225 = G__10226;
      continue;
    } else {
    }
    break;
  }
  var G__10221 = args10219.length;
  switch(G__10221) {
    case 3:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    case 5:
      return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10219.length)].join(""));;
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = function(sc, test, key) {
  var include = cljs.core.mk_bound_fn(sc, test, key);
  if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
    var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, key, false);
    if (cljs.core.truth_(temp__4425__auto__)) {
      var vec__10222 = temp__4425__auto__;
      var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10222, 0, null);
      var s = vec__10222;
      if (cljs.core.truth_(include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null, e))) {
        return s;
      } else {
        return cljs.core.next(s);
      }
    } else {
      return null;
    }
  } else {
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include, cljs.core._sorted_seq(sc, false));
  }
};
cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = function(sc, start_test, start_key, end_test, end_key) {
  var temp__4425__auto__ = cljs.core._sorted_seq_from(sc, end_key, false);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var vec__10223 = temp__4425__auto__;
    var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10223, 0, null);
    var s = vec__10223;
    return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn(sc, end_test, end_key).call(null, e)) ? s : cljs.core.next(s));
  } else {
    return null;
  }
};
cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;
cljs.core.RangeIterator = function(i, end, step) {
  this.i = i;
  this.end = end;
  this.step = step;
};
cljs.core.RangeIterator.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__.step > 0) {
    return self__.i < self__.end;
  } else {
    return self__.i > self__.end;
  }
};
cljs.core.RangeIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.i;
  self__.i = self__.i + self__.step;
  return ret;
};
cljs.core.RangeIterator.getBasis = function() {
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.cst$sym$end, cljs.core.cst$sym$step], null);
};
cljs.core.RangeIterator.cljs$lang$type = true;
cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";
cljs.core.RangeIterator.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/RangeIterator");
};
cljs.core.__GT_RangeIterator = function cljs$core$__GT_RangeIterator(i, end, step) {
  return new cljs.core.RangeIterator(i, end, step);
};
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count(rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIterable$ = true;
cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RangeIterator(self__.start, self__.end, self__.step);
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not(cljs.core._seq(rng__$1))) {
    return 0;
  } else {
    var G__10228 = (self__.end - self__.start) / self__.step;
    return Math.ceil(G__10228);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__5212__auto__ = self__.__hash;
  if (!(h__5212__auto__ == null)) {
    return h__5212__auto__;
  } else {
    var h__5212__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
    self__.__hash = h__5212__auto____$1;
    return h__5212__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential(rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta(cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, init) {
  var self__ = this;
  var rng__$1 = this;
  var i = self__.start;
  var ret = init;
  while (true) {
    if (self__.step > 0 ? i < self__.end : i > self__.end) {
      var ret__$1 = f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret, i) : f.call(null, ret, i);
      if (cljs.core.reduced_QMARK_(ret__$1)) {
        return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null, ret__$1);
      } else {
        var G__10229 = i + self__.step;
        var G__10230 = ret__$1;
        i = G__10229;
        ret = G__10230;
        continue;
      }
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq(rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq(rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.step < 0) {
      if (self__.start > self__.end) {
        return rng__$1;
      } else {
        return null;
      }
    } else {
      if (self__.start === self__.end) {
        return null;
      } else {
        return rng__$1;
      }
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons(o, rng__$1);
};
cljs.core.Range.getBasis = function() {
  return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta, cljs.core.cst$sym$start, cljs.core.cst$sym$end, cljs.core.cst$sym$step, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Range");
};
cljs.core.__GT_Range = function cljs$core$__GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.range = function cljs$core$range(var_args) {
  var args10231 = [];
  var len__5835__auto___10234 = arguments.length;
  var i__5836__auto___10235 = 0;
  while (true) {
    if (i__5836__auto___10235 < len__5835__auto___10234) {
      args10231.push(arguments[i__5836__auto___10235]);
      var G__10236 = i__5836__auto___10235 + 1;
      i__5836__auto___10235 = G__10236;
      continue;
    } else {
    }
    break;
  }
  var G__10233 = args10231.length;
  switch(G__10233) {
    case 0:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.range.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10231.length)].join(""));;
  }
};
cljs.core.range.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, Number.MAX_VALUE, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$1 = function(end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(0, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$2 = function(start, end) {
  return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start, end, 1);
};
cljs.core.range.cljs$core$IFn$_invoke$arity$3 = function(start, end, step) {
  return new cljs.core.Range(null, start, end, step, null);
};
cljs.core.range.cljs$lang$maxFixedArity = 3;
cljs.core.take_nth = function cljs$core$take_nth(var_args) {
  var args10238 = [];
  var len__5835__auto___10243 = arguments.length;
  var i__5836__auto___10244 = 0;
  while (true) {
    if (i__5836__auto___10244 < len__5835__auto___10243) {
      args10238.push(arguments[i__5836__auto___10244]);
      var G__10245 = i__5836__auto___10244 + 1;
      i__5836__auto___10244 = G__10245;
      continue;
    } else {
    }
    break;
  }
  var G__10240 = args10238.length;
  switch(G__10240) {
    case 1:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10238.length)].join(""));;
  }
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = function(n) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__10241 = cljs.core.list(cljs.core.cst$sym$number_QMARK_, cljs.core.cst$sym$n);
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__10241) : cljs.core.pr_str.call(null, G__10241);
    }())].join(""));
  }
  return function(rf) {
    var ia = cljs.core.volatile_BANG_(-1);
    return function(ia) {
      return function() {
        var G__10247 = null;
        var G__10247__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10247__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__10247__2 = function(result, input) {
          var i = cljs.core._vreset_BANG_(ia, cljs.core._deref(ia) + 1);
          if (cljs.core.rem(i, n) === 0) {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          } else {
            return result;
          }
        };
        G__10247 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10247__0.call(this);
            case 1:
              return G__10247__1.call(this, result);
            case 2:
              return G__10247__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10247.cljs$core$IFn$_invoke$arity$0 = G__10247__0;
        G__10247.cljs$core$IFn$_invoke$arity$1 = G__10247__1;
        G__10247.cljs$core$IFn$_invoke$arity$2 = G__10247__2;
        return G__10247;
      }();
    }(ia);
  };
};
cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  if (typeof n === "number") {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(function() {
      var G__10242 = cljs.core.list(cljs.core.cst$sym$number_QMARK_, cljs.core.cst$sym$n);
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1 ? cljs.core.pr_str.cljs$core$IFn$_invoke$arity$1(G__10242) : cljs.core.pr_str.call(null, G__10242);
    }())].join(""));
  }
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.cons(cljs.core.first(s), cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n, cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n, s)));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.take_nth.cljs$lang$maxFixedArity = 2;
cljs.core.split_with = function cljs$core$split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred, coll), cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred, coll)], null);
};
cljs.core.partition_by = function cljs$core$partition_by(var_args) {
  var args10249 = [];
  var len__5835__auto___10252 = arguments.length;
  var i__5836__auto___10253 = 0;
  while (true) {
    if (i__5836__auto___10253 < len__5835__auto___10252) {
      args10249.push(arguments[i__5836__auto___10253]);
      var G__10254 = i__5836__auto___10253 + 1;
      i__5836__auto___10253 = G__10254;
      continue;
    } else {
    }
    break;
  }
  var G__10251 = args10249.length;
  switch(G__10251) {
    case 1:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10249.length)].join(""));;
  }
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function(rf) {
    var a = cljs.core.array_list();
    var pa = cljs.core.volatile_BANG_(cljs.core.cst$kw$cljs$core_SLASH_none);
    return function(a, pa) {
      return function() {
        var G__10256 = null;
        var G__10256__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10256__1 = function(result) {
          var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            return cljs.core.unreduced(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v));
          }();
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null, result__$1);
        };
        var G__10256__2 = function(result, input) {
          var pval = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          var val = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null, input);
          cljs.core.vreset_BANG_(pa, val);
          if (cljs.core.keyword_identical_QMARK_(pval, cljs.core.cst$kw$cljs$core_SLASH_none) || cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val, pval)) {
            a.add(input);
            return result;
          } else {
            var v = cljs.core.vec(a.toArray());
            a.clear();
            var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, v) : rf.call(null, result, v);
            if (cljs.core.reduced_QMARK_(ret)) {
            } else {
              a.add(input);
            }
            return ret;
          }
        };
        G__10256 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10256__0.call(this);
            case 1:
              return G__10256__1.call(this, result);
            case 2:
              return G__10256__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10256.cljs$core$IFn$_invoke$arity$0 = G__10256__0;
        G__10256.cljs$core$IFn$_invoke$arity$1 = G__10256__1;
        G__10256.cljs$core$IFn$_invoke$arity$2 = G__10256__2;
        return G__10256;
      }();
    }(a, pa);
  };
};
cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      var fst = cljs.core.first(s);
      var fv = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null, fst);
      var run = cljs.core.cons(fst, cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(function(fst, fv, s, temp__4425__auto__) {
        return function(p1__10248_SHARP_) {
          return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv, f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__10248_SHARP_) : f.call(null, p1__10248_SHARP_));
        };
      }(fst, fv, s, temp__4425__auto__), cljs.core.next(s)));
      return cljs.core.cons(run, cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f, cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run), s))));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.partition_by.cljs$lang$maxFixedArity = 2;
cljs.core.frequencies = function cljs$core$frequencies(coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(counts, x) {
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts, x, cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts, x, 0) + 1);
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function cljs$core$reductions(var_args) {
  var args10257 = [];
  var len__5835__auto___10262 = arguments.length;
  var i__5836__auto___10263 = 0;
  while (true) {
    if (i__5836__auto___10263 < len__5835__auto___10262) {
      args10257.push(arguments[i__5836__auto___10263]);
      var G__10264 = i__5836__auto___10263 + 1;
      i__5836__auto___10263 = G__10264;
      continue;
    } else {
    }
    break;
  }
  var G__10259 = args10257.length;
  switch(G__10259) {
    case 2:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10257.length)].join(""));;
  }
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = function(f, coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4423__auto__ = cljs.core.seq(coll);
    if (temp__4423__auto__) {
      var s = temp__4423__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, cljs.core.first(s), cljs.core.rest(s));
    } else {
      return cljs.core._conj(cljs.core.List.EMPTY, f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
    }
  }, null, null);
};
cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = function(f, init, coll) {
  return cljs.core.cons(init, new cljs.core.LazySeq(null, function() {
    var temp__4425__auto__ = cljs.core.seq(coll);
    if (temp__4425__auto__) {
      var s = temp__4425__auto__;
      return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f, function() {
        var G__10260 = init;
        var G__10261 = cljs.core.first(s);
        return f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__10260, G__10261) : f.call(null, G__10260, G__10261);
      }(), cljs.core.rest(s));
    } else {
      return null;
    }
  }, null, null));
};
cljs.core.reductions.cljs$lang$maxFixedArity = 3;
cljs.core.juxt = function cljs$core$juxt(var_args) {
  var args10276 = [];
  var len__5835__auto___10283 = arguments.length;
  var i__5836__auto___10284 = 0;
  while (true) {
    if (i__5836__auto___10284 < len__5835__auto___10283) {
      args10276.push(arguments[i__5836__auto___10284]);
      var G__10285 = i__5836__auto___10284 + 1;
      i__5836__auto___10284 = G__10285;
      continue;
    } else {
    }
    break;
  }
  var G__10282 = args10276.length;
  switch(G__10282) {
    case 1:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args10276.slice(3), 0);
      return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5854__auto__);
  }
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = function(f) {
  return function() {
    var G__10287 = null;
    var G__10287__0 = function() {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)], null);
    };
    var G__10287__1 = function(x) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x)], null);
    };
    var G__10287__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y)], null);
    };
    var G__10287__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z)], null);
    };
    var G__10287__4 = function() {
      var G__10288__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args)], null);
      };
      var G__10288 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10289__i = 0, G__10289__a = new Array(arguments.length - 3);
          while (G__10289__i < G__10289__a.length) {
            G__10289__a[G__10289__i] = arguments[G__10289__i + 3];
            ++G__10289__i;
          }
          args = new cljs.core.IndexedSeq(G__10289__a, 0);
        }
        return G__10288__delegate.call(this, x, y, z, args);
      };
      G__10288.cljs$lang$maxFixedArity = 3;
      G__10288.cljs$lang$applyTo = function(arglist__10290) {
        var x = cljs.core.first(arglist__10290);
        arglist__10290 = cljs.core.next(arglist__10290);
        var y = cljs.core.first(arglist__10290);
        arglist__10290 = cljs.core.next(arglist__10290);
        var z = cljs.core.first(arglist__10290);
        var args = cljs.core.rest(arglist__10290);
        return G__10288__delegate(x, y, z, args);
      };
      G__10288.cljs$core$IFn$_invoke$arity$variadic = G__10288__delegate;
      return G__10288;
    }();
    G__10287 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10287__0.call(this);
        case 1:
          return G__10287__1.call(this, x);
        case 2:
          return G__10287__2.call(this, x, y);
        case 3:
          return G__10287__3.call(this, x, y, z);
        default:
          var G__10291 = null;
          if (arguments.length > 3) {
            var G__10292__i = 0, G__10292__a = new Array(arguments.length - 3);
            while (G__10292__i < G__10292__a.length) {
              G__10292__a[G__10292__i] = arguments[G__10292__i + 3];
              ++G__10292__i;
            }
            G__10291 = new cljs.core.IndexedSeq(G__10292__a, 0);
          }
          return G__10287__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10291);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10287.cljs$lang$maxFixedArity = 3;
    G__10287.cljs$lang$applyTo = G__10287__4.cljs$lang$applyTo;
    G__10287.cljs$core$IFn$_invoke$arity$0 = G__10287__0;
    G__10287.cljs$core$IFn$_invoke$arity$1 = G__10287__1;
    G__10287.cljs$core$IFn$_invoke$arity$2 = G__10287__2;
    G__10287.cljs$core$IFn$_invoke$arity$3 = G__10287__3;
    G__10287.cljs$core$IFn$_invoke$arity$variadic = G__10287__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10287;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = function(f, g) {
  return function() {
    var G__10293 = null;
    var G__10293__0 = function() {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)], null);
    };
    var G__10293__1 = function(x) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x)], null);
    };
    var G__10293__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y)], null);
    };
    var G__10293__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z)], null);
    };
    var G__10293__4 = function() {
      var G__10294__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args)], null);
      };
      var G__10294 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10295__i = 0, G__10295__a = new Array(arguments.length - 3);
          while (G__10295__i < G__10295__a.length) {
            G__10295__a[G__10295__i] = arguments[G__10295__i + 3];
            ++G__10295__i;
          }
          args = new cljs.core.IndexedSeq(G__10295__a, 0);
        }
        return G__10294__delegate.call(this, x, y, z, args);
      };
      G__10294.cljs$lang$maxFixedArity = 3;
      G__10294.cljs$lang$applyTo = function(arglist__10296) {
        var x = cljs.core.first(arglist__10296);
        arglist__10296 = cljs.core.next(arglist__10296);
        var y = cljs.core.first(arglist__10296);
        arglist__10296 = cljs.core.next(arglist__10296);
        var z = cljs.core.first(arglist__10296);
        var args = cljs.core.rest(arglist__10296);
        return G__10294__delegate(x, y, z, args);
      };
      G__10294.cljs$core$IFn$_invoke$arity$variadic = G__10294__delegate;
      return G__10294;
    }();
    G__10293 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10293__0.call(this);
        case 1:
          return G__10293__1.call(this, x);
        case 2:
          return G__10293__2.call(this, x, y);
        case 3:
          return G__10293__3.call(this, x, y, z);
        default:
          var G__10297 = null;
          if (arguments.length > 3) {
            var G__10298__i = 0, G__10298__a = new Array(arguments.length - 3);
            while (G__10298__i < G__10298__a.length) {
              G__10298__a[G__10298__i] = arguments[G__10298__i + 3];
              ++G__10298__i;
            }
            G__10297 = new cljs.core.IndexedSeq(G__10298__a, 0);
          }
          return G__10293__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10297);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10293.cljs$lang$maxFixedArity = 3;
    G__10293.cljs$lang$applyTo = G__10293__4.cljs$lang$applyTo;
    G__10293.cljs$core$IFn$_invoke$arity$0 = G__10293__0;
    G__10293.cljs$core$IFn$_invoke$arity$1 = G__10293__1;
    G__10293.cljs$core$IFn$_invoke$arity$2 = G__10293__2;
    G__10293.cljs$core$IFn$_invoke$arity$3 = G__10293__3;
    G__10293.cljs$core$IFn$_invoke$arity$variadic = G__10293__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10293;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = function(f, g, h) {
  return function() {
    var G__10299 = null;
    var G__10299__0 = function() {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null), g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null), h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null)], null);
    };
    var G__10299__1 = function(x) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x), g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null, x), h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null, x)], null);
    };
    var G__10299__2 = function(x, y) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x, y) : f.call(null, x, y), g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x, y) : g.call(null, x, y), h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x, y) : h.call(null, x, y)], null);
    };
    var G__10299__3 = function(x, y, z) {
      return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x, y, z) : f.call(null, x, y, z), g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x, y, z) : g.call(null, x, y, z), h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x, y, z) : h.call(null, x, y, z)], null);
    };
    var G__10299__4 = function() {
      var G__10300__delegate = function(x, y, z, args) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g, x, y, z, args), cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h, x, y, z, args)], null);
      };
      var G__10300 = function(x, y, z, var_args) {
        var args = null;
        if (arguments.length > 3) {
          var G__10301__i = 0, G__10301__a = new Array(arguments.length - 3);
          while (G__10301__i < G__10301__a.length) {
            G__10301__a[G__10301__i] = arguments[G__10301__i + 3];
            ++G__10301__i;
          }
          args = new cljs.core.IndexedSeq(G__10301__a, 0);
        }
        return G__10300__delegate.call(this, x, y, z, args);
      };
      G__10300.cljs$lang$maxFixedArity = 3;
      G__10300.cljs$lang$applyTo = function(arglist__10302) {
        var x = cljs.core.first(arglist__10302);
        arglist__10302 = cljs.core.next(arglist__10302);
        var y = cljs.core.first(arglist__10302);
        arglist__10302 = cljs.core.next(arglist__10302);
        var z = cljs.core.first(arglist__10302);
        var args = cljs.core.rest(arglist__10302);
        return G__10300__delegate(x, y, z, args);
      };
      G__10300.cljs$core$IFn$_invoke$arity$variadic = G__10300__delegate;
      return G__10300;
    }();
    G__10299 = function(x, y, z, var_args) {
      var args = var_args;
      switch(arguments.length) {
        case 0:
          return G__10299__0.call(this);
        case 1:
          return G__10299__1.call(this, x);
        case 2:
          return G__10299__2.call(this, x, y);
        case 3:
          return G__10299__3.call(this, x, y, z);
        default:
          var G__10303 = null;
          if (arguments.length > 3) {
            var G__10304__i = 0, G__10304__a = new Array(arguments.length - 3);
            while (G__10304__i < G__10304__a.length) {
              G__10304__a[G__10304__i] = arguments[G__10304__i + 3];
              ++G__10304__i;
            }
            G__10303 = new cljs.core.IndexedSeq(G__10304__a, 0);
          }
          return G__10299__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10303);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__10299.cljs$lang$maxFixedArity = 3;
    G__10299.cljs$lang$applyTo = G__10299__4.cljs$lang$applyTo;
    G__10299.cljs$core$IFn$_invoke$arity$0 = G__10299__0;
    G__10299.cljs$core$IFn$_invoke$arity$1 = G__10299__1;
    G__10299.cljs$core$IFn$_invoke$arity$2 = G__10299__2;
    G__10299.cljs$core$IFn$_invoke$arity$3 = G__10299__3;
    G__10299.cljs$core$IFn$_invoke$arity$variadic = G__10299__4.cljs$core$IFn$_invoke$arity$variadic;
    return G__10299;
  }();
};
cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = function(f, g, h, fs) {
  var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f, g, h, fs);
  return function(fs__$1) {
    return function() {
      var G__10305 = null;
      var G__10305__0 = function() {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10266_SHARP_, p2__10267_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10266_SHARP_, p2__10267_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__10267_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__10267_SHARP_.call(null));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10305__1 = function(x) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10268_SHARP_, p2__10269_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10268_SHARP_, p2__10269_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__10269_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__10269_SHARP_.call(null, x));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10305__2 = function(x, y) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10270_SHARP_, p2__10271_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10270_SHARP_, p2__10271_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__10271_SHARP_.cljs$core$IFn$_invoke$arity$2(x, y) : p2__10271_SHARP_.call(null, x, y));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10305__3 = function(x, y, z) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
          return function(p1__10272_SHARP_, p2__10273_SHARP_) {
            return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10272_SHARP_, p2__10273_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__10273_SHARP_.cljs$core$IFn$_invoke$arity$3(x, y, z) : p2__10273_SHARP_.call(null, x, y, z));
          };
        }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
      };
      var G__10305__4 = function() {
        var G__10306__delegate = function(x, y, z, args) {
          return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(fs__$1) {
            return function(p1__10274_SHARP_, p2__10275_SHARP_) {
              return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__10274_SHARP_, cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__10275_SHARP_, x, y, z, args));
            };
          }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
        };
        var G__10306 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            var G__10307__i = 0, G__10307__a = new Array(arguments.length - 3);
            while (G__10307__i < G__10307__a.length) {
              G__10307__a[G__10307__i] = arguments[G__10307__i + 3];
              ++G__10307__i;
            }
            args = new cljs.core.IndexedSeq(G__10307__a, 0);
          }
          return G__10306__delegate.call(this, x, y, z, args);
        };
        G__10306.cljs$lang$maxFixedArity = 3;
        G__10306.cljs$lang$applyTo = function(arglist__10308) {
          var x = cljs.core.first(arglist__10308);
          arglist__10308 = cljs.core.next(arglist__10308);
          var y = cljs.core.first(arglist__10308);
          arglist__10308 = cljs.core.next(arglist__10308);
          var z = cljs.core.first(arglist__10308);
          var args = cljs.core.rest(arglist__10308);
          return G__10306__delegate(x, y, z, args);
        };
        G__10306.cljs$core$IFn$_invoke$arity$variadic = G__10306__delegate;
        return G__10306;
      }();
      G__10305 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__10305__0.call(this);
          case 1:
            return G__10305__1.call(this, x);
          case 2:
            return G__10305__2.call(this, x, y);
          case 3:
            return G__10305__3.call(this, x, y, z);
          default:
            var G__10309 = null;
            if (arguments.length > 3) {
              var G__10310__i = 0, G__10310__a = new Array(arguments.length - 3);
              while (G__10310__i < G__10310__a.length) {
                G__10310__a[G__10310__i] = arguments[G__10310__i + 3];
                ++G__10310__i;
              }
              G__10309 = new cljs.core.IndexedSeq(G__10310__a, 0);
            }
            return G__10305__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, G__10309);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10305.cljs$lang$maxFixedArity = 3;
      G__10305.cljs$lang$applyTo = G__10305__4.cljs$lang$applyTo;
      G__10305.cljs$core$IFn$_invoke$arity$0 = G__10305__0;
      G__10305.cljs$core$IFn$_invoke$arity$1 = G__10305__1;
      G__10305.cljs$core$IFn$_invoke$arity$2 = G__10305__2;
      G__10305.cljs$core$IFn$_invoke$arity$3 = G__10305__3;
      G__10305.cljs$core$IFn$_invoke$arity$variadic = G__10305__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__10305;
    }();
  }(fs__$1);
};
cljs.core.juxt.cljs$lang$applyTo = function(seq10277) {
  var G__10278 = cljs.core.first(seq10277);
  var seq10277__$1 = cljs.core.next(seq10277);
  var G__10279 = cljs.core.first(seq10277__$1);
  var seq10277__$2 = cljs.core.next(seq10277__$1);
  var G__10280 = cljs.core.first(seq10277__$2);
  var seq10277__$3 = cljs.core.next(seq10277__$2);
  return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__10278, G__10279, G__10280, seq10277__$3);
};
cljs.core.juxt.cljs$lang$maxFixedArity = 3;
cljs.core.dorun = function cljs$core$dorun(var_args) {
  var args10311 = [];
  var len__5835__auto___10314 = arguments.length;
  var i__5836__auto___10315 = 0;
  while (true) {
    if (i__5836__auto___10315 < len__5835__auto___10314) {
      args10311.push(arguments[i__5836__auto___10315]);
      var G__10316 = i__5836__auto___10315 + 1;
      i__5836__auto___10315 = G__10316;
      continue;
    } else {
    }
    break;
  }
  var G__10313 = args10311.length;
  switch(G__10313) {
    case 1:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10311.length)].join(""));;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  while (true) {
    if (cljs.core.seq(coll)) {
      var G__10318 = cljs.core.next(coll);
      coll = G__10318;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  while (true) {
    if (cljs.core.seq(coll) && n > 0) {
      var G__10319 = n - 1;
      var G__10320 = cljs.core.next(coll);
      n = G__10319;
      coll = G__10320;
      continue;
    } else {
      return null;
    }
    break;
  }
};
cljs.core.dorun.cljs$lang$maxFixedArity = 2;
cljs.core.doall = function cljs$core$doall(var_args) {
  var args10321 = [];
  var len__5835__auto___10324 = arguments.length;
  var i__5836__auto___10325 = 0;
  while (true) {
    if (i__5836__auto___10325 < len__5835__auto___10324) {
      args10321.push(arguments[i__5836__auto___10325]);
      var G__10326 = i__5836__auto___10325 + 1;
      i__5836__auto___10325 = G__10326;
      continue;
    } else {
    }
    break;
  }
  var G__10323 = args10321.length;
  switch(G__10323) {
    case 1:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.doall.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10321.length)].join(""));;
  }
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);
  return coll;
};
cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = function(n, coll) {
  cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n, coll);
  return coll;
};
cljs.core.doall.cljs$lang$maxFixedArity = 2;
cljs.core.regexp_QMARK_ = function cljs$core$regexp_QMARK_(x) {
  return x instanceof RegExp;
};
cljs.core.re_matches = function cljs$core$re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches), s)) {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function cljs$core$re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count(matches) === 1) {
        return cljs.core.first(matches);
      } else {
        return cljs.core.vec(matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function cljs$core$re_seq(re, s) {
  var match_data = cljs.core.re_find(re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_(match_data) ? cljs.core.first(match_data) : match_data;
  var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, match_idx + cljs.core.count(match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons(match_data, cljs.core.seq(post_match) ? cljs$core$re_seq(re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function cljs$core$re_pattern(s) {
  if (s instanceof RegExp) {
    return s;
  } else {
    var vec__10329 = cljs.core.re_find(/^\(\?([idmsux]*)\)/, s);
    var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10329, 0, null);
    var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10329, 1, null);
    var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s, cljs.core.count(prefix));
    return new RegExp(pattern, function() {
      var or__4777__auto__ = flags;
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        return "";
      }
    }());
  }
};
cljs.core.pr_sequential_writer = function cljs$core$pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_10337 = cljs.core._STAR_print_level_STAR_;
  cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
  try {
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write(writer, "#");
    } else {
      cljs.core._write(writer, begin);
      if (cljs.core.cst$kw$print_DASH_length.cljs$core$IFn$_invoke$arity$1(opts) === 0) {
        if (cljs.core.seq(coll)) {
          cljs.core._write(writer, function() {
            var or__4777__auto__ = cljs.core.cst$kw$more_DASH_marker.cljs$core$IFn$_invoke$arity$1(opts);
            if (cljs.core.truth_(or__4777__auto__)) {
              return or__4777__auto__;
            } else {
              return "...";
            }
          }());
        } else {
        }
      } else {
        if (cljs.core.seq(coll)) {
          var G__10338_10344 = cljs.core.first(coll);
          var G__10339_10345 = writer;
          var G__10340_10346 = opts;
          print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10338_10344, G__10339_10345, G__10340_10346) : print_one.call(null, G__10338_10344, G__10339_10345, G__10340_10346);
        } else {
        }
        var coll_10347__$1 = cljs.core.next(coll);
        var n_10348 = cljs.core.cst$kw$print_DASH_length.cljs$core$IFn$_invoke$arity$1(opts) - 1;
        while (true) {
          if (coll_10347__$1 && (n_10348 == null || !(n_10348 === 0))) {
            cljs.core._write(writer, sep);
            var G__10341_10349 = cljs.core.first(coll_10347__$1);
            var G__10342_10350 = writer;
            var G__10343_10351 = opts;
            print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10341_10349, G__10342_10350, G__10343_10351) : print_one.call(null, G__10341_10349, G__10342_10350, G__10343_10351);
            var G__10352 = cljs.core.next(coll_10347__$1);
            var G__10353 = n_10348 - 1;
            coll_10347__$1 = G__10352;
            n_10348 = G__10353;
            continue;
          } else {
            if (cljs.core.seq(coll_10347__$1) && n_10348 === 0) {
              cljs.core._write(writer, sep);
              cljs.core._write(writer, function() {
                var or__4777__auto__ = cljs.core.cst$kw$more_DASH_marker.cljs$core$IFn$_invoke$arity$1(opts);
                if (cljs.core.truth_(or__4777__auto__)) {
                  return or__4777__auto__;
                } else {
                  return "...";
                }
              }());
            } else {
            }
          }
          break;
        }
      }
      return cljs.core._write(writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_10337;
  }
};
cljs.core.write_all = function cljs$core$write_all(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10360 = arguments.length;
  var i__5836__auto___10361 = 0;
  while (true) {
    if (i__5836__auto___10361 < len__5835__auto___10360) {
      args__5842__auto__.push(arguments[i__5836__auto___10361]);
      var G__10362 = i__5836__auto___10361 + 1;
      i__5836__auto___10361 = G__10362;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 1 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(1), 0) : null;
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5843__auto__);
};
cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = function(writer, ss) {
  var seq__10356 = cljs.core.seq(ss);
  var chunk__10357 = null;
  var count__10358 = 0;
  var i__10359 = 0;
  while (true) {
    if (i__10359 < count__10358) {
      var s = chunk__10357.cljs$core$IIndexed$_nth$arity$2(null, i__10359);
      cljs.core._write(writer, s);
      var G__10363 = seq__10356;
      var G__10364 = chunk__10357;
      var G__10365 = count__10358;
      var G__10366 = i__10359 + 1;
      seq__10356 = G__10363;
      chunk__10357 = G__10364;
      count__10358 = G__10365;
      i__10359 = G__10366;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10356);
      if (temp__4425__auto__) {
        var seq__10356__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10356__$1)) {
          var c__5580__auto__ = cljs.core.chunk_first(seq__10356__$1);
          var G__10367 = cljs.core.chunk_rest(seq__10356__$1);
          var G__10368 = c__5580__auto__;
          var G__10369 = cljs.core.count(c__5580__auto__);
          var G__10370 = 0;
          seq__10356 = G__10367;
          chunk__10357 = G__10368;
          count__10358 = G__10369;
          i__10359 = G__10370;
          continue;
        } else {
          var s = cljs.core.first(seq__10356__$1);
          cljs.core._write(writer, s);
          var G__10371 = cljs.core.next(seq__10356__$1);
          var G__10372 = null;
          var G__10373 = 0;
          var G__10374 = 0;
          seq__10356 = G__10371;
          chunk__10357 = G__10372;
          count__10358 = G__10373;
          i__10359 = G__10374;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.write_all.cljs$lang$maxFixedArity = 1;
cljs.core.write_all.cljs$lang$applyTo = function(seq10354) {
  var G__10355 = cljs.core.first(seq10354);
  var seq10354__$1 = cljs.core.next(seq10354);
  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__10355, seq10354__$1);
};
cljs.core.string_print = function cljs$core$string_print(x) {
  cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function cljs$core$flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj10376 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj10376;
}();
cljs.core.quote_string = function cljs$core$quote_string(s) {
  return [cljs.core.str('"'), cljs.core.str(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })), cljs.core.str('"')].join("");
};
cljs.core.print_map;
cljs.core.print_meta_QMARK_ = function cljs$core$print_meta_QMARK_(opts, obj) {
  var and__4765__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, cljs.core.cst$kw$meta));
  if (and__4765__auto__) {
    var and__4765__auto____$1 = !(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 131072 || obj.cljs$core$IMeta$ ? true : false : false;
    if (and__4765__auto____$1) {
      return !(cljs.core.meta(obj) == null);
    } else {
      return and__4765__auto____$1;
    }
  } else {
    return and__4765__auto__;
  }
};
cljs.core.pr_writer_impl = function cljs$core$pr_writer_impl(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write(writer, "nil");
  } else {
    if (cljs.core.print_meta_QMARK_(opts, obj)) {
      cljs.core._write(writer, "^");
      var G__10392_10401 = cljs.core.meta(obj);
      var G__10393_10402 = writer;
      var G__10394_10403 = opts;
      cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__10392_10401, G__10393_10402, G__10394_10403) : cljs.core.pr_writer.call(null, G__10392_10401, G__10393_10402, G__10394_10403);
      cljs.core._write(writer, " ");
    } else {
    }
    if (obj.cljs$lang$type) {
      return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
    } else {
      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
        return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null, writer, opts);
      } else {
        if (obj === true || obj === false || typeof obj === "number") {
          return cljs.core._write(writer, [cljs.core.str(obj)].join(""));
        } else {
          if (cljs.core.object_QMARK_(obj)) {
            cljs.core._write(writer, "#js ");
            var G__10396 = cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(k) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k), obj[k]], null);
            }, cljs.core.js_keys(obj));
            var G__10397 = cljs.core.pr_writer;
            var G__10398 = writer;
            var G__10399 = opts;
            return cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__10396, G__10397, G__10398, G__10399) : cljs.core.print_map.call(null, G__10396, G__10397, G__10398, G__10399);
          } else {
            if (cljs.core.array_QMARK_(obj)) {
              return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#js [", " ", "]", opts, obj);
            } else {
              if (goog.isString(obj)) {
                if (cljs.core.truth_(cljs.core.cst$kw$readably.cljs$core$IFn$_invoke$arity$1(opts))) {
                  return cljs.core._write(writer, cljs.core.quote_string(obj));
                } else {
                  return cljs.core._write(writer, obj);
                }
              } else {
                if (goog.isFunction(obj)) {
                  var name = obj.name;
                  var name__$1 = cljs.core.truth_(function() {
                    var or__4777__auto__ = name == null;
                    if (or__4777__auto__) {
                      return or__4777__auto__;
                    } else {
                      return goog.string.isEmpty(name);
                    }
                  }()) ? "Function" : name;
                  return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, ' "', [cljs.core.str(obj)].join(""), '"]'], 0));
                } else {
                  if (obj instanceof Date) {
                    var normalize = function(n, len) {
                      var ns = [cljs.core.str(n)].join("");
                      while (true) {
                        if (cljs.core.count(ns) < len) {
                          var G__10404 = [cljs.core.str("0"), cljs.core.str(ns)].join("");
                          ns = G__10404;
                          continue;
                        } else {
                          return ns;
                        }
                        break;
                      }
                    };
                    return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#inst "', [cljs.core.str(obj.getUTCFullYear())].join(""), "-", normalize(obj.getUTCMonth() + 1, 2), "-", normalize(obj.getUTCDate(), 2), "T", normalize(obj.getUTCHours(), 2), ":", normalize(obj.getUTCMinutes(), 2), ":", normalize(obj.getUTCSeconds(), 2), ".", normalize(obj.getUTCMilliseconds(), 3), "-", '00:00"'], 0));
                  } else {
                    if (cljs.core.regexp_QMARK_(obj)) {
                      return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(['#"', obj.source, '"'], 0));
                    } else {
                      if (!(obj == null) ? obj.cljs$lang$protocol_mask$partition0$ & 2147483648 || obj.cljs$core$IPrintWithWriter$ ? true : false : false) {
                        return cljs.core._pr_writer(obj, writer, opts);
                      } else {
                        if (cljs.core.truth_(obj.constructor.cljs$lang$ctorStr)) {
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", obj.constructor.cljs$lang$ctorStr.replace(new RegExp("/", "g"), "."), "]"], 0));
                        } else {
                          var name = obj.constructor.name;
                          var name__$1 = cljs.core.truth_(function() {
                            var or__4777__auto__ = name == null;
                            if (or__4777__auto__) {
                              return or__4777__auto__;
                            } else {
                              return goog.string.isEmpty(name);
                            }
                          }()) ? "Object" : name;
                          return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer, cljs.core.array_seq(["#object[", name__$1, " ", [cljs.core.str(obj)].join(""), "]"], 0));
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_writer = function cljs$core$pr_writer(obj, writer, opts) {
  var temp__4423__auto__ = cljs.core.cst$kw$alt_DASH_impl.cljs$core$IFn$_invoke$arity$1(opts);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var alt_impl = temp__4423__auto__;
    var G__10408 = obj;
    var G__10409 = writer;
    var G__10410 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts, cljs.core.cst$kw$fallback_DASH_impl, cljs.core.pr_writer_impl);
    return alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__10408, G__10409, G__10410) : alt_impl.call(null, G__10408, G__10409, G__10410);
  } else {
    return cljs.core.pr_writer_impl(obj, writer, opts);
  }
};
cljs.core.pr_seq_writer = function cljs$core$pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer(cljs.core.first(objs), writer, opts);
  var seq__10415 = cljs.core.seq(cljs.core.next(objs));
  var chunk__10416 = null;
  var count__10417 = 0;
  var i__10418 = 0;
  while (true) {
    if (i__10418 < count__10417) {
      var obj = chunk__10416.cljs$core$IIndexed$_nth$arity$2(null, i__10418);
      cljs.core._write(writer, " ");
      cljs.core.pr_writer(obj, writer, opts);
      var G__10419 = seq__10415;
      var G__10420 = chunk__10416;
      var G__10421 = count__10417;
      var G__10422 = i__10418 + 1;
      seq__10415 = G__10419;
      chunk__10416 = G__10420;
      count__10417 = G__10421;
      i__10418 = G__10422;
      continue;
    } else {
      var temp__4425__auto__ = cljs.core.seq(seq__10415);
      if (temp__4425__auto__) {
        var seq__10415__$1 = temp__4425__auto__;
        if (cljs.core.chunked_seq_QMARK_(seq__10415__$1)) {
          var c__5580__auto__ = cljs.core.chunk_first(seq__10415__$1);
          var G__10423 = cljs.core.chunk_rest(seq__10415__$1);
          var G__10424 = c__5580__auto__;
          var G__10425 = cljs.core.count(c__5580__auto__);
          var G__10426 = 0;
          seq__10415 = G__10423;
          chunk__10416 = G__10424;
          count__10417 = G__10425;
          i__10418 = G__10426;
          continue;
        } else {
          var obj = cljs.core.first(seq__10415__$1);
          cljs.core._write(writer, " ");
          cljs.core.pr_writer(obj, writer, opts);
          var G__10427 = cljs.core.next(seq__10415__$1);
          var G__10428 = null;
          var G__10429 = 0;
          var G__10430 = 0;
          seq__10415 = G__10427;
          chunk__10416 = G__10428;
          count__10417 = G__10429;
          i__10418 = G__10430;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function cljs$core$pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer(objs, writer, opts);
  writer.cljs$core$IWriter$_flush$arity$1(null);
  return sb;
};
cljs.core.pr_str_with_opts = function cljs$core$pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "";
  } else {
    return [cljs.core.str(cljs.core.pr_sb_with_opts(objs, opts))].join("");
  }
};
cljs.core.prn_str_with_opts = function cljs$core$prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_(objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts(objs, opts);
    sb.append("\n");
    return [cljs.core.str(sb)].join("");
  }
};
cljs.core.pr_with_opts = function cljs$core$pr_with_opts(objs, opts) {
  return cljs.core.string_print(cljs.core.pr_str_with_opts(objs, opts));
};
cljs.core.newline = function cljs$core$newline(var_args) {
  var args10431 = [];
  var len__5835__auto___10434 = arguments.length;
  var i__5836__auto___10435 = 0;
  while (true) {
    if (i__5836__auto___10435 < len__5835__auto___10434) {
      args10431.push(arguments[i__5836__auto___10435]);
      var G__10436 = i__5836__auto___10435 + 1;
      i__5836__auto___10435 = G__10436;
      continue;
    } else {
    }
    break;
  }
  var G__10433 = args10431.length;
  switch(G__10433) {
    case 0:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10431.length)].join(""));;
  }
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
};
cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = function(opts) {
  cljs.core.string_print("\n");
  if (cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts, cljs.core.cst$kw$flush_DASH_on_DASH_newline))) {
    return cljs.core.flush();
  } else {
    return null;
  }
};
cljs.core.newline.cljs$lang$maxFixedArity = 1;
cljs.core.pr_str = function cljs$core$pr_str(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10439 = arguments.length;
  var i__5836__auto___10440 = 0;
  while (true) {
    if (i__5836__auto___10440 < len__5835__auto___10439) {
      args__5842__auto__.push(arguments[i__5836__auto___10440]);
      var G__10441 = i__5836__auto___10440 + 1;
      i__5836__auto___10440 = G__10441;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr_str.cljs$lang$maxFixedArity = 0;
cljs.core.pr_str.cljs$lang$applyTo = function(seq10438) {
  return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10438));
};
cljs.core.prn_str = function cljs$core$prn_str(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10443 = arguments.length;
  var i__5836__auto___10444 = 0;
  while (true) {
    if (i__5836__auto___10444 < len__5835__auto___10443) {
      args__5842__auto__.push(arguments[i__5836__auto___10444]);
      var G__10445 = i__5836__auto___10444 + 1;
      i__5836__auto___10444 = G__10445;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.prn_str.cljs$lang$maxFixedArity = 0;
cljs.core.prn_str.cljs$lang$applyTo = function(seq10442) {
  return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10442));
};
cljs.core.pr = function cljs$core$pr(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10447 = arguments.length;
  var i__5836__auto___10448 = 0;
  while (true) {
    if (i__5836__auto___10448 < len__5835__auto___10447) {
      args__5842__auto__.push(arguments[i__5836__auto___10448]);
      var G__10449 = i__5836__auto___10448 + 1;
      i__5836__auto___10448 = G__10449;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
};
cljs.core.pr.cljs$lang$maxFixedArity = 0;
cljs.core.pr.cljs$lang$applyTo = function(seq10446) {
  return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10446));
};
cljs.core.print = function() {
  var cljs$core$cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), cljs.core.cst$kw$readably, false));
  };
  var cljs$core$cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      var G__10450__i = 0, G__10450__a = new Array(arguments.length - 0);
      while (G__10450__i < G__10450__a.length) {
        G__10450__a[G__10450__i] = arguments[G__10450__i + 0];
        ++G__10450__i;
      }
      objs = new cljs.core.IndexedSeq(G__10450__a, 0);
    }
    return cljs$core$cljs_core_print__delegate.call(this, objs);
  };
  cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs$core$cljs_core_print.cljs$lang$applyTo = function(arglist__10451) {
    var objs = cljs.core.seq(arglist__10451);
    return cljs$core$cljs_core_print__delegate(objs);
  };
  cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
  return cljs$core$cljs_core_print;
}();
cljs.core.print_str = function cljs$core$print_str(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10453 = arguments.length;
  var i__5836__auto___10454 = 0;
  while (true) {
    if (i__5836__auto___10454 < len__5835__auto___10453) {
      args__5842__auto__.push(arguments[i__5836__auto___10454]);
      var G__10455 = i__5836__auto___10454 + 1;
      i__5836__auto___10454 = G__10455;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.pr_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), cljs.core.cst$kw$readably, false));
};
cljs.core.print_str.cljs$lang$maxFixedArity = 0;
cljs.core.print_str.cljs$lang$applyTo = function(seq10452) {
  return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10452));
};
cljs.core.println = function cljs$core$println(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10457 = arguments.length;
  var i__5836__auto___10458 = 0;
  while (true) {
    if (i__5836__auto___10458 < len__5835__auto___10457) {
      args__5842__auto__.push(arguments[i__5836__auto___10458]);
      var G__10459 = i__5836__auto___10458 + 1;
      i__5836__auto___10458 = G__10459;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), cljs.core.cst$kw$readably, false));
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.println.cljs$lang$maxFixedArity = 0;
cljs.core.println.cljs$lang$applyTo = function(seq10456) {
  return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10456));
};
cljs.core.println_str = function cljs$core$println_str(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10461 = arguments.length;
  var i__5836__auto___10462 = 0;
  while (true) {
    if (i__5836__auto___10462 < len__5835__auto___10461) {
      args__5842__auto__.push(arguments[i__5836__auto___10462]);
      var G__10463 = i__5836__auto___10462 + 1;
      i__5836__auto___10462 = G__10463;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  return cljs.core.prn_str_with_opts(objs, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(), cljs.core.cst$kw$readably, false));
};
cljs.core.println_str.cljs$lang$maxFixedArity = 0;
cljs.core.println_str.cljs$lang$applyTo = function(seq10460) {
  return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10460));
};
cljs.core.prn = function cljs$core$prn(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10465 = arguments.length;
  var i__5836__auto___10466 = 0;
  while (true) {
    if (i__5836__auto___10466 < len__5835__auto___10465) {
      args__5842__auto__.push(arguments[i__5836__auto___10466]);
      var G__10467 = i__5836__auto___10466 + 1;
      i__5836__auto___10466 = G__10467;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = function(objs) {
  cljs.core.pr_with_opts(objs, cljs.core.pr_opts());
  if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
    return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
  } else {
    return null;
  }
};
cljs.core.prn.cljs$lang$maxFixedArity = 0;
cljs.core.prn.cljs$lang$applyTo = function(seq10464) {
  return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10464));
};
cljs.core.print_map = function cljs$core$print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer(writer, function(e, w, opts__$1) {
    var G__10474_10480 = cljs.core.key(e);
    var G__10475_10481 = w;
    var G__10476_10482 = opts__$1;
    print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10474_10480, G__10475_10481, G__10476_10482) : print_one.call(null, G__10474_10480, G__10475_10481, G__10476_10482);
    cljs.core._write(w, " ");
    var G__10477 = cljs.core.val(e);
    var G__10478 = w;
    var G__10479 = opts__$1;
    return print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__10477, G__10478, G__10479) : print_one.call(null, G__10477, G__10478, G__10479);
  }, "{", ", ", "}", opts, cljs.core.seq(m));
};
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Volatile ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$val, a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#'");
  return cljs.core.pr_writer(a__$1.sym, writer, opts);
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write(writer, "#object [cljs.core.Atom ");
  cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$val, a__$1.state], null), writer, opts);
  return cljs.core._write(writer, "]");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write(writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq(coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map(coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Symbol) {
    return cljs.core.compare_symbols(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (y instanceof cljs.core.Keyword) {
    return cljs.core.compare_keywords(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  if (cljs.core.vector_QMARK_(y)) {
    return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1, y);
  } else {
    throw new Error([cljs.core.str("Cannot compare "), cljs.core.str(x__$1), cljs.core.str(" to "), cljs.core.str(y)].join(""));
  }
};
cljs.core.alter_meta_BANG_ = function cljs$core$alter_meta_BANG_(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10486 = arguments.length;
  var i__5836__auto___10487 = 0;
  while (true) {
    if (i__5836__auto___10487 < len__5835__auto___10486) {
      args__5842__auto__.push(arguments[i__5836__auto___10487]);
      var G__10488 = i__5836__auto___10487 + 1;
      i__5836__auto___10487 = G__10488;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 2 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(2), 0) : null;
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], argseq__5843__auto__);
};
cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(iref, f, args) {
  return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f, iref.meta, args);
};
cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
cljs.core.alter_meta_BANG_.cljs$lang$applyTo = function(seq10483) {
  var G__10484 = cljs.core.first(seq10483);
  var seq10483__$1 = cljs.core.next(seq10483);
  var G__10485 = cljs.core.first(seq10483__$1);
  var seq10483__$2 = cljs.core.next(seq10483__$1);
  return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10484, G__10485, seq10483__$2);
};
cljs.core.reset_meta_BANG_ = function cljs$core$reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function cljs$core$add_watch(iref, key, f) {
  cljs.core._add_watch(iref, key, f);
  return iref;
};
cljs.core.remove_watch = function cljs$core$remove_watch(iref, key) {
  cljs.core._remove_watch(iref, key);
  return iref;
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function cljs$core$gensym(var_args) {
  var args10489 = [];
  var len__5835__auto___10492 = arguments.length;
  var i__5836__auto___10493 = 0;
  while (true) {
    if (i__5836__auto___10493 < len__5835__auto___10492) {
      args10489.push(arguments[i__5836__auto___10493]);
      var G__10494 = i__5836__auto___10493 + 1;
      i__5836__auto___10493 = G__10494;
      continue;
    } else {
    }
    break;
  }
  var G__10491 = args10489.length;
  switch(G__10491) {
    case 0:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10489.length)].join(""));;
  }
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
};
cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = function(prefix_string) {
  if (cljs.core.gensym_counter == null) {
    cljs.core.gensym_counter = cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(0) : cljs.core.atom.call(null, 0);
  } else {
  }
  return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(prefix_string), cljs.core.str(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter, cljs.core.inc))].join(""));
};
cljs.core.gensym.cljs$lang$maxFixedArity = 1;
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
  this.cljs$lang$protocol_mask$partition1$ = 1;
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not(self__.f);
};
cljs.core.Delay.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null)), cljs.core.with_meta(cljs.core.cst$sym$value, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Delay");
};
cljs.core.__GT_Delay = function cljs$core$__GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function cljs$core$delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function cljs$core$force(x) {
  if (cljs.core.delay_QMARK_(x)) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function cljs$core$realized_QMARK_(d) {
  return cljs.core._realized_QMARK_(d);
};
cljs.core.preserving_reduced = function cljs$core$preserving_reduced(rf) {
  return function(p1__10496_SHARP_, p2__10497_SHARP_) {
    var ret = rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__10496_SHARP_, p2__10497_SHARP_) : rf.call(null, p1__10496_SHARP_, p2__10497_SHARP_);
    if (cljs.core.reduced_QMARK_(ret)) {
      return cljs.core.reduced(ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cljs$core$cat(rf) {
  var rf1 = cljs.core.preserving_reduced(rf);
  return function(rf1) {
    return function() {
      var G__10498 = null;
      var G__10498__0 = function() {
        return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
      };
      var G__10498__1 = function(result) {
        return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
      };
      var G__10498__2 = function(result, input) {
        return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1, result, input);
      };
      G__10498 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__10498__0.call(this);
          case 1:
            return G__10498__1.call(this, result);
          case 2:
            return G__10498__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__10498.cljs$core$IFn$_invoke$arity$0 = G__10498__0;
      G__10498.cljs$core$IFn$_invoke$arity$1 = G__10498__1;
      G__10498.cljs$core$IFn$_invoke$arity$2 = G__10498__2;
      return G__10498;
    }();
  }(rf1);
};
cljs.core.dedupe = function cljs$core$dedupe(var_args) {
  var args10499 = [];
  var len__5835__auto___10502 = arguments.length;
  var i__5836__auto___10503 = 0;
  while (true) {
    if (i__5836__auto___10503 < len__5835__auto___10502) {
      args10499.push(arguments[i__5836__auto___10503]);
      var G__10504 = i__5836__auto___10503 + 1;
      i__5836__auto___10503 = G__10504;
      continue;
    } else {
    }
    break;
  }
  var G__10501 = args10499.length;
  switch(G__10501) {
    case 0:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10499.length)].join(""));;
  }
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = function() {
  return function(rf) {
    var pa = cljs.core.volatile_BANG_(cljs.core.cst$kw$cljs$core_SLASH_none);
    return function(pa) {
      return function() {
        var G__10506 = null;
        var G__10506__0 = function() {
          return rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null);
        };
        var G__10506__1 = function(result) {
          return rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null, result);
        };
        var G__10506__2 = function(result, input) {
          var prior = cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null, pa);
          cljs.core.vreset_BANG_(pa, input);
          if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior, input)) {
            return result;
          } else {
            return rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result, input) : rf.call(null, result, input);
          }
        };
        G__10506 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__10506__0.call(this);
            case 1:
              return G__10506__1.call(this, result);
            case 2:
              return G__10506__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__10506.cljs$core$IFn$_invoke$arity$0 = G__10506__0;
        G__10506.cljs$core$IFn$_invoke$arity$1 = G__10506__1;
        G__10506.cljs$core$IFn$_invoke$arity$2 = G__10506__2;
        return G__10506;
      }();
    }(pa);
  };
};
cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(), coll);
};
cljs.core.dedupe.cljs$lang$maxFixedArity = 1;
cljs.core.rand;
cljs.core.random_sample = function cljs$core$random_sample(var_args) {
  var args10507 = [];
  var len__5835__auto___10510 = arguments.length;
  var i__5836__auto___10511 = 0;
  while (true) {
    if (i__5836__auto___10511 < len__5835__auto___10510) {
      args10507.push(arguments[i__5836__auto___10511]);
      var G__10512 = i__5836__auto___10511 + 1;
      i__5836__auto___10511 = G__10512;
      continue;
    } else {
    }
    break;
  }
  var G__10509 = args10507.length;
  switch(G__10509) {
    case 1:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10507.length)].join(""));;
  }
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = function(prob) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  });
};
cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = function(prob, coll) {
  return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(function(_) {
    return (cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob;
  }, coll);
};
cljs.core.random_sample.cljs$lang$maxFixedArity = 2;
cljs.core.Eduction = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform, self__.coll));
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = function(_, f) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform, cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f), init, self__.coll);
};
cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer(writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Eduction.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform, cljs.core.cst$sym$coll], null);
};
cljs.core.Eduction.cljs$lang$type = true;
cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";
cljs.core.Eduction.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Eduction");
};
cljs.core.__GT_Eduction = function cljs$core$__GT_Eduction(xform, coll) {
  return new cljs.core.Eduction(xform, coll);
};
cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = function() {
  var this__5771__auto__ = this;
  return cljs.core.es6_iterator(this__5771__auto__);
};
cljs.core.eduction = function cljs$core$eduction(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10515 = arguments.length;
  var i__5836__auto___10516 = 0;
  while (true) {
    if (i__5836__auto___10516 < len__5835__auto___10515) {
      args__5842__auto__.push(arguments[i__5836__auto___10516]);
      var G__10517 = i__5836__auto___10516 + 1;
      i__5836__auto___10516 = G__10517;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = function(xforms) {
  return new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp, cljs.core.butlast(xforms)), cljs.core.last(xforms));
};
cljs.core.eduction.cljs$lang$maxFixedArity = 0;
cljs.core.eduction.cljs$lang$applyTo = function(seq10514) {
  return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq10514));
};
cljs.core.run_BANG_ = function cljs$core$run_BANG_(proc, coll) {
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10519_SHARP_, p2__10518_SHARP_) {
    return proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__10518_SHARP_) : proc.call(null, p2__10518_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
};
cljs.core._clj__GT_js = function cljs$core$_clj__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__5432__auto__ = x == null ? null : x;
    var m__5433__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5433__auto__.call(null, x);
    } else {
      var m__5433__auto____$1 = cljs.core._clj__GT_js["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5433__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-clj-\x3ejs", x);
      }
    }
  }
};
cljs.core._key__GT_js = function cljs$core$_key__GT_js(x) {
  if (!(x == null) && !(x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__5432__auto__ = x == null ? null : x;
    var m__5433__auto__ = cljs.core._key__GT_js[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5433__auto__.call(null, x);
    } else {
      var m__5433__auto____$1 = cljs.core._key__GT_js["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5433__auto____$1.call(null, x);
      } else {
        throw cljs.core.missing_protocol("IEncodeJS.-key-\x3ejs", x);
      }
    }
  }
};
cljs.core.clj__GT_js;
cljs.core.key__GT_js = function cljs$core$key__GT_js(k) {
  if (!(k == null) ? false || k.cljs$core$IEncodeJS$ ? true : !k.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, k)) {
    return cljs.core._clj__GT_js(k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
    }
  }
};
cljs.core.clj__GT_js = function cljs$core$clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (!(x == null) ? false || x.cljs$core$IEncodeJS$ ? true : !x.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS, x)) {
      return cljs.core._clj__GT_js(x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name(x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return [cljs.core.str(x)].join("");
        } else {
          if (cljs.core.map_QMARK_(x)) {
            var m = {};
            var seq__10538_10548 = cljs.core.seq(x);
            var chunk__10539_10549 = null;
            var count__10540_10550 = 0;
            var i__10541_10551 = 0;
            while (true) {
              if (i__10541_10551 < count__10540_10550) {
                var vec__10542_10552 = chunk__10539_10549.cljs$core$IIndexed$_nth$arity$2(null, i__10541_10551);
                var k_10553 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10542_10552, 0, null);
                var v_10554 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10542_10552, 1, null);
                m[cljs.core.key__GT_js(k_10553)] = cljs$core$clj__GT_js(v_10554);
                var G__10555 = seq__10538_10548;
                var G__10556 = chunk__10539_10549;
                var G__10557 = count__10540_10550;
                var G__10558 = i__10541_10551 + 1;
                seq__10538_10548 = G__10555;
                chunk__10539_10549 = G__10556;
                count__10540_10550 = G__10557;
                i__10541_10551 = G__10558;
                continue;
              } else {
                var temp__4425__auto___10559 = cljs.core.seq(seq__10538_10548);
                if (temp__4425__auto___10559) {
                  var seq__10538_10560__$1 = temp__4425__auto___10559;
                  if (cljs.core.chunked_seq_QMARK_(seq__10538_10560__$1)) {
                    var c__5580__auto___10561 = cljs.core.chunk_first(seq__10538_10560__$1);
                    var G__10562 = cljs.core.chunk_rest(seq__10538_10560__$1);
                    var G__10563 = c__5580__auto___10561;
                    var G__10564 = cljs.core.count(c__5580__auto___10561);
                    var G__10565 = 0;
                    seq__10538_10548 = G__10562;
                    chunk__10539_10549 = G__10563;
                    count__10540_10550 = G__10564;
                    i__10541_10551 = G__10565;
                    continue;
                  } else {
                    var vec__10543_10566 = cljs.core.first(seq__10538_10560__$1);
                    var k_10567 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10543_10566, 0, null);
                    var v_10568 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10543_10566, 1, null);
                    m[cljs.core.key__GT_js(k_10567)] = cljs$core$clj__GT_js(v_10568);
                    var G__10569 = cljs.core.next(seq__10538_10560__$1);
                    var G__10570 = null;
                    var G__10571 = 0;
                    var G__10572 = 0;
                    seq__10538_10548 = G__10569;
                    chunk__10539_10549 = G__10570;
                    count__10540_10550 = G__10571;
                    i__10541_10551 = G__10572;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_(x)) {
              var arr = [];
              var seq__10544_10573 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$clj__GT_js, x));
              var chunk__10545_10574 = null;
              var count__10546_10575 = 0;
              var i__10547_10576 = 0;
              while (true) {
                if (i__10547_10576 < count__10546_10575) {
                  var x_10577__$1 = chunk__10545_10574.cljs$core$IIndexed$_nth$arity$2(null, i__10547_10576);
                  arr.push(x_10577__$1);
                  var G__10578 = seq__10544_10573;
                  var G__10579 = chunk__10545_10574;
                  var G__10580 = count__10546_10575;
                  var G__10581 = i__10547_10576 + 1;
                  seq__10544_10573 = G__10578;
                  chunk__10545_10574 = G__10579;
                  count__10546_10575 = G__10580;
                  i__10547_10576 = G__10581;
                  continue;
                } else {
                  var temp__4425__auto___10582 = cljs.core.seq(seq__10544_10573);
                  if (temp__4425__auto___10582) {
                    var seq__10544_10583__$1 = temp__4425__auto___10582;
                    if (cljs.core.chunked_seq_QMARK_(seq__10544_10583__$1)) {
                      var c__5580__auto___10584 = cljs.core.chunk_first(seq__10544_10583__$1);
                      var G__10585 = cljs.core.chunk_rest(seq__10544_10583__$1);
                      var G__10586 = c__5580__auto___10584;
                      var G__10587 = cljs.core.count(c__5580__auto___10584);
                      var G__10588 = 0;
                      seq__10544_10573 = G__10585;
                      chunk__10545_10574 = G__10586;
                      count__10546_10575 = G__10587;
                      i__10547_10576 = G__10588;
                      continue;
                    } else {
                      var x_10589__$1 = cljs.core.first(seq__10544_10583__$1);
                      arr.push(x_10589__$1);
                      var G__10590 = cljs.core.next(seq__10544_10583__$1);
                      var G__10591 = null;
                      var G__10592 = 0;
                      var G__10593 = 0;
                      seq__10544_10573 = G__10590;
                      chunk__10545_10574 = G__10591;
                      count__10546_10575 = G__10592;
                      i__10547_10576 = G__10593;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
};
cljs.core._js__GT_clj = function cljs$core$_js__GT_clj(x, options) {
  if (!(x == null) && !(x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__5432__auto__ = x == null ? null : x;
    var m__5433__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(x, options) : m__5433__auto__.call(null, x, options);
    } else {
      var m__5433__auto____$1 = cljs.core._js__GT_clj["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(x, options) : m__5433__auto____$1.call(null, x, options);
      } else {
        throw cljs.core.missing_protocol("IEncodeClojure.-js-\x3eclj", x);
      }
    }
  }
};
cljs.core.js__GT_clj = function cljs$core$js__GT_clj(var_args) {
  var args10594 = [];
  var len__5835__auto___10619 = arguments.length;
  var i__5836__auto___10620 = 0;
  while (true) {
    if (i__5836__auto___10620 < len__5835__auto___10619) {
      args10594.push(arguments[i__5836__auto___10620]);
      var G__10621 = i__5836__auto___10620 + 1;
      i__5836__auto___10620 = G__10621;
      continue;
    } else {
    }
    break;
  }
  var G__10598 = args10594.length;
  switch(G__10598) {
    case 1:
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args10594.slice(1), 0);
      return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5854__auto__);
  }
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = function(x) {
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq([new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$keywordize_DASH_keys, false], null)], 0));
};
cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = function(x, opts) {
  var map__10599 = opts;
  var map__10599__$1 = (!(map__10599 == null) ? map__10599.cljs$lang$protocol_mask$partition0$ & 64 || map__10599.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map, map__10599) : map__10599;
  var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__10599__$1, cljs.core.cst$kw$keywordize_DASH_keys);
  var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
  var f = function(map__10599, map__10599__$1, keywordize_keys, keyfn) {
    return function cljs$core$thisfn(x__$1) {
      if (!(x__$1 == null) ? false || x__$1.cljs$core$IEncodeClojure$ ? true : !x__$1.cljs$lang$protocol_mask$partition$ ? cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1) : false : cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure, x__$1)) {
        return cljs.core._js__GT_clj(x__$1, cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq_QMARK_(x__$1)) {
          return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
        } else {
          if (cljs.core.coll_QMARK_(x__$1)) {
            return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1), cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
          } else {
            if (cljs.core.array_QMARK_(x__$1)) {
              return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn, x__$1));
            } else {
              if (cljs.core.type(x__$1) === Object) {
                return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY, function() {
                  var iter__5549__auto__ = function(map__10599, map__10599__$1, keywordize_keys, keyfn) {
                    return function cljs$core$thisfn_$_iter__10613(s__10614) {
                      return new cljs.core.LazySeq(null, function(map__10599, map__10599__$1, keywordize_keys, keyfn) {
                        return function() {
                          var s__10614__$1 = s__10614;
                          while (true) {
                            var temp__4425__auto__ = cljs.core.seq(s__10614__$1);
                            if (temp__4425__auto__) {
                              var s__10614__$2 = temp__4425__auto__;
                              if (cljs.core.chunked_seq_QMARK_(s__10614__$2)) {
                                var c__5547__auto__ = cljs.core.chunk_first(s__10614__$2);
                                var size__5548__auto__ = cljs.core.count(c__5547__auto__);
                                var b__10616 = cljs.core.chunk_buffer(size__5548__auto__);
                                if (function() {
                                  var i__10615 = 0;
                                  while (true) {
                                    if (i__10615 < size__5548__auto__) {
                                      var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__5547__auto__, i__10615);
                                      cljs.core.chunk_append(b__10616, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null));
                                      var G__10623 = i__10615 + 1;
                                      i__10615 = G__10623;
                                      continue;
                                    } else {
                                      return true;
                                    }
                                    break;
                                  }
                                }()) {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__10616), cljs$core$thisfn_$_iter__10613(cljs.core.chunk_rest(s__10614__$2)));
                                } else {
                                  return cljs.core.chunk_cons(cljs.core.chunk(b__10616), null);
                                }
                              } else {
                                var k = cljs.core.first(s__10614__$2);
                                return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null, k), cljs$core$thisfn(x__$1[k])], null), cljs$core$thisfn_$_iter__10613(cljs.core.rest(s__10614__$2)));
                              }
                            } else {
                              return null;
                            }
                            break;
                          }
                        };
                      }(map__10599, map__10599__$1, keywordize_keys, keyfn), null, null);
                    };
                  }(map__10599, map__10599__$1, keywordize_keys, keyfn);
                  return iter__5549__auto__(cljs.core.js_keys(x__$1));
                }());
              } else {
                return x__$1;
              }
            }
          }
        }
      }
    };
  }(map__10599, map__10599__$1, keywordize_keys, keyfn);
  return f(x);
};
cljs.core.js__GT_clj.cljs$lang$applyTo = function(seq10595) {
  var G__10596 = cljs.core.first(seq10595);
  var seq10595__$1 = cljs.core.next(seq10595);
  return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__10596, seq10595__$1);
};
cljs.core.js__GT_clj.cljs$lang$maxFixedArity = 1;
cljs.core.memoize = function cljs$core$memoize(f) {
  var mem = function() {
    var G__10625 = cljs.core.PersistentArrayMap.EMPTY;
    return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10625) : cljs.core.atom.call(null, G__10625);
  }();
  return function(mem) {
    return function() {
      var G__10626__delegate = function(args) {
        var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
          cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__10626 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          var G__10627__i = 0, G__10627__a = new Array(arguments.length - 0);
          while (G__10627__i < G__10627__a.length) {
            G__10627__a[G__10627__i] = arguments[G__10627__i + 0];
            ++G__10627__i;
          }
          args = new cljs.core.IndexedSeq(G__10627__a, 0);
        }
        return G__10626__delegate.call(this, args);
      };
      G__10626.cljs$lang$maxFixedArity = 0;
      G__10626.cljs$lang$applyTo = function(arglist__10628) {
        var args = cljs.core.seq(arglist__10628);
        return G__10626__delegate(args);
      };
      G__10626.cljs$core$IFn$_invoke$arity$variadic = G__10626__delegate;
      return G__10626;
    }();
  }(mem);
};
cljs.core.trampoline = function cljs$core$trampoline(var_args) {
  var args10629 = [];
  var len__5835__auto___10634 = arguments.length;
  var i__5836__auto___10635 = 0;
  while (true) {
    if (i__5836__auto___10635 < len__5835__auto___10634) {
      args10629.push(arguments[i__5836__auto___10635]);
      var G__10636 = i__5836__auto___10635 + 1;
      i__5836__auto___10635 = G__10636;
      continue;
    } else {
    }
    break;
  }
  var G__10633 = args10629.length;
  switch(G__10633) {
    case 1:
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      var argseq__5854__auto__ = new cljs.core.IndexedSeq(args10629.slice(1), 0);
      return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5854__auto__);
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = function(f) {
  while (true) {
    var ret = f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    if (cljs.core.fn_QMARK_(ret)) {
      var G__10638 = ret;
      f = G__10638;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1(function() {
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f, args);
  });
};
cljs.core.trampoline.cljs$lang$applyTo = function(seq10630) {
  var G__10631 = cljs.core.first(seq10630);
  var seq10630__$1 = cljs.core.next(seq10630);
  return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__10631, seq10630__$1);
};
cljs.core.trampoline.cljs$lang$maxFixedArity = 1;
cljs.core.rand = function cljs$core$rand(var_args) {
  var args10639 = [];
  var len__5835__auto___10642 = arguments.length;
  var i__5836__auto___10643 = 0;
  while (true) {
    if (i__5836__auto___10643 < len__5835__auto___10642) {
      args10639.push(arguments[i__5836__auto___10643]);
      var G__10644 = i__5836__auto___10643 + 1;
      i__5836__auto___10643 = G__10644;
      continue;
    } else {
    }
    break;
  }
  var G__10641 = args10639.length;
  switch(G__10641) {
    case 0:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();
      break;
    case 1:
      return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10639.length)].join(""));;
  }
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = function() {
  return cljs.core.rand.cljs$core$IFn$_invoke$arity$1(1);
};
cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = function(n) {
  return Math.random() * n;
};
cljs.core.rand.cljs$lang$maxFixedArity = 1;
cljs.core.rand_int = function cljs$core$rand_int(n) {
  var G__10647 = Math.random() * n;
  return Math.floor(G__10647);
};
cljs.core.rand_nth = function cljs$core$rand_nth(coll) {
  return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll, cljs.core.rand_int(cljs.core.count(coll)));
};
cljs.core.group_by = function cljs$core$group_by(f, coll) {
  return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(ret, x) {
    var k = f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null, x);
    return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function cljs$core$make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$parents, cljs.core.PersistentArrayMap.EMPTY, cljs.core.cst$kw$descendants, cljs.core.PersistentArrayMap.EMPTY, cljs.core.cst$kw$ancestors, cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function cljs$core$get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = function() {
      var G__10649 = cljs.core.make_hierarchy();
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10649) : cljs.core.atom.call(null, G__10649);
    }();
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function cljs$core$swap_global_hierarchy_BANG_(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___10652 = arguments.length;
  var i__5836__auto___10653 = 0;
  while (true) {
    if (i__5836__auto___10653 < len__5835__auto___10652) {
      args__5842__auto__.push(arguments[i__5836__auto___10653]);
      var G__10654 = i__5836__auto___10653 + 1;
      i__5836__auto___10653 = G__10654;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 1 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(1), 0) : null;
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5843__auto__);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = function(f, args) {
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_, cljs.core.get_global_hierarchy(), f, args);
};
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(seq10650) {
  var G__10651 = cljs.core.first(seq10650);
  var seq10650__$1 = cljs.core.next(seq10650);
  return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__10651, seq10650__$1);
};
cljs.core.isa_QMARK_ = function cljs$core$isa_QMARK_(var_args) {
  var args10655 = [];
  var len__5835__auto___10659 = arguments.length;
  var i__5836__auto___10660 = 0;
  while (true) {
    if (i__5836__auto___10660 < len__5835__auto___10659) {
      args10655.push(arguments[i__5836__auto___10660]);
      var G__10661 = i__5836__auto___10660 + 1;
      i__5836__auto___10660 = G__10661;
      continue;
    } else {
    }
    break;
  }
  var G__10657 = args10655.length;
  switch(G__10657) {
    case 2:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10655.length)].join(""));;
  }
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = function(child, parent) {
  return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(function() {
    var G__10658 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10658) : cljs.core.deref.call(null, G__10658);
  }(), child, parent);
};
cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = function(h, child, parent) {
  var or__4777__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child, parent);
  if (or__4777__auto__) {
    return or__4777__auto__;
  } else {
    var or__4777__auto____$1 = cljs.core.contains_QMARK_(cljs.core.cst$kw$ancestors.cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
    if (or__4777__auto____$1) {
      return or__4777__auto____$1;
    } else {
      var and__4765__auto__ = cljs.core.vector_QMARK_(parent);
      if (and__4765__auto__) {
        var and__4765__auto____$1 = cljs.core.vector_QMARK_(child);
        if (and__4765__auto____$1) {
          var and__4765__auto____$2 = cljs.core.count(parent) === cljs.core.count(child);
          if (and__4765__auto____$2) {
            var ret = true;
            var i = 0;
            while (true) {
              if (!ret || i === cljs.core.count(parent)) {
                return ret;
              } else {
                var G__10663 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h, child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null, i), parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null, i));
                var G__10664 = i + 1;
                ret = G__10663;
                i = G__10664;
                continue;
              }
              break;
            }
          } else {
            return and__4765__auto____$2;
          }
        } else {
          return and__4765__auto____$1;
        }
      } else {
        return and__4765__auto__;
      }
    }
  }
};
cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;
cljs.core.parents = function cljs$core$parents(var_args) {
  var args10665 = [];
  var len__5835__auto___10669 = arguments.length;
  var i__5836__auto___10670 = 0;
  while (true) {
    if (i__5836__auto___10670 < len__5835__auto___10669) {
      args10665.push(arguments[i__5836__auto___10670]);
      var G__10671 = i__5836__auto___10670 + 1;
      i__5836__auto___10670 = G__10671;
      continue;
    } else {
    }
    break;
  }
  var G__10667 = args10665.length;
  switch(G__10667) {
    case 1:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10665.length)].join(""));;
  }
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.parents.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10668 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10668) : cljs.core.deref.call(null, G__10668);
  }(), tag);
};
cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$parents.cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.parents.cljs$lang$maxFixedArity = 2;
cljs.core.ancestors = function cljs$core$ancestors(var_args) {
  var args10673 = [];
  var len__5835__auto___10677 = arguments.length;
  var i__5836__auto___10678 = 0;
  while (true) {
    if (i__5836__auto___10678 < len__5835__auto___10677) {
      args10673.push(arguments[i__5836__auto___10678]);
      var G__10679 = i__5836__auto___10678 + 1;
      i__5836__auto___10678 = G__10679;
      continue;
    } else {
    }
    break;
  }
  var G__10675 = args10673.length;
  switch(G__10675) {
    case 1:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10673.length)].join(""));;
  }
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10676 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10676) : cljs.core.deref.call(null, G__10676);
  }(), tag);
};
cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$ancestors.cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.ancestors.cljs$lang$maxFixedArity = 2;
cljs.core.descendants = function cljs$core$descendants(var_args) {
  var args10681 = [];
  var len__5835__auto___10685 = arguments.length;
  var i__5836__auto___10686 = 0;
  while (true) {
    if (i__5836__auto___10686 < len__5835__auto___10685) {
      args10681.push(arguments[i__5836__auto___10686]);
      var G__10687 = i__5836__auto___10686 + 1;
      i__5836__auto___10686 = G__10687;
      continue;
    } else {
    }
    break;
  }
  var G__10683 = args10681.length;
  switch(G__10683) {
    case 1:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10681.length)].join(""));;
  }
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = function(tag) {
  return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2(function() {
    var G__10684 = cljs.core.get_global_hierarchy();
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__10684) : cljs.core.deref.call(null, G__10684);
  }(), tag);
};
cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = function(h, tag) {
  return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$descendants.cljs$core$IFn$_invoke$arity$1(h), tag));
};
cljs.core.descendants.cljs$lang$maxFixedArity = 2;
cljs.core.derive = function cljs$core$derive(var_args) {
  var args10689 = [];
  var len__5835__auto___10692 = arguments.length;
  var i__5836__auto___10693 = 0;
  while (true) {
    if (i__5836__auto___10693 < len__5835__auto___10692) {
      args10689.push(arguments[i__5836__auto___10693]);
      var G__10694 = i__5836__auto___10693 + 1;
      i__5836__auto___10693 = G__10694;
      continue;
    } else {
    }
    break;
  }
  var G__10691 = args10689.length;
  switch(G__10691) {
    case 2:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.derive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10689.length)].join(""));;
  }
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  if (cljs.core.truth_(cljs.core.namespace(parent))) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(cljs.core.cst$sym$namespace, cljs.core.cst$sym$parent)], 0)))].join(""));
  }
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  if (cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag, parent)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(cljs.core.cst$sym$not_EQ_, cljs.core.cst$sym$tag, cljs.core.cst$sym$parent)], 0)))].join(""));
  }
  var tp = cljs.core.cst$kw$parents.cljs$core$IFn$_invoke$arity$1(h);
  var td = cljs.core.cst$kw$descendants.cljs$core$IFn$_invoke$arity$1(h);
  var ta = cljs.core.cst$kw$ancestors.cljs$core$IFn$_invoke$arity$1(h);
  var tf = function(tp, td, ta) {
    return function(m, source, sources, target, targets) {
      return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(tp, td, ta) {
        return function(ret, k) {
          return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, k, cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj, cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons(target, targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null, target))));
        };
      }(tp, td, ta), m, cljs.core.cons(source, sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null, source)));
    };
  }(tp, td, ta);
  var or__4777__auto__ = cljs.core.contains_QMARK_(tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null, tag), parent) ? null : function() {
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null, tag), parent)) {
      throw new Error([cljs.core.str(tag), cljs.core.str("already has"), cljs.core.str(parent), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    if (cljs.core.contains_QMARK_(ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null, parent), tag)) {
      throw new Error([cljs.core.str("Cyclic derivation:"), cljs.core.str(parent), cljs.core.str("has"), cljs.core.str(tag), cljs.core.str("as ancestor")].join(""));
    } else {
    }
    return new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$parents, cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.cst$kw$parents.cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), cljs.core.cst$kw$ancestors, tf(cljs.core.cst$kw$ancestors.cljs$core$IFn$_invoke$arity$1(h), tag, td, parent, ta), cljs.core.cst$kw$descendants, tf(cljs.core.cst$kw$descendants.cljs$core$IFn$_invoke$arity$1(h), 
    parent, ta, tag, td)], null);
  }();
  if (cljs.core.truth_(or__4777__auto__)) {
    return or__4777__auto__;
  } else {
    return h;
  }
};
cljs.core.derive.cljs$lang$maxFixedArity = 3;
cljs.core.underive = function cljs$core$underive(var_args) {
  var args10699 = [];
  var len__5835__auto___10702 = arguments.length;
  var i__5836__auto___10703 = 0;
  while (true) {
    if (i__5836__auto___10703 < len__5835__auto___10702) {
      args10699.push(arguments[i__5836__auto___10703]);
      var G__10704 = i__5836__auto___10703 + 1;
      i__5836__auto___10703 = G__10704;
      continue;
    } else {
    }
    break;
  }
  var G__10701 = args10699.length;
  switch(G__10701) {
    case 2:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.underive.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10699.length)].join(""));;
  }
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = function(tag, parent) {
  cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive, cljs.core.array_seq([tag, parent], 0));
  return null;
};
cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = function(h, tag, parent) {
  var parentMap = cljs.core.cst$kw$parents.cljs$core$IFn$_invoke$arity$1(h);
  var childsParents = cljs.core.truth_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag)) ? cljs.core.disj.cljs$core$IFn$_invoke$arity$2(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
  var newParents = cljs.core.truth_(cljs.core.not_empty(childsParents)) ? cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap, tag, childsParents) : cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap, tag);
  var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(function(parentMap, childsParents, newParents) {
    return function(p1__10696_SHARP_) {
      return cljs.core.cons(cljs.core.first(p1__10696_SHARP_), cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__10696_SHARP_), cljs.core.second(p1__10696_SHARP_)));
    };
  }(parentMap, childsParents, newParents), cljs.core.seq(newParents)));
  if (cljs.core.contains_QMARK_(parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null, tag), parent)) {
    return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(parentMap, childsParents, newParents, deriv_seq) {
      return function(p1__10697_SHARP_, p2__10698_SHARP_) {
        return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive, p1__10697_SHARP_, p2__10698_SHARP_);
      };
    }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy(), cljs.core.partition.cljs$core$IFn$_invoke$arity$2(2, deriv_seq));
  } else {
    return h;
  }
};
cljs.core.underive.cljs$lang$maxFixedArity = 3;
cljs.core.reset_cache = function cljs$core$reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy, function(_) {
    return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function cljs$core$prefers_STAR_(x, y, prefer_table) {
  var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null, prefer_table)).call(null, x);
  var or__4777__auto__ = cljs.core.truth_(function() {
    var and__4765__auto__ = xprefs;
    if (cljs.core.truth_(and__4765__auto__)) {
      return xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null, y);
    } else {
      return and__4765__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__4777__auto__)) {
    return or__4777__auto__;
  } else {
    var or__4777__auto____$1 = function() {
      var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
      while (true) {
        if (cljs.core.count(ps) > 0) {
          if (cljs.core.truth_(cljs$core$prefers_STAR_(x, cljs.core.first(ps), prefer_table))) {
          } else {
          }
          var G__10718 = cljs.core.rest(ps);
          ps = G__10718;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__4777__auto____$1)) {
      return or__4777__auto____$1;
    } else {
      var or__4777__auto____$2 = function() {
        var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
        while (true) {
          if (cljs.core.count(ps) > 0) {
            if (cljs.core.truth_(cljs$core$prefers_STAR_(cljs.core.first(ps), y, prefer_table))) {
            } else {
            }
            var G__10719 = cljs.core.rest(ps);
            ps = G__10719;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__4777__auto____$2)) {
        return or__4777__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function cljs$core$dominates(x, y, prefer_table) {
  var or__4777__auto__ = cljs.core.prefers_STAR_(x, y, prefer_table);
  if (cljs.core.truth_(or__4777__auto__)) {
    return or__4777__auto__;
  } else {
    return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2(x, y);
  }
};
cljs.core.find_and_cache_best_method = function cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(be, p__10722) {
    var vec__10723 = p__10722;
    var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10723, 0, null);
    var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10723, 1, null);
    var e = vec__10723;
    if (cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__4777__auto__ = be == null;
        if (or__4777__auto__) {
          return or__4777__auto__;
        } else {
          return cljs.core.dominates(k, cljs.core.first(be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2), k, prefer_table))) {
      } else {
        throw new Error([cljs.core.str("Multiple methods in multimethod '"), cljs.core.str(name), cljs.core.str("' match dispatch value: "), cljs.core.str(dispatch_val), cljs.core.str(" -\x3e "), cljs.core.str(k), cljs.core.str(" and "), cljs.core.str(cljs.core.first(be2)), cljs.core.str(", and neither is preferred")].join(""));
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache, cljs.core.assoc, dispatch_val, cljs.core.second(best_entry));
      return cljs.core.second(best_entry);
    } else {
      cljs.core.reset_cache(method_cache, method_table, cached_hierarchy, hierarchy);
      return cljs$core$find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
};
cljs.core._reset = function cljs$core$_reset(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_reset$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__5432__auto__ = mf == null ? null : mf;
    var m__5433__auto__ = cljs.core._reset[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto__.call(null, mf);
    } else {
      var m__5433__auto____$1 = cljs.core._reset["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-reset", mf);
      }
    }
  }
};
cljs.core._add_method = function cljs$core$_add_method(mf, dispatch_val, method) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_add_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__5432__auto__ = mf == null ? null : mf;
    var m__5433__auto__ = cljs.core._add_method[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__5433__auto__.call(null, mf, dispatch_val, method);
    } else {
      var m__5433__auto____$1 = cljs.core._add_method["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, method) : m__5433__auto____$1.call(null, mf, dispatch_val, method);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-add-method", mf);
      }
    }
  }
};
cljs.core._remove_method = function cljs$core$_remove_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__5432__auto__ = mf == null ? null : mf;
    var m__5433__auto__ = cljs.core._remove_method[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__5433__auto__.call(null, mf, dispatch_val);
    } else {
      var m__5433__auto____$1 = cljs.core._remove_method["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__5433__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-remove-method", mf);
      }
    }
  }
};
cljs.core._prefer_method = function cljs$core$_prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__5432__auto__ = mf == null ? null : mf;
    var m__5433__auto__ = cljs.core._prefer_method[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__5433__auto__.call(null, mf, dispatch_val, dispatch_val_y);
    } else {
      var m__5433__auto____$1 = cljs.core._prefer_method["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$3(mf, dispatch_val, dispatch_val_y) : m__5433__auto____$1.call(null, mf, dispatch_val, dispatch_val_y);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefer-method", mf);
      }
    }
  }
};
cljs.core._get_method = function cljs$core$_get_method(mf, dispatch_val) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_get_method$arity$2 == null)) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__5432__auto__ = mf == null ? null : mf;
    var m__5433__auto__ = cljs.core._get_method[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__5433__auto__.call(null, mf, dispatch_val);
    } else {
      var m__5433__auto____$1 = cljs.core._get_method["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$2(mf, dispatch_val) : m__5433__auto____$1.call(null, mf, dispatch_val);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-get-method", mf);
      }
    }
  }
};
cljs.core._methods = function cljs$core$_methods(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_methods$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__5432__auto__ = mf == null ? null : mf;
    var m__5433__auto__ = cljs.core._methods[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto__.call(null, mf);
    } else {
      var m__5433__auto____$1 = cljs.core._methods["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-methods", mf);
      }
    }
  }
};
cljs.core._prefers = function cljs$core$_prefers(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_prefers$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__5432__auto__ = mf == null ? null : mf;
    var m__5433__auto__ = cljs.core._prefers[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto__.call(null, mf);
    } else {
      var m__5433__auto____$1 = cljs.core._prefers["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-prefers", mf);
      }
    }
  }
};
cljs.core._default_dispatch_val = function cljs$core$_default_dispatch_val(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
  } else {
    var x__5432__auto__ = mf == null ? null : mf;
    var m__5433__auto__ = cljs.core._default_dispatch_val[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto__.call(null, mf);
    } else {
      var m__5433__auto____$1 = cljs.core._default_dispatch_val["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val", mf);
      }
    }
  }
};
cljs.core._dispatch_fn = function cljs$core$_dispatch_fn(mf) {
  if (!(mf == null) && !(mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)) {
    return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
  } else {
    var x__5432__auto__ = mf == null ? null : mf;
    var m__5433__auto__ = cljs.core._dispatch_fn[goog.typeOf(x__5432__auto__)];
    if (!(m__5433__auto__ == null)) {
      return m__5433__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto__.call(null, mf);
    } else {
      var m__5433__auto____$1 = cljs.core._dispatch_fn["_"];
      if (!(m__5433__auto____$1 == null)) {
        return m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5433__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5433__auto____$1.call(null, mf);
      } else {
        throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn", mf);
      }
    }
  }
};
cljs.core.throw_no_method_error = function cljs$core$throw_no_method_error(name, dispatch_val) {
  throw new Error([cljs.core.str("No method in multimethod '"), cljs.core.str(name), cljs.core.str("' for dispatch value: "), cljs.core.str(dispatch_val)].join(""));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 4352;
};
cljs.core.MultiFn.prototype.call = function() {
  var G__10725 = null;
  var G__10725__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
  };
  var G__10725__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
  };
  var G__10725__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
  };
  var G__10725__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
  };
  var G__10725__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
  };
  var G__10725__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
  };
  var G__10725__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
  };
  var G__10725__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__10725__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__10725__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__10725__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__10725__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__10725__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__10725__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__10725__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__10725__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__10725__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__10725__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__10725__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__10725__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__10725__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__10725__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error(self__.name, dispatch_val);
    }
    return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  };
  G__10725 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__10725__1.call(this, self__);
      case 2:
        return G__10725__2.call(this, self__, a);
      case 3:
        return G__10725__3.call(this, self__, a, b);
      case 4:
        return G__10725__4.call(this, self__, a, b, c);
      case 5:
        return G__10725__5.call(this, self__, a, b, c, d);
      case 6:
        return G__10725__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__10725__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__10725__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__10725__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__10725__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__10725__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__10725__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__10725__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__10725__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__10725__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__10725__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__10725__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__10725__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__10725__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__10725__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__10725__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__10725__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__10725.cljs$core$IFn$_invoke$arity$1 = G__10725__1;
  G__10725.cljs$core$IFn$_invoke$arity$2 = G__10725__2;
  G__10725.cljs$core$IFn$_invoke$arity$3 = G__10725__3;
  G__10725.cljs$core$IFn$_invoke$arity$4 = G__10725__4;
  G__10725.cljs$core$IFn$_invoke$arity$5 = G__10725__5;
  G__10725.cljs$core$IFn$_invoke$arity$6 = G__10725__6;
  G__10725.cljs$core$IFn$_invoke$arity$7 = G__10725__7;
  G__10725.cljs$core$IFn$_invoke$arity$8 = G__10725__8;
  G__10725.cljs$core$IFn$_invoke$arity$9 = G__10725__9;
  G__10725.cljs$core$IFn$_invoke$arity$10 = G__10725__10;
  G__10725.cljs$core$IFn$_invoke$arity$11 = G__10725__11;
  G__10725.cljs$core$IFn$_invoke$arity$12 = G__10725__12;
  G__10725.cljs$core$IFn$_invoke$arity$13 = G__10725__13;
  G__10725.cljs$core$IFn$_invoke$arity$14 = G__10725__14;
  G__10725.cljs$core$IFn$_invoke$arity$15 = G__10725__15;
  G__10725.cljs$core$IFn$_invoke$arity$16 = G__10725__16;
  G__10725.cljs$core$IFn$_invoke$arity$17 = G__10725__17;
  G__10725.cljs$core$IFn$_invoke$arity$18 = G__10725__18;
  G__10725.cljs$core$IFn$_invoke$arity$19 = G__10725__19;
  G__10725.cljs$core$IFn$_invoke$arity$20 = G__10725__20;
  G__10725.cljs$core$IFn$_invoke$arity$21 = G__10725__21;
  G__10725.cljs$core$IFn$_invoke$arity$22 = G__10725__22;
  return G__10725;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args10724) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone(args10724)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a, b) : self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a, b) : target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a, b, c) : target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a, b, c, d) : target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a, b, c, d, e) : target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a, b, c, d, e, f) : target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a, b, c, d, e, f, g) : target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a, b, c, d, e, f, g, h) : target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a, b, c, d, e, f, g, h, i) : target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a, b, c, d, e, f, g, h, i, j) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a, b, c, d, e, f, g, h, i, j, k) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a, b, c, d, e, f, g, h, i, j, k, l) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a, b, c, d, e, f, g, h, i, j, k, l, m) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a, b, c, d, e, f, g, h, i, j, k, l, m, n) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) : target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error(self__.name, dispatch_val);
  }
  return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn, a, b, c, d, cljs.core.array_seq([e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest], 0));
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error([cljs.core.str("Preference conflict in multimethod '"), cljs.core.str(self__.name), cljs.core.str("': "), cljs.core.str(dispatch_val_y), cljs.core.str(" is already preferred to "), cljs.core.str(dispatch_val_x)].join(""));
  } else {
  }
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.default_dispatch_val;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return self__.dispatch_fn;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache(self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4423__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null, self__.method_cache)).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var target_fn = temp__4423__auto__;
    return target_fn;
  } else {
    var temp__4423__auto____$1 = cljs.core.find_and_cache_best_method(self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4423__auto____$1)) {
      var target_fn = temp__4423__auto____$1;
      return target_fn;
    } else {
      return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null, self__.method_table)).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._name(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._namespace(self__.name);
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.getBasis = function() {
  return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name, cljs.core.cst$sym$dispatch_DASH_fn, cljs.core.cst$sym$default_DASH_dispatch_DASH_val, cljs.core.cst$sym$hierarchy, cljs.core.cst$sym$method_DASH_table, cljs.core.cst$sym$prefer_DASH_table, cljs.core.cst$sym$method_DASH_cache, cljs.core.cst$sym$cached_DASH_hierarchy], null);
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/MultiFn");
};
cljs.core.__GT_MultiFn = function cljs$core$__GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function cljs$core$remove_all_methods(multifn) {
  return cljs.core._reset(multifn);
};
cljs.core.remove_method = function cljs$core$remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method(multifn, dispatch_val);
};
cljs.core.prefer_method = function cljs$core$prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method(multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function cljs$core$methods(multifn) {
  return cljs.core._methods(multifn);
};
cljs.core.get_method = function cljs$core$get_method(multifn, dispatch_val) {
  return cljs.core._get_method(multifn, dispatch_val);
};
cljs.core.prefers = function cljs$core$prefers(multifn) {
  return cljs.core._prefers(multifn);
};
cljs.core.default_dispatch_val = function cljs$core$default_dispatch_val(multifn) {
  return cljs.core._default_dispatch_val(multifn);
};
cljs.core.dispatch_fn = function cljs$core$dispatch_fn(multifn) {
  return cljs.core._dispatch_fn(multifn);
};
cljs.core.UUID = function(uuid, __hash) {
  this.uuid = uuid;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
  this.cljs$lang$protocol_mask$partition1$ = 2048;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write(writer, [cljs.core.str('#uuid "'), cljs.core.str(self__.uuid), cljs.core.str('"')].join(""));
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.__hash == null) {
    self__.__hash = cljs.core.hash(self__.uuid);
  } else {
  }
  return self__.__hash;
};
cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  var G__10726 = self__.uuid;
  var G__10727 = other.uuid;
  return goog.array.defaultCompare(G__10726, G__10727);
};
cljs.core.UUID.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid, cljs.core.with_meta(cljs.core.cst$sym$__hash, new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable, true], null))], null);
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/UUID");
};
cljs.core.__GT_UUID = function cljs$core$__GT_UUID(uuid, __hash) {
  return new cljs.core.UUID(uuid, __hash);
};
cljs.core.uuid = function cljs$core$uuid(s) {
  return new cljs.core.UUID(s, null);
};
cljs.core.random_uuid = function cljs$core$random_uuid() {
  var hex = function cljs$core$random_uuid_$_hex() {
    return cljs.core.rand_int(15).toString(16);
  };
  var rhex = (8 | 3 & cljs.core.rand_int(14)).toString(16);
  return cljs.core.uuid([cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str("4"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str("-"), cljs.core.str(rhex), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), 
  cljs.core.str("-"), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex()), cljs.core.str(hex())].join(""));
};
cljs.core.pr_writer_ex_info = function cljs$core$pr_writer_ex_info(obj, writer, opts) {
  cljs.core._write(writer, "#error {:message ");
  cljs.core.pr_writer(obj.message, writer, opts);
  if (cljs.core.truth_(obj.data)) {
    cljs.core._write(writer, ", :data ");
    cljs.core.pr_writer(obj.data, writer, opts);
  } else {
  }
  if (cljs.core.truth_(obj.cause)) {
    cljs.core._write(writer, ", :cause ");
    cljs.core.pr_writer(obj.cause, writer, opts);
  } else {
  }
  return cljs.core._write(writer, "}");
};
cljs.core.ExceptionInfo = function cljs$core$ExceptionInfo(message, data, cause) {
  var e = new Error(message);
  var this$ = this;
  this$.message = message;
  this$.data = data;
  this$.cause = cause;
  this$.name = e.name;
  this$.description = e.description;
  this$.number = e.number;
  this$.fileName = e.fileName;
  this$.lineNumber = e.lineNumber;
  this$.columnNumber = e.columnNumber;
  this$.stack = e.stack;
  return this$;
};
cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(obj, writer, opts) {
  var obj__$1 = this;
  return cljs.core.pr_writer_ex_info(obj__$1, writer, opts);
};
cljs.core.ExceptionInfo.prototype.toString = function() {
  var this$ = this;
  return cljs.core.pr_str_STAR_(this$);
};
cljs.core.ex_info = function cljs$core$ex_info(var_args) {
  var args10728 = [];
  var len__5835__auto___10731 = arguments.length;
  var i__5836__auto___10732 = 0;
  while (true) {
    if (i__5836__auto___10732 < len__5835__auto___10731) {
      args10728.push(arguments[i__5836__auto___10732]);
      var G__10733 = i__5836__auto___10732 + 1;
      i__5836__auto___10732 = G__10733;
      continue;
    } else {
    }
    break;
  }
  var G__10730 = args10728.length;
  switch(G__10730) {
    case 2:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10728.length)].join(""));;
  }
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = function(msg, data) {
  return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg, data, null);
};
cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = function(msg, data, cause) {
  return new cljs.core.ExceptionInfo(msg, data, cause);
};
cljs.core.ex_info.cljs$lang$maxFixedArity = 3;
cljs.core.ex_data = function cljs$core$ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function cljs$core$ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function cljs$core$ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function cljs$core$comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x, y) : pred.call(null, x, y))) {
      return -1;
    } else {
      if (cljs.core.truth_(pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y, x) : pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function cljs$core$special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [cljs.core.cst$sym$_AMPERSAND_, null, cljs.core.cst$sym$defrecord_STAR_, null, cljs.core.cst$sym$try, null, cljs.core.cst$sym$loop_STAR_, null, cljs.core.cst$sym$do, null, cljs.core.cst$sym$letfn_STAR_, null, cljs.core.cst$sym$if, null, cljs.core.cst$sym$new, null, cljs.core.cst$sym$ns, null, cljs.core.cst$sym$deftype_STAR_, null, cljs.core.cst$sym$let_STAR_, null, cljs.core.cst$sym$js_STAR_, 
  null, cljs.core.cst$sym$fn_STAR_, null, cljs.core.cst$sym$recur, null, cljs.core.cst$sym$set_BANG_, null, cljs.core.cst$sym$_DOT_, null, cljs.core.cst$sym$quote, null, cljs.core.cst$sym$throw, null, cljs.core.cst$sym$def, null], null), null), x);
};
cljs.core.test = function cljs$core$test(v) {
  var f = v.cljs$lang$test;
  if (cljs.core.truth_(f)) {
    f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null);
    return cljs.core.cst$kw$ok;
  } else {
    return cljs.core.cst$kw$no_DASH_test;
  }
};
cljs.core.TaggedLiteral = function(tag, form) {
  this.tag = tag;
  this.form = form;
  this.cljs$lang$protocol_mask$partition0$ = 2153775360;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.TaggedLiteral.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_(coll);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  return other instanceof cljs.core.TaggedLiteral && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag, other.tag) && cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form, other.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return 31 * cljs.core.hash(self__.tag) + cljs.core.hash(self__.form);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = function(this$, v) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(this$__$1, v, null);
};
cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = function(this$, v, not_found) {
  var self__ = this;
  var this$__$1 = this;
  var G__10735 = v instanceof cljs.core.Keyword ? v.fqn : null;
  switch(G__10735) {
    case "tag":
      return self__.tag;
      break;
    case "form":
      return self__.form;
      break;
    default:
      return not_found;
  }
};
cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, opts) {
  var self__ = this;
  var o__$1 = this;
  cljs.core._write(writer, [cljs.core.str("#"), cljs.core.str(self__.tag), cljs.core.str(" ")].join(""));
  return cljs.core.pr_writer(self__.form, writer, opts);
};
cljs.core.TaggedLiteral.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag, cljs.core.cst$sym$form], null);
};
cljs.core.TaggedLiteral.cljs$lang$type = true;
cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";
cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/TaggedLiteral");
};
cljs.core.__GT_TaggedLiteral = function cljs$core$__GT_TaggedLiteral(tag, form) {
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.tagged_literal_QMARK_ = function cljs$core$tagged_literal_QMARK_(value) {
  return value instanceof cljs.core.TaggedLiteral;
};
cljs.core.tagged_literal = function cljs$core$tagged_literal(tag, form) {
  if (tag instanceof cljs.core.Symbol) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([cljs.core.list(cljs.core.cst$sym$symbol_QMARK_, cljs.core.cst$sym$tag)], 0)))].join(""));
  }
  return new cljs.core.TaggedLiteral(tag, form);
};
cljs.core.js_reserved_arr = ["abstract", "boolean", "break", "byte", "case", "catch", "char", "class", "const", "continue", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "let", "long", "native", "new", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", 
"transient", "try", "typeof", "var", "void", "volatile", "while", "with", "yield", "methods", "null"];
cljs.core.js_reserved = null;
cljs.core.js_reserved_QMARK_ = function cljs$core$js_reserved_QMARK_(x) {
  if (cljs.core.js_reserved == null) {
    cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(function(p1__10737_SHARP_, p2__10738_SHARP_) {
      goog.object.set(p1__10737_SHARP_, p2__10738_SHARP_, true);
      return p1__10737_SHARP_;
    }, {}, cljs.core.js_reserved_arr);
  } else {
  }
  return cljs.core.js_reserved.hasOwnProperty(x);
};
cljs.core.demunge_pattern = function cljs$core$demunge_pattern() {
  if (cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)) {
  } else {
    cljs.core.DEMUNGE_PATTERN = function() {
      var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2(function(a, b) {
        return b.length - a.length;
      }, cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
      var ks__$1 = ks;
      var ret = "";
      while (true) {
        if (cljs.core.seq(ks__$1)) {
          var G__10741 = cljs.core.next(ks__$1);
          var G__10742 = [cljs.core.str(function() {
            var G__10740 = ret;
            var G__10740__$1 = !(ret === "") ? [cljs.core.str(G__10740), cljs.core.str("|")].join("") : G__10740;
            return G__10740__$1;
          }()), cljs.core.str(cljs.core.first(ks__$1))].join("");
          ks__$1 = G__10741;
          ret = G__10742;
          continue;
        } else {
          return [cljs.core.str(ret), cljs.core.str("|\\$")].join("");
        }
        break;
      }
    }();
  }
  return cljs.core.DEMUNGE_PATTERN;
};
cljs.core.munge_str = function cljs$core$munge_str(name) {
  var sb = new goog.string.StringBuffer;
  var i_10743 = 0;
  while (true) {
    if (i_10743 < name.length) {
      var c_10744 = name.charAt(i_10743);
      var sub_10745 = goog.object.get(cljs.core.CHAR_MAP, c_10744);
      if (!(sub_10745 == null)) {
        sb.append(sub_10745);
      } else {
        sb.append(c_10744);
      }
      var G__10746 = i_10743 + 1;
      i_10743 = G__10746;
      continue;
    } else {
    }
    break;
  }
  return sb.toString();
};
cljs.core.munge = function cljs$core$munge(name) {
  var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str(name)].join(""));
  var name_SINGLEQUOTE___$1 = name_SINGLEQUOTE_ === ".." ? "_DOT__DOT_" : cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_)) ? [cljs.core.str(name_SINGLEQUOTE_), cljs.core.str("$")].join("") : name_SINGLEQUOTE_;
  if (name instanceof cljs.core.Symbol) {
    return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
  } else {
    return [cljs.core.str(name_SINGLEQUOTE___$1)].join("");
  }
};
cljs.core.demunge_str = function cljs$core$demunge_str(munged_name) {
  var r = new RegExp(cljs.core.demunge_pattern(), "g");
  var munged_name__$1 = cljs.core.truth_(goog.string.endsWith(munged_name, "$")) ? munged_name.substring(0, munged_name.length - 1) : munged_name;
  var ret = "";
  var last_match_end = 0;
  while (true) {
    var temp__4423__auto__ = r.exec(munged_name__$1);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var match = temp__4423__auto__;
      var vec__10748 = match;
      var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__10748, 0, null);
      var G__10749 = [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, r.lastIndex - x.length)), cljs.core.str(x === "$" ? "/" : goog.object.get(cljs.core.DEMUNGE_MAP, x))].join("");
      var G__10750 = r.lastIndex;
      ret = G__10749;
      last_match_end = G__10750;
      continue;
    } else {
      return [cljs.core.str(ret), cljs.core.str(munged_name__$1.substring(last_match_end, munged_name__$1.length))].join("");
    }
    break;
  }
};
cljs.core.demunge = function cljs$core$demunge(name) {
  return (name instanceof cljs.core.Symbol ? cljs.core.symbol : cljs.core.str).call(null, function() {
    var name_SINGLEQUOTE_ = [cljs.core.str(name)].join("");
    if (name_SINGLEQUOTE_ === "_DOT__DOT_") {
      return "..";
    } else {
      return cljs.core.demunge_str([cljs.core.str(name)].join(""));
    }
  }());
};
cljs.core.ns_lookup = function cljs$core$ns_lookup(ns_obj, k) {
  return function() {
    return goog.object.get(ns_obj, k);
  };
};
cljs.core.Namespace = function(obj, name) {
  this.obj = obj;
  this.name = name;
  this.cljs$lang$protocol_mask$partition0$ = 6291456;
  this.cljs$lang$protocol_mask$partition1$ = 0;
};
cljs.core.Namespace.prototype.findInternedVar = function(sym) {
  var self__ = this;
  var this$ = this;
  var k = cljs.core.munge([cljs.core.str(sym)].join(""));
  if (goog.object.containsKey(self__.obj, k)) {
    var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(self__.name)].join(""), [cljs.core.str(sym)].join(""));
    var var_meta = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$ns, this$], null);
    return new cljs.core.Var(cljs.core.ns_lookup(self__.obj, k), var_sym, var_meta);
  } else {
    return null;
  }
};
cljs.core.Namespace.prototype.getName = function() {
  var self__ = this;
  var _ = this;
  return self__.name;
};
cljs.core.Namespace.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return [cljs.core.str(self__.name)].join("");
};
cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Namespace) {
    return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name, other.name);
  } else {
    return false;
  }
};
cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.hash(self__.name);
};
cljs.core.Namespace.getBasis = function() {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj, cljs.core.cst$sym$name], null);
};
cljs.core.Namespace.cljs$lang$type = true;
cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";
cljs.core.Namespace.cljs$lang$ctorPrWriter = function(this__5375__auto__, writer__5376__auto__, opt__5377__auto__) {
  return cljs.core._write(writer__5376__auto__, "cljs.core/Namespace");
};
cljs.core.__GT_Namespace = function cljs$core$__GT_Namespace(obj, name) {
  return new cljs.core.Namespace(obj, name);
};
cljs.core.NS_CACHE = null;
cljs.core.find_ns_obj_STAR_ = function cljs$core$find_ns_obj_STAR_(ctxt, xs) {
  while (true) {
    if (ctxt == null) {
      return null;
    } else {
      if (xs == null) {
        return ctxt;
      } else {
        var G__10755 = function() {
          var G__10753 = ctxt;
          var G__10754 = cljs.core.first(xs);
          return goog.object.get(G__10753, G__10754);
        }();
        var G__10756 = cljs.core.next(xs);
        ctxt = G__10755;
        xs = G__10756;
        continue;
      }
    }
    break;
  }
};
cljs.core.find_ns_obj = function cljs$core$find_ns_obj(ns) {
  var munged_ns = cljs.core.munge([cljs.core.str(ns)].join(""));
  var segs = munged_ns.split(".");
  var G__10758 = cljs.core._STAR_target_STAR_;
  switch(G__10758) {
    case "nodejs":
      if (COMPILED) {
        return eval(munged_ns);
      } else {
        return cljs.core.find_ns_obj_STAR_(global, segs);
      }
      break;
    case "default":
      return cljs.core.find_ns_obj_STAR_(goog.global, segs);
      break;
    default:
      throw new Error([cljs.core.str("find-ns-obj not supported for target "), cljs.core.str(cljs.core._STAR_target_STAR_)].join(""));;
  }
};
cljs.core.ns_interns_STAR_ = function cljs$core$ns_interns_STAR_(sym) {
  var ns_obj = cljs.core.find_ns_obj(sym);
  var ns = new cljs.core.Namespace(ns_obj, sym);
  var step = function(ns_obj, ns) {
    return function cljs$core$ns_interns_STAR__$_step(ret, k) {
      var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
      return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret, var_sym, new cljs.core.Var(function(var_sym, ns_obj, ns) {
        return function() {
          return goog.object.get(ns_obj, k);
        };
      }(var_sym, ns_obj, ns), cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str(sym)].join(""), [cljs.core.str(var_sym)].join("")), new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$ns, ns], null)));
    };
  }(ns_obj, ns);
  return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step, cljs.core.PersistentArrayMap.EMPTY, cljs.core.js_keys(ns_obj));
};
cljs.core.create_ns = function cljs$core$create_ns(var_args) {
  var args10760 = [];
  var len__5835__auto___10763 = arguments.length;
  var i__5836__auto___10764 = 0;
  while (true) {
    if (i__5836__auto___10764 < len__5835__auto___10763) {
      args10760.push(arguments[i__5836__auto___10764]);
      var G__10765 = i__5836__auto___10764 + 1;
      i__5836__auto___10764 = G__10765;
      continue;
    } else {
    }
    break;
  }
  var G__10762 = args10760.length;
  switch(G__10762) {
    case 1:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args10760.length)].join(""));;
  }
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = function(sym) {
  return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym, cljs.core.find_ns_obj(sym));
};
cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = function(sym, ns_obj) {
  return new cljs.core.Namespace(ns_obj, sym);
};
cljs.core.create_ns.cljs$lang$maxFixedArity = 2;
cljs.core.find_ns = function cljs$core$find_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__10768 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10768) : cljs.core.atom.call(null, G__10768);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_obj = cljs.core.find_ns_obj(ns);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns, new_ns);
      return new_ns;
    }
  }
};
cljs.core.find_macros_ns = function cljs$core$find_macros_ns(ns) {
  if (cljs.core.NS_CACHE == null) {
    cljs.core.NS_CACHE = function() {
      var G__10770 = cljs.core.PersistentArrayMap.EMPTY;
      return cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__10770) : cljs.core.atom.call(null, G__10770);
    }();
  } else {
  }
  var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null, cljs.core.NS_CACHE), ns);
  if (!(the_ns == null)) {
    return the_ns;
  } else {
    var ns_str = [cljs.core.str(ns)].join("");
    var ns__$1 = !goog.string.contains(ns_str, "$macros") ? cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str(ns_str), cljs.core.str("$macros")].join("")) : ns;
    var ns_obj = cljs.core.find_ns_obj(ns__$1);
    if (ns_obj == null) {
      return null;
    } else {
      var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1, ns_obj);
      cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE, cljs.core.assoc, ns__$1, new_ns);
      return new_ns;
    }
  }
};
cljs.core.ns_name = function cljs$core$ns_name(ns_obj) {
  return ns_obj.name;
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string");
goog.require("goog.string.StringBuffer");
clojure.string.seq_reverse = function clojure$string$seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.re_surrogate_pair = new RegExp("([\\uD800-\\uDBFF])([\\uDC00-\\uDFFF])", "g");
clojure.string.reverse = function clojure$string$reverse(s) {
  return s.replace(clojure.string.re_surrogate_pair, "$2$1").split("").reverse().join("");
};
clojure.string.replace_all = function clojure$string$replace_all(s, re, replacement) {
  return s.replace(new RegExp(re.source, "g"), replacement);
};
clojure.string.replace_with = function clojure$string$replace_with(f) {
  return function() {
    var G__7201__delegate = function(args) {
      var matches = cljs.core.drop_last.call(null, 2, args);
      if (cljs.core._EQ_.call(null, cljs.core.count.call(null, matches), 1)) {
        return f.call(null, cljs.core.first.call(null, matches));
      } else {
        return f.call(null, cljs.core.vec.call(null, matches));
      }
    };
    var G__7201 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        var G__7202__i = 0, G__7202__a = new Array(arguments.length - 0);
        while (G__7202__i < G__7202__a.length) {
          G__7202__a[G__7202__i] = arguments[G__7202__i + 0];
          ++G__7202__i;
        }
        args = new cljs.core.IndexedSeq(G__7202__a, 0);
      }
      return G__7201__delegate.call(this, args);
    };
    G__7201.cljs$lang$maxFixedArity = 0;
    G__7201.cljs$lang$applyTo = function(arglist__7203) {
      var args = cljs.core.seq(arglist__7203);
      return G__7201__delegate(args);
    };
    G__7201.cljs$core$IFn$_invoke$arity$variadic = G__7201__delegate;
    return G__7201;
  }();
};
clojure.string.replace = function clojure$string$replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (match instanceof RegExp) {
      if (typeof replacement === "string") {
        return clojure.string.replace_all.call(null, s, match, replacement);
      } else {
        return clojure.string.replace_all.call(null, s, match, clojure.string.replace_with.call(null, replacement));
      }
    } else {
      throw [cljs.core.str("Invalid match arg: "), cljs.core.str(match)].join("");
    }
  }
};
clojure.string.replace_first = function clojure$string$replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function clojure$string$join(var_args) {
  var args7204 = [];
  var len__5835__auto___7207 = arguments.length;
  var i__5836__auto___7208 = 0;
  while (true) {
    if (i__5836__auto___7208 < len__5835__auto___7207) {
      args7204.push(arguments[i__5836__auto___7208]);
      var G__7209 = i__5836__auto___7208 + 1;
      i__5836__auto___7208 = G__7209;
      continue;
    } else {
    }
    break;
  }
  var G__7206 = args7204.length;
  switch(G__7206) {
    case 1:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$1(arguments[0]);
      break;
    case 2:
      return clojure.string.join.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7204.length)].join(""));;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__7211 = sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var G__7212 = cljs.core.next.call(null, coll__$1);
      sb = G__7211;
      coll__$1 = G__7212;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$core$IFn$_invoke$arity$2 = function(separator, coll) {
  var sb = new goog.string.StringBuffer;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      sb.append([cljs.core.str(cljs.core.first.call(null, coll__$1))].join(""));
      var coll__$2 = cljs.core.next.call(null, coll__$1);
      if (coll__$2 == null) {
      } else {
        sb.append(separator);
      }
      var G__7213 = sb;
      var G__7214 = coll__$2;
      sb = G__7213;
      coll__$1 = G__7214;
      continue;
    } else {
      return sb.toString();
    }
    break;
  }
};
clojure.string.join.cljs$lang$maxFixedArity = 2;
clojure.string.upper_case = function clojure$string$upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function clojure$string$lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function clojure$string$capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return [cljs.core.str(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))), cljs.core.str(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)))].join("");
  }
};
clojure.string.pop_last_while_empty = function clojure$string$pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if ("" === cljs.core.peek.call(null, v__$1)) {
      var G__7215 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__7215;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function clojure$string$discard_trailing_if_needed(limit, v) {
  if (0 === limit) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function clojure$string$split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__7219 = cljs.core._EQ__EQ_;
    var expr__7220 = limit;
    if (cljs.core.truth_(pred__7219.call(null, 1, expr__7220))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__7219.call(null, 2, expr__7220))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function clojure$string$split(var_args) {
  var args7222 = [];
  var len__5835__auto___7225 = arguments.length;
  var i__5836__auto___7226 = 0;
  while (true) {
    if (i__5836__auto___7226 < len__5835__auto___7225) {
      args7222.push(arguments[i__5836__auto___7226]);
      var G__7227 = i__5836__auto___7226 + 1;
      i__5836__auto___7226 = G__7227;
      continue;
    } else {
    }
    break;
  }
  var G__7224 = args7222.length;
  switch(G__7224) {
    case 2:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.split.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7222.length)].join(""));;
  }
};
clojure.string.split.cljs$core$IFn$_invoke$arity$2 = function(s, re) {
  return clojure.string.split.call(null, s, re, 0);
};
clojure.string.split.cljs$core$IFn$_invoke$arity$3 = function(s, re, limit) {
  return clojure.string.discard_trailing_if_needed.call(null, limit, "/(?:)/" === [cljs.core.str(re)].join("") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, [cljs.core.str(s)].join("").split(re)) : function() {
    var s__$1 = s;
    var limit__$1 = limit;
    var parts = cljs.core.PersistentVector.EMPTY;
    while (true) {
      if (1 === limit__$1) {
        return cljs.core.conj.call(null, parts, s__$1);
      } else {
        var m = cljs.core.re_find.call(null, re, s__$1);
        if (!(m == null)) {
          var index = s__$1.indexOf(m);
          var G__7229 = s__$1.substring(index + cljs.core.count.call(null, m));
          var G__7230 = limit__$1 - 1;
          var G__7231 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
          s__$1 = G__7229;
          limit__$1 = G__7230;
          parts = G__7231;
          continue;
        } else {
          return cljs.core.conj.call(null, parts, s__$1);
        }
      }
      break;
    }
  }());
};
clojure.string.split.cljs$lang$maxFixedArity = 3;
clojure.string.split_lines = function clojure$string$split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function clojure$string$trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function clojure$string$triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function clojure$string$trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function clojure$string$trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if ("\n" === ch || "\r" === ch) {
        var G__7232 = index - 1;
        index = G__7232;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function clojure$string$blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function clojure$string$escape(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (length === index) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var replacement = cljs.core.get.call(null, cmap, ch);
      if (!(replacement == null)) {
        buffer.append([cljs.core.str(replacement)].join(""));
      } else {
        buffer.append(ch);
      }
      var G__7233 = index + 1;
      index = G__7233;
      continue;
    }
    break;
  }
};
clojure.string.index_of = function clojure$string$index_of(var_args) {
  var args7234 = [];
  var len__5835__auto___7237 = arguments.length;
  var i__5836__auto___7238 = 0;
  while (true) {
    if (i__5836__auto___7238 < len__5835__auto___7237) {
      args7234.push(arguments[i__5836__auto___7238]);
      var G__7239 = i__5836__auto___7238 + 1;
      i__5836__auto___7238 = G__7239;
      continue;
    } else {
    }
    break;
  }
  var G__7236 = args7234.length;
  switch(G__7236) {
    case 2:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7234.length)].join(""));;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.indexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.indexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.index_of.cljs$lang$maxFixedArity = 3;
clojure.string.last_index_of = function clojure$string$last_index_of(var_args) {
  var args7241 = [];
  var len__5835__auto___7244 = arguments.length;
  var i__5836__auto___7245 = 0;
  while (true) {
    if (i__5836__auto___7245 < len__5835__auto___7244) {
      args7241.push(arguments[i__5836__auto___7245]);
      var G__7246 = i__5836__auto___7245 + 1;
      i__5836__auto___7245 = G__7246;
      continue;
    } else {
    }
    break;
  }
  var G__7243 = args7241.length;
  switch(G__7243) {
    case 2:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2(arguments[0], arguments[1]);
      break;
    case 3:
      return clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3(arguments[0], arguments[1], arguments[2]);
      break;
    default:
      throw new Error([cljs.core.str("Invalid arity: "), cljs.core.str(args7241.length)].join(""));;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$2 = function(s, value) {
  var result = s.lastIndexOf(value);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$core$IFn$_invoke$arity$3 = function(s, value, from_index) {
  var result = s.lastIndexOf(value, from_index);
  if (result < 0) {
    return null;
  } else {
    return result;
  }
};
clojure.string.last_index_of.cljs$lang$maxFixedArity = 3;
clojure.string.starts_with_QMARK_ = function clojure$string$starts_with_QMARK_(s, substr) {
  return goog.string.startsWith(s, substr);
};
clojure.string.ends_with_QMARK_ = function clojure$string$ends_with_QMARK_(s, substr) {
  return goog.string.endsWith(s, substr);
};
clojure.string.includes_QMARK_ = function clojure$string$includes_QMARK_(s, substr) {
  return goog.string.contains(s, substr);
};
goog.provide("markdown.transformers");
goog.require("cljs.core");
goog.require("clojure.string");
markdown.transformers.formatter;
markdown.transformers._STAR_substring_STAR_;
markdown.transformers._STAR_next_line_STAR_;
markdown.transformers.heading_QMARK_ = function markdown$transformers$heading_QMARK_(text, type) {
  if (cljs.core.every_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [" ", null], null), null), cljs.core.take.call(null, 4, text))) {
    return null;
  } else {
    var trimmed = cljs.core.truth_(text) ? clojure.string.trim.call(null, text) : null;
    var and__4765__auto__ = cljs.core.not_empty.call(null, trimmed);
    if (cljs.core.truth_(and__4765__auto__)) {
      return cljs.core.every_QMARK_.call(null, cljs.core.PersistentHashSet.fromArray([type], true), trimmed);
    } else {
      return and__4765__auto__;
    }
  }
};
markdown.transformers.h1_QMARK_ = function markdown$transformers$h1_QMARK_(text) {
  return markdown.transformers.heading_QMARK_.call(null, text, "\x3d");
};
markdown.transformers.h2_QMARK_ = function markdown$transformers$h2_QMARK_(text) {
  return markdown.transformers.heading_QMARK_.call(null, text, "-");
};
markdown.transformers.empty_line = function markdown$transformers$empty_line(text, state) {
  if (cljs.core.truth_(function() {
    var or__4777__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
      var or__4777__auto__ = markdown.transformers.h1_QMARK_.call(null, text);
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        return markdown.transformers.h2_QMARK_.call(null, text);
      }
    }()) ? "" : text, cljs.core.truth_(clojure.string.blank_QMARK_.call(null, text)) ? cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "hr", "hr", 1377740067), new cljs.core.Keyword(null, "heading", "heading", -1312171873)) : state], null);
  }
};
markdown.transformers.escape_code = function markdown$transformers$escape_code(s) {
  return clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, s, /&/, "\x26amp;"), /\*/, "\x26#42;"), /\^/, "\x26#94;"), /\_/, "\x26#95;"), /\~/, 
  "\x26#126;"), /\</, "\x26lt;"), /\>/, "\x26gt;"), /\[/, "\x26#91;"), /\]/, "\x26#93;"), /\(/, "\x26#40;"), /\)/, "\x26#41;"), /\"/, "\x26quot;");
};
markdown.transformers.escape_delimiter = [cljs.core.str(cljs.core.char$.call(null, 254)), cljs.core.str(cljs.core.char$.call(null, 491))].join("");
markdown.transformers.freeze_string = function markdown$transformers$freeze_string(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___11264 = arguments.length;
  var i__5836__auto___11265 = 0;
  while (true) {
    if (i__5836__auto___11265 < len__5835__auto___11264) {
      args__5842__auto__.push(arguments[i__5836__auto___11265]);
      var G__11266 = i__5836__auto___11265 + 1;
      i__5836__auto___11265 = G__11266;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return markdown.transformers.freeze_string.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
markdown.transformers.freeze_string.cljs$core$IFn$_invoke$arity$variadic = function(args) {
  var state = cljs.core.last.call(null, args);
  var token = [cljs.core.str(markdown.transformers.escape_delimiter), cljs.core.str(cljs.core.count.call(null, (new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560)).cljs$core$IFn$_invoke$arity$1(state))), cljs.core.str(markdown.transformers.escape_delimiter)].join("");
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [token, cljs.core.assoc_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560), token], null), cljs.core.reduce.call(null, cljs.core.str, cljs.core.flatten.call(null, cljs.core.drop_last.call(null, args))))], null);
};
markdown.transformers.freeze_string.cljs$lang$maxFixedArity = 0;
markdown.transformers.freeze_string.cljs$lang$applyTo = function(seq11263) {
  return markdown.transformers.freeze_string.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq11263));
};
markdown.transformers.thaw_string = function markdown$transformers$thaw_string(text, state) {
  while (true) {
    var unfrozen_text = clojure.string.replace.call(null, text, cljs.core.re_pattern.call(null, [cljs.core.str(markdown.transformers.escape_delimiter), cljs.core.str("\\d+"), cljs.core.str(markdown.transformers.escape_delimiter)].join("")), function(text, state) {
      return function(p1__11267_SHARP_) {
        return cljs.core.get.call(null, (new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560)).cljs$core$IFn$_invoke$arity$1(state), p1__11267_SHARP_, p1__11267_SHARP_);
      };
    }(text, state));
    if (cljs.core._EQ_.call(null, text, unfrozen_text)) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [unfrozen_text, cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560))], null);
    } else {
      var G__11268 = unfrozen_text;
      var G__11269 = state;
      text = G__11268;
      state = G__11269;
      continue;
    }
    break;
  }
};
markdown.transformers.escaped_chars = function markdown$transformers$escaped_chars(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
    var or__4777__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }()) ? text : clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, clojure.string.replace.call(null, 
  text, /\\\\/, "\x26#92;"), /\\`/, "\x26#8216;"), /\\\*/, "\x26#42;"), /\\_/, "\x26#95;"), /\\\{/, "\x26#123;"), /\\\}/, "\x26#125;"), /\\\[/, "\x26#91;"), /\\\]/, "\x26#93;"), /\\\(/, "\x26#40;"), /\\\)/, "\x26#41;"), /\\#/, "\x26#35;"), /\\\+/, "\x26#43;"), /\\-/, "\x26#45;"), /\\\./, "\x26#46;"), /\\!/, "\x26#33;"), state], null);
};
markdown.transformers.separator = function markdown$transformers$separator(escape_QMARK_, text, open, close, separator__$1, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    var out = cljs.core.PersistentVector.EMPTY;
    var buf = cljs.core.PersistentVector.EMPTY;
    var tokens = cljs.core.partition_by.call(null, cljs.core.partial.call(null, cljs.core._EQ_, cljs.core.first.call(null, separator__$1)), cljs.core.seq.call(null, text));
    var cur_state = cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576), false);
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, tokens)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.call(null, cljs.core.into.call(null, cljs.core.truth_((new cljs.core.Keyword(null, "found-token", "found-token", 113525576)).cljs$core$IFn$_invoke$arity$1(cur_state)) ? cljs.core.into.call(null, out, separator__$1) : out, buf)), cljs.core.dissoc.call(null, cur_state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576))], null);
      } else {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "found-token", "found-token", 113525576)).cljs$core$IFn$_invoke$arity$1(cur_state))) {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, tokens), separator__$1)) {
            var G__11270 = cljs.core.vec.call(null, cljs.core.concat.call(null, out, cljs.core.seq.call(null, open), cljs.core.truth_(escape_QMARK_) ? cljs.core.seq.call(null, markdown.transformers.escape_code.call(null, clojure.string.join.call(null, buf))) : buf, cljs.core.seq.call(null, close)));
            var G__11271 = cljs.core.PersistentVector.EMPTY;
            var G__11272 = cljs.core.rest.call(null, tokens);
            var G__11273 = cljs.core.assoc.call(null, cur_state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576), false);
            out = G__11270;
            buf = G__11271;
            tokens = G__11272;
            cur_state = G__11273;
            continue;
          } else {
            var G__11274 = out;
            var G__11275 = cljs.core.into.call(null, buf, cljs.core.first.call(null, tokens));
            var G__11276 = cljs.core.rest.call(null, tokens);
            var G__11277 = cur_state;
            out = G__11274;
            buf = G__11275;
            tokens = G__11276;
            cur_state = G__11277;
            continue;
          }
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, tokens), separator__$1)) {
            var G__11278 = out;
            var G__11279 = buf;
            var G__11280 = cljs.core.rest.call(null, tokens);
            var G__11281 = cljs.core.assoc.call(null, cur_state, new cljs.core.Keyword(null, "found-token", "found-token", 113525576), true);
            out = G__11278;
            buf = G__11279;
            tokens = G__11280;
            cur_state = G__11281;
            continue;
          } else {
            var G__11282 = cljs.core.into.call(null, out, cljs.core.first.call(null, tokens));
            var G__11283 = buf;
            var G__11284 = cljs.core.rest.call(null, tokens);
            var G__11285 = cur_state;
            out = G__11282;
            buf = G__11283;
            tokens = G__11284;
            cur_state = G__11285;
            continue;
          }
        }
      }
      break;
    }
  }
};
markdown.transformers.strong = function markdown$transformers$strong(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3cstrong\x3e", "\x3c/strong\x3e", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*", "*"], null), state);
};
markdown.transformers.bold = function markdown$transformers$bold(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3cb\x3e", "\x3c/b\x3e", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["_", "_"], null), state);
};
markdown.transformers.em = function markdown$transformers$em(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3cem\x3e", "\x3c/em\x3e", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["*"], null), state);
};
markdown.transformers.italics = function markdown$transformers$italics(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3ci\x3e", "\x3c/i\x3e", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["_"], null), state);
};
markdown.transformers.inline_code = function markdown$transformers$inline_code(text, state) {
  return markdown.transformers.separator.call(null, true, text, "\x3ccode\x3e", "\x3c/code\x3e", new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`"], null), state);
};
markdown.transformers.strikethrough = function markdown$transformers$strikethrough(text, state) {
  return markdown.transformers.separator.call(null, false, text, "\x3cdel\x3e", "\x3c/del\x3e", new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["~", "~"], null), state);
};
markdown.transformers.superscript = function markdown$transformers$superscript(text, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    var tokens = cljs.core.partition_by.call(null, cljs.core.partial.call(null, cljs.core.contains_QMARK_, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [" ", null, "^", null], null), null)), text);
    var buf = cljs.core.PersistentVector.EMPTY;
    var remaining = tokens;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, remaining)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.call(null, buf), state], null);
      } else {
        if (cljs.core._EQ_.call(null, cljs.core.first.call(null, remaining), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, ["^"], null))) {
          var G__11286 = cljs.core.into.call(null, buf, cljs.core.concat.call(null, cljs.core.seq.call(null, "\x3csup\x3e"), cljs.core.second.call(null, remaining), cljs.core.seq.call(null, "\x3c/sup\x3e")));
          var G__11287 = cljs.core.drop.call(null, 2, remaining);
          buf = G__11286;
          remaining = G__11287;
          continue;
        } else {
          var G__11288 = cljs.core.into.call(null, buf, cljs.core.first.call(null, remaining));
          var G__11289 = cljs.core.rest.call(null, remaining);
          buf = G__11288;
          remaining = G__11289;
          continue;
        }
      }
      break;
    }
  }
};
markdown.transformers.heading_text = function markdown$transformers$heading_text(text) {
  return clojure.string.trim.call(null, clojure.string.join.call(null, cljs.core.take_while.call(null, function(p1__11291_SHARP_) {
    return cljs.core.not_EQ_.call(null, "#", p1__11291_SHARP_);
  }, cljs.core.drop_while.call(null, function(p1__11290_SHARP_) {
    return cljs.core._EQ_.call(null, "#", p1__11290_SHARP_) || cljs.core._EQ_.call(null, " ", p1__11290_SHARP_);
  }, text))));
};
markdown.transformers.heading_level = function markdown$transformers$heading_level(text) {
  var num_hashes = cljs.core.count.call(null, cljs.core.filter.call(null, function(p1__11292_SHARP_) {
    return cljs.core.not_EQ_.call(null, " ", p1__11292_SHARP_);
  }, cljs.core.take_while.call(null, function(p1__11293_SHARP_) {
    return cljs.core._EQ_.call(null, "#", p1__11293_SHARP_) || cljs.core._EQ_.call(null, " ", p1__11293_SHARP_);
  }, cljs.core.seq.call(null, text))));
  if (num_hashes > 0) {
    return num_hashes;
  } else {
    return null;
  }
};
markdown.transformers.make_heading = function markdown$transformers$make_heading(text, heading_anchors) {
  var temp__4423__auto__ = markdown.transformers.heading_level.call(null, text);
  if (cljs.core.truth_(temp__4423__auto__)) {
    var heading = temp__4423__auto__;
    var text__$1 = markdown.transformers.heading_text.call(null, text);
    return [cljs.core.str("\x3ch"), cljs.core.str(heading), cljs.core.str("\x3e"), cljs.core.str(cljs.core.truth_(heading_anchors) ? [cljs.core.str('\x3ca name\x3d"'), cljs.core.str(clojure.string.replace.call(null, clojure.string.lower_case.call(null, text__$1), " ", "\x26#95;")), cljs.core.str('"\x3e\x3c/a\x3e')].join("") : null), cljs.core.str(text__$1), cljs.core.str("\x3c/h"), cljs.core.str(heading), cljs.core.str("\x3e")].join("");
  } else {
    return null;
  }
};
markdown.transformers.heading = function markdown$transformers$heading(text, state) {
  if (cljs.core.truth_(function() {
    var or__4777__auto__ = (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(markdown.transformers.h1_QMARK_.call(null, markdown.transformers._STAR_next_line_STAR_))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3ch1\x3e"), cljs.core.str(text), cljs.core.str("\x3c/h1\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "heading", "heading", -1312171873), true)], null);
    } else {
      if (cljs.core.truth_(markdown.transformers.h2_QMARK_.call(null, markdown.transformers._STAR_next_line_STAR_))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3ch2\x3e"), cljs.core.str(text), cljs.core.str("\x3c/h2\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "heading", "heading", -1312171873), true)], null);
      } else {
        var temp__4423__auto__ = markdown.transformers.make_heading.call(null, text, (new cljs.core.Keyword(null, "heading-anchors", "heading-anchors", 1713527866)).cljs$core$IFn$_invoke$arity$1(state));
        if (cljs.core.truth_(temp__4423__auto__)) {
          var heading__$1 = temp__4423__auto__;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [heading__$1, cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "heading", "heading", -1312171873), true)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.br = function markdown$transformers$br(text, p__11294) {
  var map__11297 = p__11294;
  var map__11297__$1 = (!(map__11297 == null) ? map__11297.cljs$lang$protocol_mask$partition0$ & 64 || map__11297.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11297) : map__11297;
  var state = map__11297__$1;
  var code = cljs.core.get.call(null, map__11297__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var lists = cljs.core.get.call(null, map__11297__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", " "], null), cljs.core.take_last.call(null, 2, text)) && cljs.core.not.call(null, function() {
    var or__4777__auto__ = code;
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return lists;
    }
  }()) ? [cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.drop_last.call(null, 2, text))), cljs.core.str("\x3cbr /\x3e")].join("") : text, state], null);
};
markdown.transformers.autourl_transformer = function markdown$transformers$autourl_transformer(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state)) ? text : clojure.string.replace.call(null, text, /<https?:\/\/[-A-Za-z0-9+&@#\/%?=~_()|!:,.;]*[-A-Za-z0-9+&@#\/%=~_()|]>/, function(p1__11299_SHARP_) {
    var url = cljs.core.subs.call(null, p1__11299_SHARP_, 1, cljs.core.count.call(null, p1__11299_SHARP_) - 1);
    return [cljs.core.str('\x3ca href\x3d"'), cljs.core.str(url), cljs.core.str('"\x3e'), cljs.core.str(url), cljs.core.str("\x3c/a\x3e")].join("");
  }), state], null);
};
markdown.transformers.autoemail_transformer = function markdown$transformers$autoemail_transformer(text, state) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.truth_(function() {
    var or__4777__auto__ = (new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state);
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    }
  }()) ? text : clojure.string.replace.call(null, text, /<[\w._%+-]+@[\w.-]+\.[\w]{2,4}>/, function(p1__11300_SHARP_) {
    var encoded = cljs.core.truth_((new cljs.core.Keyword(null, "clojurescript", "clojurescript", -299769403)).cljs$core$IFn$_invoke$arity$1(state)) ? cljs.core.subs.call(null, p1__11300_SHARP_, 1, cljs.core.count.call(null, p1__11300_SHARP_) - 1) : cljs.core.apply.call(null, cljs.core.str, cljs.core.map.call(null, function(c) {
      if (cljs.core.rand.call(null) > .5) {
        return markdown.transformers.formatter.call(null, "\x26#x%02x;", c | 0);
      } else {
        return c;
      }
    }, cljs.core.subs.call(null, p1__11300_SHARP_, 1, cljs.core.count.call(null, p1__11300_SHARP_) - 1)));
    return [cljs.core.str('\x3ca href\x3d"mailto:'), cljs.core.str(encoded), cljs.core.str('"\x3e'), cljs.core.str(encoded), cljs.core.str("\x3c/a\x3e")].join("");
  }), state], null);
};
markdown.transformers.paragraph_text = function markdown$transformers$paragraph_text(last_line_empty_QMARK_, text) {
  if (cljs.core.truth_(function() {
    var and__4765__auto__ = cljs.core.not.call(null, last_line_empty_QMARK_);
    if (and__4765__auto__) {
      return cljs.core.not_empty.call(null, text);
    } else {
      return and__4765__auto__;
    }
  }())) {
    return [cljs.core.str(" "), cljs.core.str(text)].join("");
  } else {
    return text;
  }
};
markdown.transformers.paragraph = function markdown$transformers$paragraph(text, p__11301) {
  var map__11304 = p__11301;
  var map__11304__$1 = (!(map__11304 == null) ? map__11304.cljs$lang$protocol_mask$partition0$ & 64 || map__11304.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11304) : map__11304;
  var state = map__11304__$1;
  var eof = cljs.core.get.call(null, map__11304__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var heading = cljs.core.get.call(null, map__11304__$1, new cljs.core.Keyword(null, "heading", "heading", -1312171873));
  var hr = cljs.core.get.call(null, map__11304__$1, new cljs.core.Keyword(null, "hr", "hr", 1377740067));
  var code = cljs.core.get.call(null, map__11304__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var lists = cljs.core.get.call(null, map__11304__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var blockquote = cljs.core.get.call(null, map__11304__$1, new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190));
  var paragraph__$1 = cljs.core.get.call(null, map__11304__$1, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709));
  var last_line_empty_QMARK_ = cljs.core.get.call(null, map__11304__$1, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527));
  if (cljs.core.truth_(function() {
    var and__4765__auto__ = paragraph__$1;
    if (cljs.core.truth_(and__4765__auto__)) {
      return lists;
    } else {
      return and__4765__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/p\x3e"), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709), false)], null);
  } else {
    if (cljs.core.truth_(function() {
      var or__4777__auto__ = heading;
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        var or__4777__auto____$1 = hr;
        if (cljs.core.truth_(or__4777__auto____$1)) {
          return or__4777__auto____$1;
        } else {
          var or__4777__auto____$2 = code;
          if (cljs.core.truth_(or__4777__auto____$2)) {
            return or__4777__auto____$2;
          } else {
            var or__4777__auto____$3 = lists;
            if (cljs.core.truth_(or__4777__auto____$3)) {
              return or__4777__auto____$3;
            } else {
              return blockquote;
            }
          }
        }
      }
    }())) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
    } else {
      if (cljs.core.truth_(paragraph__$1)) {
        if (cljs.core.truth_(function() {
          var or__4777__auto__ = eof;
          if (cljs.core.truth_(or__4777__auto__)) {
            return or__4777__auto__;
          } else {
            return cljs.core.empty_QMARK_.call(null, clojure.string.trim.call(null, text));
          }
        }())) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.transformers.paragraph_text.call(null, last_line_empty_QMARK_, text)), cljs.core.str("\x3c/p\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709), false)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.paragraph_text.call(null, last_line_empty_QMARK_, text), state], null);
        }
      } else {
        if (cljs.core.truth_(function() {
          var and__4765__auto__ = cljs.core.not.call(null, eof);
          if (and__4765__auto__) {
            return last_line_empty_QMARK_;
          } else {
            return and__4765__auto__;
          }
        }())) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cp\x3e"), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "paragraph", "paragraph", 296707709), true, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.code = function markdown$transformers$code(text, p__11306) {
  var map__11309 = p__11306;
  var map__11309__$1 = (!(map__11309 == null) ? map__11309.cljs$lang$protocol_mask$partition0$ & 64 || map__11309.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11309) : map__11309;
  var state = map__11309__$1;
  var eof = cljs.core.get.call(null, map__11309__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var lists = cljs.core.get.call(null, map__11309__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var code__$1 = cljs.core.get.call(null, map__11309__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__11309__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  if (cljs.core.truth_(function() {
    var or__4777__auto__ = lists;
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return codeblock;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(code__$1)) {
      if (cljs.core.truth_(function() {
        var or__4777__auto__ = eof;
        if (cljs.core.truth_(or__4777__auto__)) {
          return or__4777__auto__;
        } else {
          return cljs.core.not_EQ_.call(null, "    ", clojure.string.join.call(null, cljs.core.take.call(null, 4, text)));
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\n\x3c/code\x3e\x3c/pre\x3e"), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), false, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\n"), cljs.core.str(markdown.transformers.escape_code.call(null, clojure.string.replace_first.call(null, text, /    /, "")))].join(""), state], null);
      }
    } else {
      if (cljs.core.empty_QMARK_.call(null, clojure.string.trim.call(null, text))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      } else {
        var num_spaces = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
        if (num_spaces > 3) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cpre\x3e\x3ccode\x3e"), cljs.core.str(markdown.transformers.escape_code.call(null, clojure.string.replace_first.call(null, text, /    /, "")))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), true)], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.codeblock = function markdown$transformers$codeblock(text, state) {
  var trimmed = clojure.string.trim.call(null, text);
  if (cljs.core.truth_(function() {
    var and__4765__auto__ = cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`", "`", "`"], null), cljs.core.take.call(null, 3, trimmed));
    if (and__4765__auto__) {
      return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
    } else {
      return and__4765__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/code\x3e\x3c/pre\x3e"), cljs.core.str(clojure.string.join.call(null, cljs.core.drop.call(null, 3, trimmed)))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), false, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855), false, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null)
    ;
  } else {
    if (cljs.core.truth_(function() {
      var and__4765__auto__ = cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`", "`", "`"], null), cljs.core.take_last.call(null, 3, trimmed));
      if (and__4765__auto__) {
        return (new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state);
      } else {
        return and__4765__auto__;
      }
    }())) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/code\x3e\x3c/pre\x3e"), cljs.core.str(clojure.string.join.call(null, cljs.core.drop_last.call(null, 3, trimmed)))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), false, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855), false, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], 
      null);
    } else {
      if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["`", "`", "`"], null), cljs.core.take.call(null, 3, trimmed))) {
        var vec__11312 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), cljs.core.drop.call(null, 3, trimmed));
        var lang = cljs.core.nth.call(null, vec__11312, 0, null);
        var code = cljs.core.nth.call(null, vec__11312, 1, null);
        var s = cljs.core.apply.call(null, cljs.core.str, cljs.core.rest.call(null, code));
        var formatter = (new cljs.core.Keyword(null, "code-style", "code-style", -2144009586)).cljs$core$IFn$_invoke$arity$1(state);
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cpre\x3e\x3ccode"), cljs.core.str(cljs.core.truth_(cljs.core.not_empty.call(null, lang)) ? [cljs.core.str(" "), cljs.core.str(cljs.core.truth_(formatter) ? formatter.call(null, clojure.string.join.call(null, lang)) : [cljs.core.str('class\x3d"'), cljs.core.str(clojure.string.join.call(null, lang)), cljs.core.str('"')].join(""))].join("") : null), cljs.core.str("\x3e"), cljs.core.str(markdown.transformers.escape_code.call(null, 
        cljs.core.empty_QMARK_.call(null, s) ? s : [cljs.core.str(s), cljs.core.str("\n")].join("")))].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "code", "code", 1586293142), true, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855), true)], null);
      } else {
        if (cljs.core.truth_((new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855)).cljs$core$IFn$_invoke$arity$1(state))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.transformers.escape_code.call(null, text)), cljs.core.str("\n")].join(""), state], null);
        } else {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
        }
      }
    }
  }
};
markdown.transformers.hr = function markdown$transformers$hr(text, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "code", "code", 1586293142)).cljs$core$IFn$_invoke$arity$1(state))) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if ((cljs.core.empty_QMARK_.call(null, cljs.core.drop_while.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [" ", null, "*", null], null), null), text)) || cljs.core.empty_QMARK_.call(null, cljs.core.drop_while.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [" ", null, "-", null], null), null), text)) || cljs.core.empty_QMARK_.call(null, cljs.core.drop_while.call(null, new cljs.core.PersistentHashSet(null, 
    new cljs.core.PersistentArrayMap(null, 2, [" ", null, "_", null], null), null), text))) && cljs.core.count.call(null, cljs.core.remove.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [" ", null], null), null), text)) > 2) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3chr/\x3e")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "hr", "hr", 1377740067), true)], null);
    } else {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
    }
  }
};
markdown.transformers.blockquote = function markdown$transformers$blockquote(text, p__11313) {
  var map__11316 = p__11313;
  var map__11316__$1 = (!(map__11316 == null) ? map__11316.cljs$lang$protocol_mask$partition0$ & 64 || map__11316.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11316) : map__11316;
  var state = map__11316__$1;
  var eof = cljs.core.get.call(null, map__11316__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var code = cljs.core.get.call(null, map__11316__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__11316__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var lists = cljs.core.get.call(null, map__11316__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  var trimmed = clojure.string.trim.call(null, text);
  if (cljs.core.truth_(function() {
    var or__4777__auto__ = code;
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      var or__4777__auto____$1 = codeblock;
      if (cljs.core.truth_(or__4777__auto____$1)) {
        return or__4777__auto____$1;
      } else {
        return lists;
      }
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_((new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190)).cljs$core$IFn$_invoke$arity$1(state))) {
      if (cljs.core.truth_(function() {
        var or__4777__auto__ = eof;
        if (cljs.core.truth_(or__4777__auto__)) {
          return or__4777__auto__;
        } else {
          return cljs.core.empty_QMARK_.call(null, trimmed);
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["\x3c/p\x3e\x3c/blockquote\x3e", cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190), false)], null);
      } else {
        if (cljs.core._EQ_.call(null, "\x3e", trimmed)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["\x3c/p\x3e\x3cp\x3e", state], null);
        } else {
          if (cljs.core._EQ_.call(null, "\x3e-", cljs.core.subs.call(null, trimmed, 0, 2))) {
            return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/p\x3e\x3cfooter\x3e"), cljs.core.str(cljs.core.subs.call(null, text, 2)), cljs.core.str("\x3c/footer\x3e\x3cp\x3e")].join(""), state], null);
          } else {
            if (cljs.core._EQ_.call(null, "\x3e", cljs.core.subs.call(null, trimmed, 0, 1))) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(cljs.core.subs.call(null, text, 1)), cljs.core.str(" ")].join(""), state], null);
            } else {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(text), cljs.core.str(" ")].join(""), state], null);
            }
          }
        }
      }
    } else {
      if (cljs.core._EQ_.call(null, "\x3e", cljs.core.first.call(null, text))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3cblockquote\x3e\x3cp\x3e"), cljs.core.str(clojure.string.join.call(null, cljs.core.rest.call(null, text))), cljs.core.str(" ")].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190), true)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      }
    }
  }
};
markdown.transformers.href = function markdown$transformers$href(title, link, state) {
  return markdown.transformers.freeze_string.call(null, cljs.core.seq.call(null, "\x3ca href\x3d'"), link, cljs.core.seq.call(null, "'\x3e"), title, cljs.core.seq.call(null, "\x3c/a\x3e"), state);
};
markdown.transformers.img = function markdown$transformers$img(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___11324 = arguments.length;
  var i__5836__auto___11325 = 0;
  while (true) {
    if (i__5836__auto___11325 < len__5835__auto___11324) {
      args__5842__auto__.push(arguments[i__5836__auto___11325]);
      var G__11326 = i__5836__auto___11325 + 1;
      i__5836__auto___11325 = G__11326;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 3 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(3), 0) : null;
  return markdown.transformers.img.cljs$core$IFn$_invoke$arity$variadic(arguments[0], arguments[1], arguments[2], argseq__5843__auto__);
};
markdown.transformers.img.cljs$core$IFn$_invoke$arity$variadic = function(alt, url, state, p__11322) {
  var vec__11323 = p__11322;
  var title = cljs.core.nth.call(null, vec__11323, 0, null);
  return markdown.transformers.freeze_string.call(null, cljs.core.seq.call(null, '\x3cimg src\x3d"'), url, cljs.core.seq.call(null, '" alt\x3d"'), alt, cljs.core.truth_(cljs.core.not_empty.call(null, title)) ? cljs.core.seq.call(null, cljs.core.apply.call(null, cljs.core.str, '" title\x3d', clojure.string.join.call(null, title), " /\x3e")) : cljs.core.seq.call(null, '" /\x3e'), state);
};
markdown.transformers.img.cljs$lang$maxFixedArity = 3;
markdown.transformers.img.cljs$lang$applyTo = function(seq11318) {
  var G__11319 = cljs.core.first.call(null, seq11318);
  var seq11318__$1 = cljs.core.next.call(null, seq11318);
  var G__11320 = cljs.core.first.call(null, seq11318__$1);
  var seq11318__$2 = cljs.core.next.call(null, seq11318__$1);
  var G__11321 = cljs.core.first.call(null, seq11318__$2);
  var seq11318__$3 = cljs.core.next.call(null, seq11318__$2);
  return markdown.transformers.img.cljs$core$IFn$_invoke$arity$variadic(G__11319, G__11320, G__11321, seq11318__$3);
};
markdown.transformers.handle_img_link = function markdown$transformers$handle_img_link(xs, state) {
  if (cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, ["[", "!", "["], null), cljs.core.take.call(null, 3, xs))) {
    var xs__$1 = cljs.core.drop.call(null, 3, xs);
    var vec__11331 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "]"), xs__$1);
    var alt = cljs.core.nth.call(null, vec__11331, 0, null);
    var xy = cljs.core.nth.call(null, vec__11331, 1, null);
    var vec__11332 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, ")"), cljs.core.drop.call(null, 2, xy));
    var url_title = cljs.core.nth.call(null, vec__11332, 0, null);
    var zy = cljs.core.nth.call(null, vec__11332, 1, null);
    var vec__11333 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), url_title);
    var url = cljs.core.nth.call(null, vec__11333, 0, null);
    var title = cljs.core.nth.call(null, vec__11333, 1, null);
    var vec__11334 = markdown.transformers.img.call(null, alt, url, state, cljs.core.not_empty.call(null, title));
    var new_text = cljs.core.nth.call(null, vec__11334, 0, null);
    var new_state = cljs.core.nth.call(null, vec__11334, 1, null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.concat.call(null, "[", new_text, cljs.core.rest.call(null, zy)), new_state], null);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xs, state], null);
  }
};
markdown.transformers.process_link_title = function markdown$transformers$process_link_title(title, state) {
  return cljs.core.first.call(null, cljs.core.reduce.call(null, function(p1__11336_SHARP_, p2__11335_SHARP_) {
    return cljs.core.apply.call(null, p2__11335_SHARP_, p1__11336_SHARP_);
  }, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [title, state], null), new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.italics, markdown.transformers.em, markdown.transformers.strong, markdown.transformers.bold, markdown.transformers.strikethrough], null)));
};
markdown.transformers.link = function markdown$transformers$link(text, p__11337) {
  var map__11348 = p__11337;
  var map__11348__$1 = (!(map__11348 == null) ? map__11348.cljs$lang$protocol_mask$partition0$ & 64 || map__11348.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11348) : map__11348;
  var state = map__11348__$1;
  var code = cljs.core.get.call(null, map__11348__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__11348__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  if (cljs.core.truth_(function() {
    var or__4777__auto__ = code;
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return codeblock;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    var out = cljs.core.PersistentVector.EMPTY;
    var tokens = cljs.core.seq.call(null, text);
    var loop_state = state;
    while (true) {
      if (cljs.core.empty_QMARK_.call(null, tokens)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.string.join.call(null, out), loop_state], null);
      } else {
        var vec__11350 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "["), tokens);
        var head = cljs.core.nth.call(null, vec__11350, 0, null);
        var xs = cljs.core.nth.call(null, vec__11350, 1, null);
        var vec__11351 = markdown.transformers.handle_img_link.call(null, xs, loop_state);
        var xs__$1 = cljs.core.nth.call(null, vec__11351, 0, null);
        var loop_state__$1 = cljs.core.nth.call(null, vec__11351, 1, null);
        var vec__11352 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "]"), xs__$1);
        var title = cljs.core.nth.call(null, vec__11352, 0, null);
        var ys = cljs.core.nth.call(null, vec__11352, 1, null);
        var vec__11353 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, "("), ys);
        var dud = cljs.core.nth.call(null, vec__11353, 0, null);
        var zs = cljs.core.nth.call(null, vec__11353, 1, null);
        var vec__11354 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, ")"), zs);
        var link__$1 = cljs.core.nth.call(null, vec__11354, 0, null);
        var tail = cljs.core.nth.call(null, vec__11354, 1, null);
        if (cljs.core.count.call(null, link__$1) < 2 || cljs.core.count.call(null, tail) < 1 || cljs.core.count.call(null, dud) > 1) {
          var G__11358 = cljs.core.concat.call(null, out, head, markdown.transformers.process_link_title.call(null, title, state), dud, link__$1);
          var G__11359 = tail;
          var G__11360 = loop_state__$1;
          out = G__11358;
          tokens = G__11359;
          loop_state = G__11360;
          continue;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.last.call(null, head), "!")) {
            var alt = cljs.core.rest.call(null, title);
            var vec__11355 = cljs.core.split_with.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), cljs.core.rest.call(null, link__$1));
            var url = cljs.core.nth.call(null, vec__11355, 0, null);
            var title__$1 = cljs.core.nth.call(null, vec__11355, 1, null);
            var title__$2 = markdown.transformers.process_link_title.call(null, clojure.string.join.call(null, cljs.core.rest.call(null, title__$1)), loop_state__$1);
            var vec__11356 = markdown.transformers.img.call(null, alt, url, loop_state__$1, title__$2);
            var img_text = cljs.core.nth.call(null, vec__11356, 0, null);
            var new_loop_state = cljs.core.nth.call(null, vec__11356, 1, null);
            var G__11361 = cljs.core.concat.call(null, cljs.core.butlast.call(null, head), img_text);
            var G__11362 = cljs.core.rest.call(null, tail);
            var G__11363 = new_loop_state;
            out = G__11361;
            tokens = G__11362;
            loop_state = G__11363;
            continue;
          } else {
            var vec__11357 = markdown.transformers.href.call(null, cljs.core.rest.call(null, markdown.transformers.process_link_title.call(null, title, state)), cljs.core.rest.call(null, link__$1), loop_state__$1);
            var link_text = cljs.core.nth.call(null, vec__11357, 0, null);
            var new_loop_state = cljs.core.nth.call(null, vec__11357, 1, null);
            var G__11364 = cljs.core.concat.call(null, out, head, link_text);
            var G__11365 = cljs.core.rest.call(null, tail);
            var G__11366 = new_loop_state;
            out = G__11364;
            tokens = G__11365;
            loop_state = G__11366;
            continue;
          }
        }
      }
      break;
    }
  }
};
markdown.transformers.reference = function markdown$transformers$reference(text) {
  return cljs.core.re_find.call(null, /^\[[a-zA-Z0-9 ]+\]:/, text);
};
markdown.transformers.parse_reference = function markdown$transformers$parse_reference(reference, start) {
  return clojure.string.split.call(null, clojure.string.trim.call(null, cljs.core.subs.call(null, reference, start)), /\s+/, 2);
};
markdown.transformers.parse_reference_link = function markdown$transformers$parse_reference_link(line, references) {
  var trimmed = clojure.string.trim.call(null, line);
  var temp__4425__auto__ = markdown.transformers.reference.call(null, trimmed);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var link = temp__4425__auto__;
    return cljs.core.swap_BANG_.call(null, references, cljs.core.assoc, cljs.core.subs.call(null, link, 0, cljs.core.count.call(null, link) - 1), markdown.transformers.parse_reference.call(null, trimmed, cljs.core.count.call(null, link) + 1));
  } else {
    return null;
  }
};
markdown.transformers.replace_reference_link = function markdown$transformers$replace_reference_link(references, reference) {
  var vec__11369 = clojure.string.split.call(null, reference, /\]\s*/, 2);
  var title = cljs.core.nth.call(null, vec__11369, 0, null);
  var id = cljs.core.nth.call(null, vec__11369, 1, null);
  var vec__11370 = cljs.core.get.call(null, references, id);
  var link = cljs.core.nth.call(null, vec__11370, 0, null);
  var alt = cljs.core.nth.call(null, vec__11370, 1, null);
  return [cljs.core.str("\x3ca href\x3d'"), cljs.core.str(link), cljs.core.str("'"), cljs.core.str(cljs.core.truth_(alt) ? [cljs.core.str(" title\x3d'"), cljs.core.str(cljs.core.subs.call(null, alt, 1, cljs.core.count.call(null, alt) - 1)), cljs.core.str("'")].join("") : null), cljs.core.str("\x3e"), cljs.core.str(cljs.core.subs.call(null, title, 1)), cljs.core.str("\x3c/a\x3e")].join("");
};
markdown.transformers.reference_link = function markdown$transformers$reference_link(text, p__11371) {
  var map__11374 = p__11371;
  var map__11374__$1 = (!(map__11374 == null) ? map__11374.cljs$lang$protocol_mask$partition0$ & 64 || map__11374.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11374) : map__11374;
  var state = map__11374__$1;
  var code = cljs.core.get.call(null, map__11374__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__11374__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var references = cljs.core.get.call(null, map__11374__$1, new cljs.core.Keyword(null, "references", "references", 882562509));
  if (cljs.core.truth_(function() {
    var or__4777__auto__ = references == null;
    if (or__4777__auto__) {
      return or__4777__auto__;
    } else {
      var or__4777__auto____$1 = code;
      if (cljs.core.truth_(or__4777__auto____$1)) {
        return or__4777__auto____$1;
      } else {
        return codeblock;
      }
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(markdown.transformers.reference.call(null, clojure.string.trim.call(null, text)))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", state], null);
    } else {
      var replaced = clojure.string.replace.call(null, text, /\[[^\]]+\]\s*\[[a-zA-Z0-9 ]+\]/, cljs.core.partial.call(null, markdown.transformers.replace_reference_link, references));
      if (cljs.core._EQ_.call(null, replaced, text)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      } else {
        return markdown.transformers.freeze_string.call(null, replaced, state);
      }
    }
  }
};
markdown.transformers.footnote = function markdown$transformers$footnote(text) {
  return cljs.core.re_find.call(null, /^\[\^[a-zA-Z0-9_-]+\]:/, text);
};
markdown.transformers.parse_footnote_link = function markdown$transformers$parse_footnote_link(line, footnotes) {
  var trimmed = clojure.string.trim.call(null, line);
  var temp__4425__auto__ = markdown.transformers.footnote.call(null, trimmed);
  if (cljs.core.truth_(temp__4425__auto__)) {
    var link = temp__4425__auto__;
    return cljs.core.swap_BANG_.call(null, footnotes, cljs.core.assoc_in, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "unprocessed", "unprocessed", 766771972), cljs.core.subs.call(null, link, 0, cljs.core.count.call(null, link) - 1)], null), markdown.transformers.parse_reference.call(null, trimmed, cljs.core.count.call(null, link) + 1));
  } else {
    return null;
  }
};
markdown.transformers.replace_footnote_link = function markdown$transformers$replace_footnote_link(footnotes, footnote) {
  var next_fn_id = (new cljs.core.Keyword(null, "next-fn-id", "next-fn-id", 738579636)).cljs$core$IFn$_invoke$arity$1(footnotes);
  var link = [cljs.core.str("#fn-"), cljs.core.str(next_fn_id)].join("");
  return [cljs.core.str("\x3ca href\x3d'"), cljs.core.str(link), cljs.core.str("' id\x3d'fnref"), cljs.core.str(next_fn_id), cljs.core.str("'\x3e\x3csup\x3e"), cljs.core.str(next_fn_id), cljs.core.str("\x3c/sup\x3e\x3c/a\x3e")].join("");
};
markdown.transformers.replace_all_footnote_links = function markdown$transformers$replace_all_footnote_links(text, p__11376) {
  while (true) {
    var map__11379 = p__11376;
    var map__11379__$1 = (!(map__11379 == null) ? map__11379.cljs$lang$protocol_mask$partition0$ & 64 || map__11379.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11379) : map__11379;
    var state = map__11379__$1;
    var footnotes = cljs.core.get.call(null, map__11379__$1, new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205));
    var matcher = /\[\^[a-zA-Z0-9_-]+\]/;
    var match = cljs.core.re_find.call(null, matcher, text);
    if (match == null) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
    } else {
      var next_text = clojure.string.replace_first.call(null, text, matcher, cljs.core.partial.call(null, markdown.transformers.replace_footnote_link, footnotes));
      var next_state = cljs.core.assoc_in.call(null, cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), new cljs.core.Keyword(null, "next-fn-id", "next-fn-id", 738579636)], null), cljs.core.inc), new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), new cljs.core.Keyword(null, 
      "processed", "processed", 800622264), cljs.core.get_in.call(null, state, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), new cljs.core.Keyword(null, "next-fn-id", "next-fn-id", 738579636)], null))], null), cljs.core.get_in.call(null, state, new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), 
      new cljs.core.Keyword(null, "unprocessed", "unprocessed", 766771972), match], null)));
      var G__11381 = next_text;
      var G__11382 = next_state;
      text = G__11381;
      p__11376 = G__11382;
      continue;
    }
    break;
  }
};
markdown.transformers.footnote_link = function markdown$transformers$footnote_link(text, p__11383) {
  var map__11387 = p__11383;
  var map__11387__$1 = (!(map__11387 == null) ? map__11387.cljs$lang$protocol_mask$partition0$ & 64 || map__11387.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11387) : map__11387;
  var state = map__11387__$1;
  var code = cljs.core.get.call(null, map__11387__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__11387__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var footnotes = cljs.core.get.call(null, map__11387__$1, new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205));
  if (cljs.core.truth_(function() {
    var or__4777__auto__ = (new cljs.core.Keyword(null, "unprocessed", "unprocessed", 766771972)).cljs$core$IFn$_invoke$arity$1(footnotes) == null;
    if (or__4777__auto__) {
      return or__4777__auto__;
    } else {
      var or__4777__auto____$1 = code;
      if (cljs.core.truth_(or__4777__auto____$1)) {
        return or__4777__auto____$1;
      } else {
        return codeblock;
      }
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  } else {
    if (cljs.core.truth_(markdown.transformers.footnote.call(null, clojure.string.trim.call(null, text)))) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", state], null);
    } else {
      var vec__11389 = markdown.transformers.replace_all_footnote_links.call(null, text, state);
      var text__$1 = cljs.core.nth.call(null, vec__11389, 0, null);
      var state__$1 = cljs.core.nth.call(null, vec__11389, 1, null);
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text__$1, state__$1], null);
    }
  }
};
markdown.transformers.footer = function markdown$transformers$footer(footnotes) {
  if (cljs.core.empty_QMARK_.call(null, (new cljs.core.Keyword(null, "processed", "processed", 800622264)).cljs$core$IFn$_invoke$arity$1(footnotes))) {
    return "";
  } else {
    return function(p1__11390_SHARP_) {
      return [cljs.core.str("\x3col\x3e"), cljs.core.str(p1__11390_SHARP_), cljs.core.str("\x3c/ol\x3e")].join("");
    }.call(null, cljs.core.reduce.call(null, function(footnotes__$1, p__11393) {
      var vec__11394 = p__11393;
      var id = cljs.core.nth.call(null, vec__11394, 0, null);
      var label = cljs.core.nth.call(null, vec__11394, 1, null);
      return [cljs.core.str(footnotes__$1), cljs.core.str("\x3cli id\x3d'fn-"), cljs.core.str(id), cljs.core.str("'\x3e"), cljs.core.str(cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, " ", label))), cljs.core.str("\x3ca href\x3d'#fnref"), cljs.core.str(id), cljs.core.str("'\x3e\x26#8617;\x3c/a\x3e\x3c/li\x3e")].join("");
    }, "", cljs.core.into.call(null, cljs.core.sorted_map.call(null), (new cljs.core.Keyword(null, "processed", "processed", 800622264)).cljs$core$IFn$_invoke$arity$1(footnotes))));
  }
};
markdown.transformers.close_lists = function markdown$transformers$close_lists(lists) {
  return clojure.string.join.call(null, function() {
    var iter__5549__auto__ = function markdown$transformers$close_lists_$_iter__11403(s__11404) {
      return new cljs.core.LazySeq(null, function() {
        var s__11404__$1 = s__11404;
        while (true) {
          var temp__4425__auto__ = cljs.core.seq.call(null, s__11404__$1);
          if (temp__4425__auto__) {
            var s__11404__$2 = temp__4425__auto__;
            if (cljs.core.chunked_seq_QMARK_.call(null, s__11404__$2)) {
              var c__5547__auto__ = cljs.core.chunk_first.call(null, s__11404__$2);
              var size__5548__auto__ = cljs.core.count.call(null, c__5547__auto__);
              var b__11406 = cljs.core.chunk_buffer.call(null, size__5548__auto__);
              if (function() {
                var i__11405 = 0;
                while (true) {
                  if (i__11405 < size__5548__auto__) {
                    var vec__11409 = cljs.core._nth.call(null, c__5547__auto__, i__11405);
                    var list_type = cljs.core.nth.call(null, vec__11409, 0, null);
                    cljs.core.chunk_append.call(null, b__11406, [cljs.core.str("\x3c/li\x3e\x3c/"), cljs.core.str(cljs.core.name.call(null, list_type)), cljs.core.str("\x3e")].join(""));
                    var G__11411 = i__11405 + 1;
                    i__11405 = G__11411;
                    continue;
                  } else {
                    return true;
                  }
                  break;
                }
              }()) {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11406), markdown$transformers$close_lists_$_iter__11403.call(null, cljs.core.chunk_rest.call(null, s__11404__$2)));
              } else {
                return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__11406), null);
              }
            } else {
              var vec__11410 = cljs.core.first.call(null, s__11404__$2);
              var list_type = cljs.core.nth.call(null, vec__11410, 0, null);
              return cljs.core.cons.call(null, [cljs.core.str("\x3c/li\x3e\x3c/"), cljs.core.str(cljs.core.name.call(null, list_type)), cljs.core.str("\x3e")].join(""), markdown$transformers$close_lists_$_iter__11403.call(null, cljs.core.rest.call(null, s__11404__$2)));
            }
          } else {
            return null;
          }
          break;
        }
      }, null, null);
    };
    return iter__5549__auto__.call(null, lists);
  }());
};
markdown.transformers.add_row = function markdown$transformers$add_row(row_type, list_type, num_indents, indents, content, state) {
  if (cljs.core.truth_(list_type)) {
    if (num_indents < indents) {
      var lists_to_close = cljs.core.take_while.call(null, function(p1__11412_SHARP_) {
        return cljs.core.second.call(null, p1__11412_SHARP_) > num_indents;
      }, cljs.core.reverse.call(null, (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state)));
      var remaining_lists = cljs.core.vec.call(null, cljs.core.drop_last.call(null, cljs.core.count.call(null, lists_to_close), (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state)));
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, cljs.core.str, markdown.transformers.close_lists.call(null, lists_to_close), "\x3c/li\x3e\x3cli\x3e", content), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684), num_indents > cljs.core.second.call(null, cljs.core.last.call(null, remaining_lists)) ? cljs.core.conj.call(null, remaining_lists, new cljs.core.PersistentVector(null, 2, 5, 
      cljs.core.PersistentVector.EMPTY_NODE, [row_type, num_indents], null)) : remaining_lists)], null);
    } else {
      if (num_indents > indents) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c"), cljs.core.str(cljs.core.name.call(null, row_type)), cljs.core.str("\x3e\x3cli\x3e"), cljs.core.str(content)].join(""), cljs.core.update_in.call(null, state, new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "lists", "lists", -884730684)], null), cljs.core.conj, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, 
        [row_type, num_indents], null))], null);
      } else {
        if (cljs.core._EQ_.call(null, num_indents, indents)) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c/li\x3e\x3cli\x3e"), cljs.core.str(content)].join(""), state], null);
        } else {
          return null;
        }
      }
    }
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str("\x3c"), cljs.core.str(cljs.core.name.call(null, row_type)), cljs.core.str("\x3e\x3cli\x3e"), cljs.core.str(content)].join(""), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684), new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [row_type, 
    num_indents], null)], null))], null);
  }
};
markdown.transformers.ul = function markdown$transformers$ul(text, state) {
  var vec__11414 = cljs.core.last.call(null, (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state));
  var list_type = cljs.core.nth.call(null, vec__11414, 0, null);
  var indents = cljs.core.nth.call(null, vec__11414, 1, null);
  var num_indents = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
  var content = clojure.string.trim.call(null, markdown.transformers._STAR_substring_STAR_.call(null, text, num_indents + 1));
  return markdown.transformers.add_row.call(null, new cljs.core.Keyword(null, "ul", "ul", -1349521403), list_type, num_indents, indents, function() {
    var or__4777__auto__ = markdown.transformers.make_heading.call(null, content, false);
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return content;
    }
  }(), state);
};
markdown.transformers.ol = function markdown$transformers$ol(text, state) {
  var vec__11416 = cljs.core.last.call(null, (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state));
  var list_type = cljs.core.nth.call(null, vec__11416, 0, null);
  var indents = cljs.core.nth.call(null, vec__11416, 1, null);
  var num_indents = cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
  var content = clojure.string.trim.call(null, clojure.string.join.call(null, cljs.core.drop_while.call(null, cljs.core.partial.call(null, cljs.core.not_EQ_, " "), clojure.string.trim.call(null, text))));
  return markdown.transformers.add_row.call(null, new cljs.core.Keyword(null, "ol", "ol", 932524051), list_type, num_indents, indents, function() {
    var or__4777__auto__ = markdown.transformers.make_heading.call(null, content, false);
    if (cljs.core.truth_(or__4777__auto__)) {
      return or__4777__auto__;
    } else {
      return content;
    }
  }(), state);
};
markdown.transformers.li = function markdown$transformers$li(text, p__11417) {
  var map__11420 = p__11417;
  var map__11420__$1 = (!(map__11420 == null) ? map__11420.cljs$lang$protocol_mask$partition0$ & 64 || map__11420.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__11420) : map__11420;
  var state = map__11420__$1;
  var code = cljs.core.get.call(null, map__11420__$1, new cljs.core.Keyword(null, "code", "code", 1586293142));
  var codeblock = cljs.core.get.call(null, map__11420__$1, new cljs.core.Keyword(null, "codeblock", "codeblock", -851153855));
  var last_line_empty_QMARK_ = cljs.core.get.call(null, map__11420__$1, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527));
  var eof = cljs.core.get.call(null, map__11420__$1, new cljs.core.Keyword(null, "eof", "eof", -489063237));
  var lists = cljs.core.get.call(null, map__11420__$1, new cljs.core.Keyword(null, "lists", "lists", -884730684));
  if (cljs.core.truth_(function() {
    var and__4765__auto__ = last_line_empty_QMARK_;
    if (cljs.core.truth_(and__4765__auto__)) {
      return clojure.string.blank_QMARK_.call(null, text);
    } else {
      return and__4765__auto__;
    }
  }())) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.transformers.close_lists.call(null, cljs.core.reverse.call(null, lists))), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684)), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
  } else {
    if (cljs.core.truth_(function() {
      var or__4777__auto__ = code;
      if (cljs.core.truth_(or__4777__auto__)) {
        return or__4777__auto__;
      } else {
        return codeblock;
      }
    }())) {
      if (cljs.core.truth_(function() {
        var and__4765__auto__ = lists;
        if (cljs.core.truth_(and__4765__auto__)) {
          var or__4777__auto__ = last_line_empty_QMARK_;
          if (cljs.core.truth_(or__4777__auto__)) {
            return or__4777__auto__;
          } else {
            return eof;
          }
        } else {
          return and__4765__auto__;
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [[cljs.core.str(markdown.transformers.close_lists.call(null, cljs.core.reverse.call(null, lists))), cljs.core.str(text)].join(""), cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684)), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), false)], null);
      } else {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
      }
    } else {
      if (cljs.core.truth_(function() {
        var and__4765__auto__ = cljs.core.not.call(null, eof);
        if (and__4765__auto__) {
          var and__4765__auto____$1 = lists;
          if (cljs.core.truth_(and__4765__auto____$1)) {
            return clojure.string.blank_QMARK_.call(null, text);
          } else {
            return and__4765__auto____$1;
          }
        } else {
          return and__4765__auto__;
        }
      }())) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), true)], null);
      } else {
        var indents = cljs.core.truth_(last_line_empty_QMARK_) ? 0 : cljs.core.count.call(null, cljs.core.take_while.call(null, cljs.core.partial.call(null, cljs.core._EQ_, " "), text));
        var trimmed = clojure.string.trim.call(null, text);
        var in_list_QMARK_ = (new cljs.core.Keyword(null, "lists", "lists", -884730684)).cljs$core$IFn$_invoke$arity$1(state);
        if (cljs.core.truth_(cljs.core.re_find.call(null, /^[\*\+-] /, trimmed))) {
          return markdown.transformers.ul.call(null, cljs.core.truth_(in_list_QMARK_) ? text : trimmed, state);
        } else {
          if (cljs.core.truth_(cljs.core.re_find.call(null, /^[0-9]+\. /, trimmed))) {
            return markdown.transformers.ol.call(null, cljs.core.truth_(in_list_QMARK_) ? text : trimmed, state);
          } else {
            if (indents > 0) {
              return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
            } else {
              if (cljs.core.truth_(function() {
                var and__4765__auto__ = function() {
                  var or__4777__auto__ = eof;
                  if (cljs.core.truth_(or__4777__auto__)) {
                    return or__4777__auto__;
                  } else {
                    return last_line_empty_QMARK_;
                  }
                }();
                if (cljs.core.truth_(and__4765__auto__)) {
                  return cljs.core.not_empty.call(null, lists);
                } else {
                  return and__4765__auto__;
                }
              }())) {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.close_lists.call(null, cljs.core.reverse.call(null, lists)), cljs.core.assoc.call(null, state, new cljs.core.Keyword(null, "lists", "lists", -884730684), cljs.core.PersistentVector.EMPTY, new cljs.core.Keyword(null, "buf", "buf", -213913340), text)], null);
              } else {
                return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
              }
            }
          }
        }
      }
    }
  }
};
markdown.transformers.thaw_strings = function markdown$transformers$thaw_strings(text, state) {
  if (cljs.core.truth_((new cljs.core.Keyword(null, "frozen-strings", "frozen-strings", -1410661560)).cljs$core$IFn$_invoke$arity$1(state))) {
    return markdown.transformers.thaw_string.call(null, text, state);
  } else {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [text, state], null);
  }
};
markdown.transformers.parse_metadata_line = function markdown$transformers$parse_metadata_line(line) {
  if (cljs.core.truth_(line)) {
    var vec__11424 = cljs.core.re_matches.call(null, /^([0-9A-Za-z_-]*):(.*)$/, line);
    var _ = cljs.core.nth.call(null, vec__11424, 0, null);
    var key = cljs.core.nth.call(null, vec__11424, 1, null);
    var val = cljs.core.nth.call(null, vec__11424, 2, null);
    var vec__11425 = cljs.core.re_matches.call(null, /^    (.*)$/, line);
    var ___$1 = cljs.core.nth.call(null, vec__11425, 0, null);
    var next_val = cljs.core.nth.call(null, vec__11425, 1, null);
    if (cljs.core.not_EQ_.call(null, clojure.string.trim.call(null, line), "")) {
      if (cljs.core.truth_(key)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, clojure.string.lower_case.call(null, key)), val], null);
      } else {
        if (cljs.core.truth_(next_val)) {
          return line;
        } else {
          return null;
        }
      }
    } else {
      return null;
    }
  } else {
    return null;
  }
};
markdown.transformers.flatten_metadata = function markdown$transformers$flatten_metadata(metadata) {
  if (cljs.core.count.call(null, metadata) > 0) {
    var acc = cljs.core.PersistentArrayMap.EMPTY;
    var remain = metadata;
    var prev_key = null;
    while (true) {
      if (!cljs.core.empty_QMARK_.call(null, remain)) {
        var data = cljs.core.first.call(null, remain);
        var vec__11427 = cljs.core.sequential_QMARK_.call(null, data) ? data : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [prev_key, data], null);
        var key = cljs.core.nth.call(null, vec__11427, 0, null);
        var val = cljs.core.nth.call(null, vec__11427, 1, null);
        var prev_val = cljs.core.get.call(null, acc, key, cljs.core.PersistentVector.EMPTY);
        var postfix = cljs.core._EQ_.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [" ", " "], null), cljs.core.take_last.call(null, 2, val)) ? "\n" : "";
        var norm_val = [cljs.core.str(clojure.string.trim.call(null, val)), cljs.core.str(postfix)].join("");
        var new_val = !cljs.core.empty_QMARK_.call(null, norm_val) ? cljs.core.conj.call(null, prev_val, norm_val) : prev_val;
        var G__11428 = cljs.core.merge.call(null, acc, cljs.core.PersistentArrayMap.fromArray([key, new_val], true, false));
        var G__11429 = cljs.core.rest.call(null, remain);
        var G__11430 = key;
        acc = G__11428;
        remain = G__11429;
        prev_key = G__11430;
        continue;
      } else {
        return acc;
      }
      break;
    }
  } else {
    return null;
  }
};
markdown.transformers.parse_metadata_headers = function markdown$transformers$parse_metadata_headers(lines_seq) {
  if (cljs.core.sequential_QMARK_.call(null, lines_seq)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "sequential?", "sequential?", 1102351463, null), new cljs.core.Symbol(null, "lines-seq", "lines-seq", 1799675591, null))))].join(""));
  }
  if (cljs.core.every_QMARK_.call(null, cljs.core.string_QMARK_, lines_seq)) {
  } else {
    throw new Error([cljs.core.str("Assert failed: "), cljs.core.str(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "every?", "every?", 2083724064, null), new cljs.core.Symbol(null, "string?", "string?", -1129175764, null), new cljs.core.Symbol(null, "lines-seq", "lines-seq", 1799675591, null))))].join(""));
  }
  return cljs.core.reduce.call(null, function(acc, line) {
    var temp__4423__auto__ = markdown.transformers.parse_metadata_line.call(null, line);
    if (cljs.core.truth_(temp__4423__auto__)) {
      var parsed = temp__4423__auto__;
      return cljs.core.conj.call(null, acc, parsed);
    } else {
      return cljs.core.reduced.call(null, markdown.transformers.flatten_metadata.call(null, acc));
    }
  }, cljs.core.PersistentVector.EMPTY, lines_seq);
};
markdown.transformers.transformer_vector = new cljs.core.PersistentVector(null, 23, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.empty_line, markdown.transformers.codeblock, markdown.transformers.code, markdown.transformers.escaped_chars, markdown.transformers.inline_code, markdown.transformers.autoemail_transformer, markdown.transformers.autourl_transformer, markdown.transformers.link, markdown.transformers.reference_link, markdown.transformers.footnote_link, markdown.transformers.hr, 
markdown.transformers.li, markdown.transformers.heading, markdown.transformers.italics, markdown.transformers.em, markdown.transformers.strong, markdown.transformers.bold, markdown.transformers.strikethrough, markdown.transformers.superscript, markdown.transformers.blockquote, markdown.transformers.paragraph, markdown.transformers.br, markdown.transformers.thaw_strings], null);
goog.provide("markdown.core");
goog.require("cljs.core");
goog.require("markdown.transformers");
markdown.core.init_transformer = function markdown$core$init_transformer(p__13084) {
  var map__13091 = p__13084;
  var map__13091__$1 = (!(map__13091 == null) ? map__13091.cljs$lang$protocol_mask$partition0$ & 64 || map__13091.cljs$core$ISeq$ ? true : false : false) ? cljs.core.apply.call(null, cljs.core.hash_map, map__13091) : map__13091;
  var replacement_transformers = cljs.core.get.call(null, map__13091__$1, new cljs.core.Keyword(null, "replacement-transformers", "replacement-transformers", -2028552897));
  var custom_transformers = cljs.core.get.call(null, map__13091__$1, new cljs.core.Keyword(null, "custom-transformers", "custom-transformers", 1440601790));
  return function(map__13091, map__13091__$1, replacement_transformers, custom_transformers) {
    return function(html, line, next_line, state) {
      var _STAR_next_line_STAR_13093 = markdown.transformers._STAR_next_line_STAR_;
      markdown.transformers._STAR_next_line_STAR_ = next_line;
      try {
        var vec__13094 = cljs.core.reduce.call(null, function(_STAR_next_line_STAR_13093, map__13091, map__13091__$1, replacement_transformers, custom_transformers) {
          return function(p__13095, transformer) {
            var vec__13096 = p__13095;
            var text = cljs.core.nth.call(null, vec__13096, 0, null);
            var state__$1 = cljs.core.nth.call(null, vec__13096, 1, null);
            return transformer.call(null, text, state__$1);
          };
        }(_STAR_next_line_STAR_13093, map__13091, map__13091__$1, replacement_transformers, custom_transformers), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [line, state], null), function() {
          var or__4777__auto__ = replacement_transformers;
          if (cljs.core.truth_(or__4777__auto__)) {
            return or__4777__auto__;
          } else {
            return cljs.core.into.call(null, markdown.transformers.transformer_vector, custom_transformers);
          }
        }());
        var text = cljs.core.nth.call(null, vec__13094, 0, null);
        var new_state = cljs.core.nth.call(null, vec__13094, 1, null);
        html.append(text);
        return new_state;
      } finally {
        markdown.transformers._STAR_next_line_STAR_ = _STAR_next_line_STAR_13093;
      }
    };
  }(map__13091, map__13091__$1, replacement_transformers, custom_transformers);
};
markdown.core.format = function markdown$core$format(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___13099 = arguments.length;
  var i__5836__auto___13100 = 0;
  while (true) {
    if (i__5836__auto___13100 < len__5835__auto___13099) {
      args__5842__auto__.push(arguments[i__5836__auto___13100]);
      var G__13101 = i__5836__auto___13100 + 1;
      i__5836__auto___13100 = G__13101;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 1 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(1), 0) : null;
  return markdown.core.format.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5843__auto__);
};
markdown.core.format.cljs$core$IFn$_invoke$arity$variadic = function(fmt, args) {
  return cljs.core.apply.call(null, goog.string.format, fmt, args);
};
markdown.core.format.cljs$lang$maxFixedArity = 1;
markdown.core.format.cljs$lang$applyTo = function(seq13097) {
  var G__13098 = cljs.core.first.call(null, seq13097);
  var seq13097__$1 = cljs.core.next.call(null, seq13097);
  return markdown.core.format.cljs$core$IFn$_invoke$arity$variadic(G__13098, seq13097__$1);
};
markdown.core.parse_references = function markdown$core$parse_references(lines) {
  var references = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var seq__13106_13110 = cljs.core.seq.call(null, lines);
  var chunk__13107_13111 = null;
  var count__13108_13112 = 0;
  var i__13109_13113 = 0;
  while (true) {
    if (i__13109_13113 < count__13108_13112) {
      var line_13114 = cljs.core._nth.call(null, chunk__13107_13111, i__13109_13113);
      markdown.transformers.parse_reference_link.call(null, line_13114, references);
      var G__13115 = seq__13106_13110;
      var G__13116 = chunk__13107_13111;
      var G__13117 = count__13108_13112;
      var G__13118 = i__13109_13113 + 1;
      seq__13106_13110 = G__13115;
      chunk__13107_13111 = G__13116;
      count__13108_13112 = G__13117;
      i__13109_13113 = G__13118;
      continue;
    } else {
      var temp__4425__auto___13119 = cljs.core.seq.call(null, seq__13106_13110);
      if (temp__4425__auto___13119) {
        var seq__13106_13120__$1 = temp__4425__auto___13119;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13106_13120__$1)) {
          var c__5580__auto___13121 = cljs.core.chunk_first.call(null, seq__13106_13120__$1);
          var G__13122 = cljs.core.chunk_rest.call(null, seq__13106_13120__$1);
          var G__13123 = c__5580__auto___13121;
          var G__13124 = cljs.core.count.call(null, c__5580__auto___13121);
          var G__13125 = 0;
          seq__13106_13110 = G__13122;
          chunk__13107_13111 = G__13123;
          count__13108_13112 = G__13124;
          i__13109_13113 = G__13125;
          continue;
        } else {
          var line_13126 = cljs.core.first.call(null, seq__13106_13120__$1);
          markdown.transformers.parse_reference_link.call(null, line_13126, references);
          var G__13127 = cljs.core.next.call(null, seq__13106_13120__$1);
          var G__13128 = null;
          var G__13129 = 0;
          var G__13130 = 0;
          seq__13106_13110 = G__13127;
          chunk__13107_13111 = G__13128;
          count__13108_13112 = G__13129;
          i__13109_13113 = G__13130;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.deref.call(null, references);
};
markdown.core.parse_footnotes = function markdown$core$parse_footnotes(lines) {
  var footnotes = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "next-fn-id", "next-fn-id", 738579636), 1, new cljs.core.Keyword(null, "processed", "processed", 800622264), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "unprocessed", "unprocessed", 766771972), cljs.core.PersistentArrayMap.EMPTY], null));
  var seq__13135_13139 = cljs.core.seq.call(null, lines);
  var chunk__13136_13140 = null;
  var count__13137_13141 = 0;
  var i__13138_13142 = 0;
  while (true) {
    if (i__13138_13142 < count__13137_13141) {
      var line_13143 = cljs.core._nth.call(null, chunk__13136_13140, i__13138_13142);
      markdown.transformers.parse_footnote_link.call(null, line_13143, footnotes);
      var G__13144 = seq__13135_13139;
      var G__13145 = chunk__13136_13140;
      var G__13146 = count__13137_13141;
      var G__13147 = i__13138_13142 + 1;
      seq__13135_13139 = G__13144;
      chunk__13136_13140 = G__13145;
      count__13137_13141 = G__13146;
      i__13138_13142 = G__13147;
      continue;
    } else {
      var temp__4425__auto___13148 = cljs.core.seq.call(null, seq__13135_13139);
      if (temp__4425__auto___13148) {
        var seq__13135_13149__$1 = temp__4425__auto___13148;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__13135_13149__$1)) {
          var c__5580__auto___13150 = cljs.core.chunk_first.call(null, seq__13135_13149__$1);
          var G__13151 = cljs.core.chunk_rest.call(null, seq__13135_13149__$1);
          var G__13152 = c__5580__auto___13150;
          var G__13153 = cljs.core.count.call(null, c__5580__auto___13150);
          var G__13154 = 0;
          seq__13135_13139 = G__13151;
          chunk__13136_13140 = G__13152;
          count__13137_13141 = G__13153;
          i__13138_13142 = G__13154;
          continue;
        } else {
          var line_13155 = cljs.core.first.call(null, seq__13135_13149__$1);
          markdown.transformers.parse_footnote_link.call(null, line_13155, footnotes);
          var G__13156 = cljs.core.next.call(null, seq__13135_13149__$1);
          var G__13157 = null;
          var G__13158 = 0;
          var G__13159 = 0;
          seq__13135_13139 = G__13156;
          chunk__13136_13140 = G__13157;
          count__13137_13141 = G__13158;
          i__13138_13142 = G__13159;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return cljs.core.deref.call(null, footnotes);
};
markdown.core.parse_metadata = function markdown$core$parse_metadata(lines) {
  var vec__13162 = cljs.core.split_with.call(null, function(p1__13160_SHARP_) {
    return cljs.core.not_empty.call(null, p1__13160_SHARP_.trim());
  }, lines);
  var metadata = cljs.core.nth.call(null, vec__13162, 0, null);
  var lines__$1 = cljs.core.nth.call(null, vec__13162, 1, null);
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [markdown.transformers.parse_metadata_headers.call(null, metadata), lines__$1], null);
};
markdown.core.md_to_html_string_STAR_ = function markdown$core$md_to_html_string_STAR_(text, params) {
  var _STAR_substring_STAR_13170 = markdown.transformers._STAR_substring_STAR_;
  var formatter13171 = markdown.transformers.formatter;
  markdown.transformers._STAR_substring_STAR_ = function(_STAR_substring_STAR_13170, formatter13171) {
    return function(s, n) {
      return cljs.core.apply.call(null, cljs.core.str, cljs.core.drop.call(null, n, s));
    };
  }(_STAR_substring_STAR_13170, formatter13171);
  markdown.transformers.formatter = markdown.core.format;
  try {
    var params__$1 = cljs.core.truth_(params) ? cljs.core.apply.call(null, cljs.core.partial.call(null, cljs.core.assoc, cljs.core.PersistentArrayMap.EMPTY), params) : null;
    var lines = [cljs.core.str(text), cljs.core.str("\n")].join("").split("\n");
    var html = new goog.string.StringBuffer("");
    var references = cljs.core.truth_((new cljs.core.Keyword(null, "reference-links?", "reference-links?", -2003778981)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? markdown.core.parse_references.call(null, lines) : null;
    var footnotes = cljs.core.truth_((new cljs.core.Keyword(null, "footnotes?", "footnotes?", -1590157845)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? markdown.core.parse_footnotes.call(null, lines) : null;
    var vec__13172 = cljs.core.truth_((new cljs.core.Keyword(null, "parse-meta?", "parse-meta?", -1938948742)).cljs$core$IFn$_invoke$arity$1(params__$1)) ? markdown.core.parse_metadata.call(null, lines) : new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, lines], null);
    var metadata = cljs.core.nth.call(null, vec__13172, 0, null);
    var lines__$1 = cljs.core.nth.call(null, vec__13172, 1, null);
    var transformer = markdown.core.init_transformer.call(null, params__$1);
    var G__13174_13177 = lines__$1;
    var vec__13175_13178 = G__13174_13177;
    var line_13179 = cljs.core.nth.call(null, vec__13175_13178, 0, null);
    var more_13180 = cljs.core.nthnext.call(null, vec__13175_13178, 1);
    var state_13181 = cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "clojurescript", "clojurescript", -299769403), true, new cljs.core.Keyword(null, "references", "references", 882562509), references, new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205), footnotes, new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), true], null), params__$1);
    var G__13174_13182__$1 = G__13174_13177;
    var state_13183__$1 = state_13181;
    while (true) {
      var vec__13176_13184 = G__13174_13182__$1;
      var line_13185__$1 = cljs.core.nth.call(null, vec__13176_13184, 0, null);
      var more_13186__$1 = cljs.core.nthnext.call(null, vec__13176_13184, 1);
      var state_13187__$2 = state_13183__$1;
      var state_13188__$3 = cljs.core.truth_((new cljs.core.Keyword(null, "buf", "buf", -213913340)).cljs$core$IFn$_invoke$arity$1(state_13187__$2)) ? transformer.call(null, html, (new cljs.core.Keyword(null, "buf", "buf", -213913340)).cljs$core$IFn$_invoke$arity$1(state_13187__$2), cljs.core.first.call(null, more_13186__$1), cljs.core.assoc.call(null, cljs.core.dissoc.call(null, state_13187__$2, new cljs.core.Keyword(null, "buf", "buf", -213913340), new cljs.core.Keyword(null, "lists", "lists", 
      -884730684)), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), true)) : state_13187__$2;
      if (cljs.core.truth_(cljs.core.not_empty.call(null, more_13186__$1))) {
        var G__13189 = more_13186__$1;
        var G__13190 = cljs.core.assoc.call(null, transformer.call(null, html, line_13185__$1, cljs.core.first.call(null, more_13186__$1), state_13188__$3), new cljs.core.Keyword(null, "last-line-empty?", "last-line-empty?", 1279111527), cljs.core.empty_QMARK_.call(null, line_13185__$1));
        G__13174_13182__$1 = G__13189;
        state_13183__$1 = G__13190;
        continue;
      } else {
        transformer.call(null, html.append(markdown.transformers.footer.call(null, (new cljs.core.Keyword(null, "footnotes", "footnotes", -1842778205)).cljs$core$IFn$_invoke$arity$1(state_13188__$3))), line_13185__$1, "", cljs.core.assoc.call(null, state_13188__$3, new cljs.core.Keyword(null, "eof", "eof", -489063237), true));
      }
      break;
    }
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "metadata", "metadata", 1799301597), metadata, new cljs.core.Keyword(null, "html", "html", -998796897), html.toString()], null);
  } finally {
    markdown.transformers.formatter = formatter13171;
    markdown.transformers._STAR_substring_STAR_ = _STAR_substring_STAR_13170;
  }
};
markdown.core.md__GT_html = function markdown$core$md__GT_html(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___13193 = arguments.length;
  var i__5836__auto___13194 = 0;
  while (true) {
    if (i__5836__auto___13194 < len__5835__auto___13193) {
      args__5842__auto__.push(arguments[i__5836__auto___13194]);
      var G__13195 = i__5836__auto___13194 + 1;
      i__5836__auto___13194 = G__13195;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 1 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(1), 0) : null;
  return markdown.core.md__GT_html.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5843__auto__);
};
markdown.core.md__GT_html.cljs$core$IFn$_invoke$arity$variadic = function(text, params) {
  return (new cljs.core.Keyword(null, "html", "html", -998796897)).cljs$core$IFn$_invoke$arity$1(markdown.core.md_to_html_string_STAR_.call(null, text, params));
};
markdown.core.md__GT_html.cljs$lang$maxFixedArity = 1;
markdown.core.md__GT_html.cljs$lang$applyTo = function(seq13191) {
  var G__13192 = cljs.core.first.call(null, seq13191);
  var seq13191__$1 = cljs.core.next.call(null, seq13191);
  return markdown.core.md__GT_html.cljs$core$IFn$_invoke$arity$variadic(G__13192, seq13191__$1);
};
markdown.core.md__GT_html_with_meta = function markdown$core$md__GT_html_with_meta(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___13198 = arguments.length;
  var i__5836__auto___13199 = 0;
  while (true) {
    if (i__5836__auto___13199 < len__5835__auto___13198) {
      args__5842__auto__.push(arguments[i__5836__auto___13199]);
      var G__13200 = i__5836__auto___13199 + 1;
      i__5836__auto___13199 = G__13200;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 1 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(1), 0) : null;
  return markdown.core.md__GT_html_with_meta.cljs$core$IFn$_invoke$arity$variadic(arguments[0], argseq__5843__auto__);
};
markdown.core.md__GT_html_with_meta.cljs$core$IFn$_invoke$arity$variadic = function(text, params) {
  return markdown.core.md_to_html_string_STAR_.call(null, text, cljs.core.into.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "parse-meta?", "parse-meta?", -1938948742), true], null), params));
};
markdown.core.md__GT_html_with_meta.cljs$lang$maxFixedArity = 1;
markdown.core.md__GT_html_with_meta.cljs$lang$applyTo = function(seq13196) {
  var G__13197 = cljs.core.first.call(null, seq13196);
  var seq13196__$1 = cljs.core.next.call(null, seq13196);
  return markdown.core.md__GT_html_with_meta.cljs$core$IFn$_invoke$arity$variadic(G__13197, seq13196__$1);
};
markdown.core.mdToHtml = function markdown$core$mdToHtml(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___13202 = arguments.length;
  var i__5836__auto___13203 = 0;
  while (true) {
    if (i__5836__auto___13203 < len__5835__auto___13202) {
      args__5842__auto__.push(arguments[i__5836__auto___13203]);
      var G__13204 = i__5836__auto___13203 + 1;
      i__5836__auto___13203 = G__13204;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return markdown.core.mdToHtml.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
goog.exportSymbol("markdown.core.mdToHtml", markdown.core.mdToHtml);
markdown.core.mdToHtml.cljs$core$IFn$_invoke$arity$variadic = function(params) {
  return cljs.core.apply.call(null, markdown.core.md__GT_html, params);
};
markdown.core.mdToHtml.cljs$lang$maxFixedArity = 0;
markdown.core.mdToHtml.cljs$lang$applyTo = function(seq13201) {
  return markdown.core.mdToHtml.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13201));
};
markdown.core.mdToHtmlWithMeta = function markdown$core$mdToHtmlWithMeta(var_args) {
  var args__5842__auto__ = [];
  var len__5835__auto___13206 = arguments.length;
  var i__5836__auto___13207 = 0;
  while (true) {
    if (i__5836__auto___13207 < len__5835__auto___13206) {
      args__5842__auto__.push(arguments[i__5836__auto___13207]);
      var G__13208 = i__5836__auto___13207 + 1;
      i__5836__auto___13207 = G__13208;
      continue;
    } else {
    }
    break;
  }
  var argseq__5843__auto__ = 0 < args__5842__auto__.length ? new cljs.core.IndexedSeq(args__5842__auto__.slice(0), 0) : null;
  return markdown.core.mdToHtmlWithMeta.cljs$core$IFn$_invoke$arity$variadic(argseq__5843__auto__);
};
goog.exportSymbol("markdown.core.mdToHtmlWithMeta", markdown.core.mdToHtmlWithMeta);
markdown.core.mdToHtmlWithMeta.cljs$core$IFn$_invoke$arity$variadic = function(params) {
  return cljs.core.apply.call(null, markdown.core.md__GT_html_with_meta, params);
};
markdown.core.mdToHtmlWithMeta.cljs$lang$maxFixedArity = 0;
markdown.core.mdToHtmlWithMeta.cljs$lang$applyTo = function(seq13205) {
  return markdown.core.mdToHtmlWithMeta.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq.call(null, seq13205));
};
